(function(jfgrid) {
	// console.log = function(){};
    window.jfgrid_compareWith = function(){
        //函数功能：比较或运算 第一个参数和第三个参数，返回比较结果的布尔值或者运算值
        //jfgrid.formula.operatorjson; 存储运算符和比较符
        var sp = arguments[1]; //操作符

        //参数一
        var data_fp = arguments[0];
        var fp;
        if(jfgrid.getObjType(data_fp) == "object" && data_fp.startCell != null){ //参数是选区
            if(sp == "&"){
                fp = jfgrid.func_methods.getCellDataDyadicArr(data_fp, "text");
            }
            else{
                fp = jfgrid.func_methods.getCellDataDyadicArr(data_fp, "number");
            }

            if(fp.length == 1 && fp[0].length == 1){
                fp = fp[0][0];
            }
        }
        else{
            fp = data_fp;
        }

        //参数二
        var data_tp = arguments[2];
        var tp;
        if(jfgrid.getObjType(data_tp) == "object" && data_tp.startCell != null){ //参数是选区
            if(sp == "&"){
                tp = jfgrid.func_methods.getCellDataDyadicArr(data_tp, "text");
            }
            else{
                tp = jfgrid.func_methods.getCellDataDyadicArr(data_tp, "number");
            }

            if(tp.length == 1 && tp[0].length == 1){
                tp = tp[0][0];
            }
        }
        else{
            tp = data_tp;
        }

        if(jfgrid.func_methods.valueIsError(fp)){
            return fp;
        }

        if(jfgrid.func_methods.valueIsError(tp)){
            return tp;
        }

        //参数是不规则二维数组 时 return #VALUE! 错误
        if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(fp[0]) == "array" && !jfgrid.func_methods.isDyadicArr(fp)){
            return jfgrid.formula.error.v;   
        }

        if(jfgrid.getObjType(tp) == "array" && jfgrid.getObjType(tp[0]) == "array" && !jfgrid.func_methods.isDyadicArr(tp)){
            return jfgrid.formula.error.v;   
        }

        if(sp == "<>"){
            sp = "!=";
        }

        if(sp == "="){
            sp = "==";
        }

        if(sp == "-" && fp == null){
            fp = 0;
        }

        //计算result
        function booleanOperation(a, operator, b){
            if(jfgrid.func_methods.isRealNum(a)){
                a = parseFloat(a);
            }

            if(jfgrid.func_methods.isRealNum(b)){
                b = parseFloat(b);
            }

            if(operator == "=="){
                if(a == b){
                    return true;
                }
                else{
                    return false;
                }
            }
            else if(operator == "!="){
                if(a != b){
                    return true;
                }
                else{
                    return false;
                }
            }
            else if(operator == ">="){
                if(a >= b){
                    return true;
                }
                else{
                    return false;
                }
            }
            else if(operator == "<="){
                if(a <= b){
                    return true;
                }
                else{
                    return false;
                }
            }
            else if(operator == ">"){
                if(a > b){
                    return true;
                }
                else{
                    return false;
                }
            }
            else if(operator == "<"){
                if(a < b){
                    return true;
                }
                else{
                    return false;
                }
            }
        }

        //布尔值对应数字（true = 1, false = 1）
        function booleanToNum(v){
            if(v == null){
                return v;
            }

            if(v.toString().toLowerCase() == "true"){
                return 1;
            }

            if(v.toString().toLowerCase() == "false"){
                return 0;
            }

            return v;
        }
          
        if(sp == "*"){ //乘
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    //二维数组相乘（m*n 与 m*n 等于 m*n；m*p 与 p*n 等于 m*n；其它错误） 
                    if(fp.length == tp.length && fp[0].length == tp[0].length){
                        for(var m = 0; m < fp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < fp[m].length; n++){
                                fp[m][n] = booleanToNum(fp[m][n]);
                                tp[m][n] = booleanToNum(tp[m][n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                    var value = parseFloat(fp[m][n]) * parseFloat(tp[m][n]);
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(fp[0].length == tp.length){
                        var rowlen = fp.length;
                        var collen = tp[0].length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                var value = 0;

                                for(var p = 0; p < fp[0].length; p++){
                                    fp[m][p] = booleanToNum(fp[m][p]);
                                    tp[p][n] = booleanToNum(tp[p][n]);

                                    if(jfgrid.func_methods.isRealNum(fp[m][p]) && jfgrid.func_methods.isRealNum(tp[p][n])){
                                        value += parseFloat(fp[m][p]) * parseFloat(tp[p][n]);
                                    }
                                    else{
                                        value += jfgrid.formula.error.v;
                                    }
                                }

                                if(value.toString() == "NaN"){
                                    value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(fp.length == tp[0].length){
                        var rowlen = tp.length;
                        var collen = fp[0].length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                var value = 0;

                                for(var p = 0; p < tp[0].length; p++){
                                    fp[p][n] = booleanToNum(fp[p][n]);
                                    tp[m][p] = booleanToNum(tp[m][p]);

                                    if(jfgrid.func_methods.isRealNum(tp[m][p]) && jfgrid.func_methods.isRealNum(fp[p][n])){
                                        value += parseFloat(tp[m][p]) * parseFloat(fp[p][n]);
                                    }
                                    else{
                                        value += jfgrid.formula.error.v;
                                    }
                                }

                                if(value.toString() == "NaN"){
                                    value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    //二维数组与一维数组相乘（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）
                    if(fp[0].length == tp.length){
                        for(var m = 0; m < fp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < fp[m].length; n++){
                                fp[m][n] = booleanToNum(fp[m][n]);
                                tp[n] = booleanToNum(tp[n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[n])){
                                    var value = parseFloat(fp[m][n]) * parseFloat(tp[n]);
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(fp[0].length == 1){
                        var rowlen = fp.length;
                        var collen = tp.length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                fp[m][0] = booleanToNum(fp[m][0]);
                                tp[n] = booleanToNum(tp[n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][0]) && jfgrid.func_methods.isRealNum(tp[n])){
                                    var value = parseFloat(fp[m][0]) * parseFloat(tp[n]);
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    //二维数组与一维数组相乘（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）
                    if(tp[0].length == fp.length){
                        for(var m = 0; m < tp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < tp[m].length; n++){
                                fp[n] = booleanToNum(fp[n]);
                                tp[m][n] = booleanToNum(tp[m][n]);

                                if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                    var value = parseFloat(fp[n]) * parseFloat(tp[m][n]);
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(tp[0].length == 1){
                        var rowlen = tp.length;
                        var collen = fp.length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                fp[n] = booleanToNum(fp[n]);
                                tp[m][0] = booleanToNum(tp[m][0]);

                                if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][0])){
                                    var value = parseFloat(fp[n]) * parseFloat(tp[m][0]);
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else{
                    //一维数组与一维数组相乘时，数组大小不一样是错误
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[n])){
                            var value = parseFloat(fp[n]) * parseFloat(tp[n]);
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                tp = booleanToNum(tp);

                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp)){
                                var value = parseFloat(fp[m][n]) * parseFloat(tp);
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp)){
                            var value = parseFloat(fp[n]) * parseFloat(tp);
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                fp = booleanToNum(fp);

                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                var value = parseFloat(fp) * parseFloat(tp[m][n]);
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[n])){
                            var value = parseFloat(fp) * parseFloat(tp[n]);
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else{
                fp = booleanToNum(fp);
                tp = booleanToNum(tp);

                if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp)){
                    var result = parseFloat(fp) * parseFloat(tp);
                }
                else{
                    var result = jfgrid.formula.error.v;
                }

                return result;
            }
        }
        else if(sp == "/"){ //除
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    //二维数组相除（m*n 与 m*n 等于 m*n；m*p 与 p*n 等于 m*n；其它错误） 
                    if(fp.length == tp.length && fp[0].length == tp[0].length){
                        for(var m = 0; m < fp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < fp[m].length; n++){
                                fp[m][n] = booleanToNum(fp[m][n]);
                                tp[m][n] = booleanToNum(tp[m][n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                    if(parseFloat(tp[m][n]) == 0){
                                        var value = jfgrid.formula.error.d;
                                    }
                                    else{
                                        var value = parseFloat(fp[m][n]) / parseFloat(tp[m][n]);    
                                    }
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(fp[0].length == tp.length){
                        var tp_inverse = jfgrid.matrix_methods.inverse(tp);

                        var rowlen = fp.length;
                        var collen = tp_inverse[0].length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                var value = 0;

                                for(var p = 0; p < fp[0].length; p++){
                                    fp[m][p] = booleanToNum(fp[m][p]);
                                    tp_inverse[p][n] = booleanToNum(tp_inverse[p][n]);

                                    if(jfgrid.func_methods.isRealNum(fp[m][p]) && jfgrid.func_methods.isRealNum(tp_inverse[p][n])){
                                        value += parseFloat(fp[m][p]) * parseFloat(tp_inverse[p][n]);
                                    }
                                    else{
                                        value += jfgrid.formula.error.v;
                                    }
                                }

                                if(value.toString() == "NaN"){
                                    value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    //二维数组与一维数组相除（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）
                    if(fp[0].length == tp.length){
                        for(var m = 0; m < fp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < fp[m].length; n++){
                                fp[m][n] = booleanToNum(fp[m][n]);
                                tp[n] = booleanToNum(tp[n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[n])){
                                    if(parseFloat(tp[n]) == 0){
                                        var value = jfgrid.formula.error.d;
                                    }
                                    else{
                                        var value = parseFloat(fp[m][n]) / parseFloat(tp[n]);
                                    }
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(fp[0].length == 1){
                        var rowlen = fp.length;
                        var collen = tp.length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                fp[m][0] = booleanToNum(fp[m][0]);
                                tp[n] = booleanToNum(tp[n]);

                                if(jfgrid.func_methods.isRealNum(fp[m][0]) && jfgrid.func_methods.isRealNum(tp[n])){
                                    if(parseFloat(tp[n]) == 0){
                                        var value = jfgrid.formula.error.d;
                                    }
                                    else{
                                        var value = parseFloat(fp[m][0]) / parseFloat(tp[n]);
                                    }
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    //二维数组与一维数组相除（m*n 与 n 等于 m*n；m*1 与 n 等于 m*n；其它错误）
                    if(tp[0].length == fp.length){
                        for(var m = 0; m < tp.length; m++){
                            var rowArr = [];

                            for(var n = 0; n < tp[m].length; n++){
                                fp[n] = booleanToNum(fp[n]);
                                tp[m][n] = booleanToNum(tp[m][n]);

                                if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                    if(parseFloat(tp[m][n]) == 0){
                                        var value = jfgrid.formula.error.d;
                                    }
                                    else{
                                        var value = parseFloat(fp[n]) / parseFloat(tp[m][n]);
                                    }
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else if(tp[0].length == 1){
                        var rowlen = tp.length;
                        var collen = fp.length;

                        for(var m = 0; m < rowlen; m++){
                            var rowArr = [];

                            for(var n = 0; n < collen; n++){
                                fp[n] = booleanToNum(fp[n]);
                                tp[m][0] = booleanToNum(tp[m][0]);

                                if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][0])){
                                    if(parseFloat(tp[m][0]) == 0){
                                        var value = jfgrid.formula.error.d;
                                    }
                                    else{
                                        var value = parseFloat(fp[n]) / parseFloat(tp[m][0]);
                                    }
                                }
                                else{
                                    var value = jfgrid.formula.error.v;
                                }

                                rowArr.push(value);
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        return jfgrid.formula.error.na;
                    }
                }
                else{
                    //一维数组与一维数组相除时，数组大小不一样是错误
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[n])){
                            if(parseFloat(tp[n]) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = parseFloat(fp[n]) / parseFloat(tp[n]);
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                tp = booleanToNum(tp);

                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp)){
                                if(parseFloat(tp) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = parseFloat(fp[m][n]) / parseFloat(tp);
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp)){
                            if(parseFloat(tp) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = parseFloat(fp[n]) / parseFloat(tp);
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                fp = booleanToNum(fp);

                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                if(parseFloat(tp[m][n]) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = parseFloat(fp) / parseFloat(tp[m][n]);
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[n])){
                            if(parseFloat(tp[n]) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = parseFloat(fp) / parseFloat(tp[n]);
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else{
                fp = booleanToNum(fp);
                tp = booleanToNum(tp);

                if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp)){
                    if(parseFloat(tp) == 0){
                        var result = jfgrid.formula.error.d;
                    }
                    else{
                        var result = parseFloat(fp) / parseFloat(tp);
                    }
                }
                else{
                    var result = jfgrid.formula.error.v;
                }

                return result;
            }
        }
        else if(sp == "+" || sp == "-" || sp == "%"){ //加 减 取余
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    if(fp.length != tp.length && fp[0].length != tp[0].length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                if(sp == "%" && parseFloat(tp[m][n]) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[m][n]));    
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    if(fp[0].length != tp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);
                            tp[n] = booleanToNum(tp[n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[n])){
                                if(sp == "%" && parseFloat(tp[n]) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = eval(parseFloat(fp[m][n]) + sp + parseFloat(tp[n]));    
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    if(tp[0].length != fp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            fp[n] = booleanToNum(fp[n]);
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                if(sp == "%" && parseFloat(tp[m][n]) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = eval(parseFloat(fp[n]) + sp + parseFloat(tp[m][n]));    
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[n])){
                            if(sp == "%" && parseFloat(tp[n]) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = eval(parseFloat(fp[n]) + sp + parseFloat(tp[n]));    
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                tp = booleanToNum(tp);

                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp)){
                                if(sp == "%" && parseFloat(tp) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = eval(parseFloat(fp[m][n]) + sp + parseFloat(tp));    
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp)){
                            if(sp == "%" && parseFloat(tp) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = eval(parseFloat(fp[n]) + sp + parseFloat(tp));    
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                fp = booleanToNum(fp);

                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                if(sp == "%" && parseFloat(tp[m][n]) == 0){
                                    var value = jfgrid.formula.error.d;
                                }
                                else{
                                    var value = eval(parseFloat(fp) + sp + parseFloat(tp[m][n]));    
                                }
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[n])){
                            if(sp == "%" && parseFloat(tp[n]) == 0){
                                var value = jfgrid.formula.error.d;
                            }
                            else{
                                var value = eval(parseFloat(fp) + sp + parseFloat(tp[n]));    
                            }
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else{
                fp = booleanToNum(fp);
                tp = booleanToNum(tp);

                if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp)){
                    if(sp == "%" && parseFloat(tp) == 0){
                        var result = jfgrid.formula.error.d;
                    }
                    else{
                        var result = eval(parseFloat(fp) + sp + parseFloat(tp));    
                    }
                }
                else{
                    var result = jfgrid.formula.error.v;
                }

                return result;
            }
        }
        else if(sp == "==" || sp == "!=" || sp == ">=" || sp == "<=" || sp == ">" || sp == "<"){ //比较运算符
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    if(fp.length != tp.length && fp[0].length != tp[0].length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            var value = booleanOperation(fp[m][n], sp, tp[m][n]);
                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    if(fp[0].length != tp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            var value = booleanOperation(fp[m][n], sp, tp[n]);
                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    if(tp[0].length != fp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            var value = booleanOperation(fp[n], sp, tp[m][n]);
                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        var value = booleanOperation(fp[n], sp, tp[n]);
                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            var value = booleanOperation(fp[m][n], sp, tp);
                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        var value = booleanOperation(fp[n], sp, tp);
                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            var value = booleanOperation(fp, sp, tp[m][n]);
                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        var value = booleanOperation(fp, sp, tp[n]);
                        result.push(value);
                    }
                }

                return result;
            }
            else{
                return booleanOperation(fp, sp, tp);
            }
        }
        else if(sp == "&"){ //连接符
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    if(fp.length != tp.length && fp[0].length != tp[0].length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            rowArr.push(fp[m][n] + "" + tp[m][n]);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    if(fp[0].length != tp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            rowArr.push(fp[m][n] + "" + tp[n]);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    if(tp[0].length != fp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            rowArr.push(fp[n] + "" + tp[m][n]);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        result.push(fp[n] + "" + tp[n]);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            rowArr.push(fp[m][n] + "" + tp);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        result.push(fp[n] + "" + tp);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            rowArr.push(fp + "" + tp[m][n]);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        result.push(fp + "" + tp[n]);
                    }
                }

                return result;
            }
            else{
                return fp + "" + tp;
            }
        }
        else if(sp == "^"){ //幂
            if(jfgrid.getObjType(fp) == "array" && jfgrid.getObjType(tp) == "array"){
                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array" && jfgrid.getObjType(tp[0]) == "array"){
                    if(fp.length != tp.length && fp[0].length != tp[0].length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                var value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp[m][n]));
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(fp[0]) == "array"){
                    if(fp[0].length != tp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);
                            tp[n] = booleanToNum(tp[n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp[n])){
                                var value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp[n]));
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(tp[0]) == "array"){
                    if(tp[0].length != fp.length){
                        return jfgrid.formula.error.na;
                    }

                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            fp[n] = booleanToNum(fp[n]);
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                var value = Math.pow(parseFloat(fp[n]), parseFloat(tp[m][n]));
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    if(fp.length != tp.length){
                        return jfgrid.formula.error.na;   
                    }

                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp[n])){
                            var value = Math.pow(parseFloat(fp[n]), parseFloat(tp[n]));
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(fp) == "array"){
                tp = booleanToNum(tp);

                var result = [];

                if(jfgrid.getObjType(fp[0]) == "array"){
                    for(var m = 0; m < fp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < fp[m].length; n++){
                            fp[m][n] = booleanToNum(fp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp[m][n]) && jfgrid.func_methods.isRealNum(tp)){
                                var value = Math.pow(parseFloat(fp[m][n]), parseFloat(tp));
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < fp.length; n++){
                        fp[n] = booleanToNum(fp[n]);

                        if(jfgrid.func_methods.isRealNum(fp[n]) && jfgrid.func_methods.isRealNum(tp)){
                            var value = Math.pow(parseFloat(fp[n]), parseFloat(tp));
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else if(jfgrid.getObjType(tp) == "array"){
                fp = booleanToNum(fp);

                var result = [];

                if(jfgrid.getObjType(tp[0]) == "array"){
                    for(var m = 0; m < tp.length; m++){
                        var rowArr = [];

                        for(var n = 0; n < tp[m].length; n++){
                            tp[m][n] = booleanToNum(tp[m][n]);

                            if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[m][n])){
                                var value = Math.pow(parseFloat(fp), parseFloat(tp[m][n]));
                            }
                            else{
                                var value = jfgrid.formula.error.v;
                            }

                            rowArr.push(value);
                        }

                        result.push(rowArr);
                    }
                }
                else{
                    for(var n = 0; n < tp.length; n++){
                        tp[n] = booleanToNum(tp[n]);

                        if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp[n])){
                            var value = Math.pow(parseFloat(fp), parseFloat(tp[n]));
                        }
                        else{
                            var value = jfgrid.formula.error.v;
                        }

                        result.push(value);
                    }
                }

                return result;
            }
            else{
                fp = booleanToNum(fp);
                tp = booleanToNum(tp);

                if(jfgrid.func_methods.isRealNum(fp) && jfgrid.func_methods.isRealNum(tp)){
                    var result = Math.pow(parseFloat(fp), parseFloat(tp));
                }
                else{
                    var result = jfgrid.formula.error.v;
                }

                return result;
            }
        }
    };

    window.jfgrid_getarraydata = function(){
        var fp = arguments[0];

        fp = fp.replace("{", "").replace("}", "").replace(/\"/g, '');

        var arr = [];

        if(fp.indexOf(";") > -1){
            arr = fp.split(";");

            for(var i = 0; i < arr.length; i++){
                arr[i] = arr[i].split(",");
            }
        }
        else{
            arr = fp.split(",");    
        }

        return arr;
    };

    window.jfgrid_getcelldata = function(txt) {
        if (window.jfgrid_getcelldata_cache == null) {
            window.jfgrid_getcelldata_cache = {};
        }

        if (txt in window.jfgrid_getcelldata_cache) {
            return window.jfgrid_getcelldata_cache[txt];
        }

        var jfgridfile = jfgrid.getjfgridfile();
        var val = txt.split("!");
        var sheettxt = "",
            rangetxt = "",
            sheetIndex = -1,
            sheetdata = null;
        
        if (val.length > 1) {
            sheettxt = val[0];
            rangetxt = val[1];
            
            for (var i in jfgridfile) {
                if (sheettxt == jfgridfile[i].name) {
                    sheetIndex = jfgridfile[i].index;
                    sheetdata = jfgridfile[i].data;
                    break;
                }
            }

            if (sheetIndex == -1) {
                sheetIndex = 0;
            }
        } 
        else {
            var index = jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex);
            sheettxt = jfgridfile[index].name;
            sheetIndex = jfgridfile[index].index;
            sheetdata = jfgrid.flowdata;
            rangetxt = val[0];

            if (jfgrid.formula.execFunctionGroupData != null) {
                sheetdata = jfgrid.formula.execFunctionGroupData;
            }
        }

        if (rangetxt.indexOf(":") == -1) {
            var row = parseInt(rangetxt.replace(/[^0-9]/g, "")) - 1;
            var col = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
            if (!isNaN(row) && !isNaN(col)) {
                var ret = jfgrid.getdatabyselectionD(sheetdata, {
                    "row": [row, row],
                    "column": [col, col]
                })[0][0];
                 
                 /*
                if (ret instanceof Object) {
                    if(jfgrid.datecontroll.isdatetime(ret.m)){ //如果是时间格式，则获取m
                        ret = ret.m;
                    }else{
                        ret = ret.v; 
                    }
                    
                }
                */ // 获取对象，包含格式（ct）用于后续计算
                /*if (ret instanceof Object) {
                        ret = ret.v; //时间格式亦获取v
                }*/

                
                //return ret;

                //runze.liu New
                 //范围的长宽
                var rowl = 1;
                var coll = 1;
                var retAll= {"sheetName":sheettxt,"startCell":rangetxt,"rowl":rowl,"coll":coll,"data":ret};
                window.jfgrid_getcelldata_cache[txt] = retAll;
                return retAll;
                //runze.liu         
            } 
            else {
                return [];
            }
        } 
        else {
            rangetxt = rangetxt.split(":");
            var row = [], col = [];
            //console.log(rangetxt[0].replace(/[^0-9]/, ""), rangetxt[1].replace(/[^0-9]/, ""), rangetxt);
            row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, "")) - 1;
            row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, "")) - 1;
            
            if (isNaN(row[0])) {
                row[0] = 0;
            }

            if (isNaN(row[1])) {
                row[1] = sheetdata.length - 1;
            }

            if (row[0] > row[1]) {
                jfgrid.tooltip.info("选择失败", "输入范围错误！");
                return [];
            }

            col[0] = jfgrid.jfgridABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ""));
            col[1] = jfgrid.jfgridABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ""));
            
            if (isNaN(col[0])) {
                col[0] = 0;
            }

            if (isNaN(col[1])) {
                col[1] = sheetdata[0].length - 1;
            }

            if (col[0] > col[1]) {
                jfgrid.tooltip.info("选择失败", "输入范围错误！");
                return [];
            }
            //if (!isNaN(row)) {
            //    return jfgrid.getdatabyselectionD(sheetdata, { "row": [row, row], "column": [0, sheetdata[0].length - 1] });
            //}
            //else if (!isNaN(col)) {
            //    return jfgrid.getdatabyselectionD(sheetdata, { "row": [0, sheetdata.length - 1], "column": [col, col] });
            //}
            //console.log("sheetData::",sheetdata);
            var ret = jfgrid.getdatabyselectionD(sheetdata, {
                "row": row,
                "column": col
            });
            
            //return ret;

            //runze.liu New
            //范围的长宽
            var rowl = row[1] - row[0] + 1;
            var coll = col[1] - col[0] + 1;
            var retAll= {"sheetName":sheettxt,"startCell":rangetxt[0],"rowl":rowl,"coll":coll,"data":ret};
            window.jfgrid_getcelldata_cache[txt] = retAll;
            //console.log("所有的："+retAll.sheetName,retAll.startCell,retAll.rowl,retAll.coll,retAll.data);
            return retAll;
            //runze.liu
        }
    };
    //解析单个取得的值，有字符串，数字，引用单元格或者函数
    window.jfgrid_parseData = function(value) {
        if(typeof value === "object" ){
            if(value == null){
                return "";
            }
            else if(Array.isArray(value)){ //函数返回的带期望格式的数组，可提取格式
                var v = jfgrid.mask.genarate(value[0]);
                return v[2];
            }
            else{ //getcelldat引用单元格对象，带有格式
                if(Array.isArray(value.data)){ //单元格区域
                    return jfgrid.formula.error.v;             
                }
                else{ //单个单元格
                    if(value.data.v === undefined){
                        return "";
                    }
                    else{
                        return value.data.v;
                    }
                }
            }
        }
        else if(!jfgrid.formula.isCompareOperator(value).flag){
            var v = jfgrid.mask.genarate(value);
            return v[2];
        }
        else if(typeof value === "string" || typeof value === "number"){
            return value;
        }

        return jfgrid.formula.error.v;
    };
    window.jfgrid_getValue = function(){
        //解析获取函数参数，无格式，且可包含带操作符的">5"
        //数据类型：1.手动输入或函数返回的字符串，普通字符串或数字直接取值，特殊格式需转化 如："2019-1-1"（特殊格式转化为数字）、">5"或数字
        //2.引用单元格对象，取得二维数组或单个的v 如：A1
        //3.函数返回的带期望格式的数组，取得第一个参数，转化为数字 如：["2019-1-1",true]
        var args = arguments[0];
        for(var i = 0;i<args.length;i++){
            var value = args[i];
            if(typeof value === "object" ){
                if(value == null){
                    value = "";
                }
                else if(Array.isArray(value)){ //函数返回的带期望格式的数组，可提取格式
                    var v = jfgrid.mask.genarate(value[0]);
                    value = v[2];
                }else{ //getcelldat引用单元格对象，带有格式
                    if(Array.isArray(value.data)){ //单元格区域
                        value = value.data;                
                    }else{ //单个单元格
                        if(value.data.v === undefined){ //空白单元格
                            value = "";
                        }else{
                            value = value.data.v;
                        }
                    }
                    
                }
            }else if(!jfgrid.formula.isCompareOperator(value).flag){
                var v = jfgrid.mask.genarate(value);
                value = v[2];
            }
            args[i] = value;
        }
    };

    jfgrid.formula = {
        error: {
            v: "#VALUE!",    //错误的参数或运算符
            n: "#NAME?",     //公式名称错误
            na: "#N/A",      //函数或公式中没有可用数值
            r: "#REF!",      //删除了由其他公式引用的单元格
            d: "#DIV/0!",    //除数是0或空单元格
            nm: "#NUM!",     //当公式或函数中某个数字有问题时
            nl: "#NULL!",    //交叉运算符（空格）使用不正确
            sp: "#SPILL!"    //数组范围有其它值
        },
        errorInfo: function(err) {
            return err;
        },
        errorParamCheck: function(thisp, data, i) {
            if(i < thisp.length){
                var type = thisp[i].type;
                var require = thisp[i].require;
            }
            else{
                var type = thisp[thisp.length - 1].type;
                var require = thisp[thisp.length - 1].require;
            }

            if(require == "o" && (data == null || data == "")){
                return [true, "成功"];
            }

            if(type.indexOf("all") > -1){
                return [true, "成功"];
            }
            else{
                if(type.indexOf("range") > -1 && (jfgrid.getObjType(data) == "object" || jfgrid.getObjType(data) == "array")){
                    return [true, "成功"];
                }

                if(type.indexOf("number") > -1 && (jfgrid.func_methods.isRealNum(data) || jfgrid.getObjType(data) == "boolean")){
                    return [true, "成功"];
                }
                
                if(type.indexOf("string") > -1 && jfgrid.getObjType(data) == "string"){
                    return [true, "成功"];
                }

                if(type.indexOf("date") > -1 && jfgrid.datecontroll.isdatetime(data)){
                    return [true, "成功"];
                }

                return [false, "参数类型错误"];
            }
        },
        getPureValueByData:function(data){
            if(data.length == 0){
                return [];
            }

            var output = [];

            if(jfgrid.getObjType(data) == "array"){
                if(jfgrid.getObjType(data[0]) == "array"){
                    for(var r = 0; r < data.length; r++){
                        var row = [];

                        for(var c = 0; c < data[0].length; c++){
                            var cell = data[r][c];

                            if(jfgrid.getObjType(cell) == "object"){
                                row.push(cell.v);
                            }
                            else{
                                row.push(cell);
                            }
                        }

                        output.push(row);
                    }
                }
                else{
                    for(var i = 0; i < data.length; i++){
                        var cell = data[i];

                        if(jfgrid.getObjType(cell) == "object"){
                            output.push(cell.v);
                        }
                        else{
                            output.push(cell);
                        }
                    }
                }
            }
            else {
                var cell = data;

                if(jfgrid.getObjType(cell) == "object"){
                    output.push(cell.v);
                }
                else{
                    output.push(cell);
                }
            }

            return output;
        },
        //sparklines添加
        readCellDataToOneArray:function(rangeValue){
            if(rangeValue == null){
                return [];
            }

            if(jfgrid.getObjType(rangeValue) != "object"){
                return [rangeValue];
            }

            var dataformat = [];

            var data = [];

            if(rangeValue != null && rangeValue.data != null){
                data = rangeValue.data;
            }
            else if(rangeValue != null && !jfgrid.func_methods.isRealNull(rangeValue.v)){
                return [rangeValue.v];
            }
            else{
                return [];
            }

            //适配excel的动态数组格式，{1，2，3，4，5}或者{{1，2，3}，{4，5，6}，{7，8，9}}
            if(jfgrid.getObjType(data) == "array"){
                data = jfgrid.formula.getPureValueByData(data);
            }
            else if(jfgrid.getObjType(data) == "object"){
                data = data.v;

                return [data];
            }
            else{
                if(/\{.*?\}/.test(data)){
                    data = data.replace(/\{/g, "[").replace(/\}/g, "]");
                }

                data = eval('('+ data +')');
            }

            //把二维数组转换为一维数组，sparklines要求数据格式为一维数组
            //var dataformat = [];
            if(jfgrid.getObjType(data[0]) == "array"){
                for(var i = 0; i < data.length; i++){
                    dataformat = dataformat.concat(data[i]);
                }
            }
            else{
                dataformat = data;
            }

            return dataformat;
        },
        //sparklines添加
        //获得函数里某个参数的值，使用此函数需要在函数中执行jfgrid_getValue方法
        getValueByFuncData:function(value, arg){
            if(value == null){
                return null;
            }

            var _this = this;
            
            if(jfgrid.getObjType(value) == "array"){
                if(arg == "avg"){
                    return window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, value);
                }
                else if(arg == "sum"){
                    return window.jfgrid_function.SUM.f.apply(window.jfgrid_function.SUM, value);
                }
                else{
                    if(jfgrid.getObjType(value[0]) == "object"){
                        return jfgrid.mask.getValueByFormat(value[0]);
                    }
                    else{
                        return value[0];
                    }
                }
            }
            else if(jfgrid.getObjType(value) == "object"){
                return jfgrid.mask.getValueByFormat(value);
            }
            else{
                return value;
            }
        },
        //sparklines添加
        sparklinesColorMap:function(arguments, len){
            var colorLists = null;
            
            if(len == null){
                len = 5;
            }

            var index = 0;
            
            if(arguments.length > len){
                for(var i = len; i < arguments.length; i++){
                    var colorMap = arguments[i];
                    var colorListArray = jfgrid.formula.readCellDataToOneArray(colorMap);

                    for(var a = 0; a < colorListArray.length; a++){
                        var ca = colorListArray[a];

                        if(ca.indexOf(":") > -1){
                            if(!colorLists){
                                colorLists = {};
                            }

                            var calist = ca.split(":");

                            if(calist.length == 2){
                                colorLists[calist[0]] = calist[1];
                            }
                            else if(calist.length > 1){
                                colorLists[calist[0] + ":" + calist[1]] = calist[2];
                            }
                        }
                        else{
                            if(!colorLists){
                                colorLists = [];
                            }

                            colorLists.push(ca);
                        }
                    }

                    index++;
                }
            }

            return colorLists;
        },
        //sparklines添加
        colorList:["#2ec7c9", "#fc5c5c", "#5ab1ef", "#ffb980", "#d87a80", "#8d98b3", "#e5cf0d", "#97b552", "#95706d","#dc69aa","#07a2a4","#9a7fd1","#588dd5","#f5994e","#c05050","#59678c","#c9ab00","#7eb00a","#6f5553","#c14089"],
        classlist: {
            "province": {
                11: "北京",
                12: "天津",
                13: "河北",
                14: "山西",
                15: "内蒙古",
                21: "辽宁",
                22: "吉林",
                23: "黑龙江",
                31: "上海",
                32: "江苏",
                33: "浙江",
                34: "安徽",
                35: "福建",
                36: "江西",
                37: "山东",
                41: "河南",
                42: "湖北",
                43: "湖南",
                44: "广东",
                45: "广西",
                46: "海南",
                50: "重庆",
                51: "四川",
                52: "贵州",
                53: "云南",
                54: "西藏",
                61: "陕西",
                62: "甘肃",
                63: "青海",
                64: "宁夏",
                65: "新疆",
                71: "台湾",
                81: "香港",
                82: "澳门",
                91: "国外"
            }
        },
        oldvalue: null,
        dontupdate: function() {
            jfgridCellUpdate = [];
            $("#jfgrid-functionbox-cell, #jfgrid-rich-text-editor").html(this.oldvalue);
            //jfgrid.formula.rangestart = false;
            this.cancelNormalSelected();
            if (jfgrid.formula.rangetosheet != jfgrid.currentSheetIndex) {
                jfgrid.sheetmanage.changeSheetExec(jfgrid.formula.rangetosheet);
            }
            //jfgridMoveHighlightCell("down", 0);
        },
        fucntionboxshow: function(r, c) {
            var d = jfgrid.flowdata;
            var value = "";

            if (d[r] != null && d[r][c] != null && d[r][c].v != null) {
                var cell = d[r][c];
                if(cell.f!=null){
                    value = jfgrid.getcellvalue(r, c, d, "f");
                }
                else{
                    value = jfgrid.mask.valueShowEs(r, c, d);
                }
            }

            this.oldvalue = value;
            $("#jfgrid-functionbox-cell").html(value);
        },
        //获得某个单元格或区域的偏移一定距离后的单元格( Sheet1!B6:C8 格式)
        cellOffset:function(range,rows,cols,height,width){// 参数：range or cell , rows,cols,height,width
            var startCell = range.startCell;
            var rowl = range.rowl;
            var coll = range.coll;
            var startCellRow = parseInt(startCell.replace(/[^0-9]/g, ""));
            var startCellCol = jfgrid.jfgridABCatNum(startCell.replace(/[^A-Za-z]/g, ""));

            var row = [],col = [],offsetRange;
            row[0] = startCellRow + rows;
            col[0] = startCellCol + cols;

            row[1] = row[0] + height - 1;
            col[1] = col[0] + width - 1;

            col[0] = jfgrid.jfgridchatatABC(col[0]);
            col[1] = jfgrid.jfgridchatatABC(col[1]);

            var cellF = col[0] + row[0];
            var cellL = col[1] + row[1];
            if(cellF == cellL){
                offsetRange =  range.sheetName + "!"+ cellF;
            }else{
                offsetRange = range.sheetName + "!"+ cellF + ":" + cellL;
            }
            return offsetRange;
        },
        parseDatetoNum:function(date){ //函数中获取到时间格式或者数字形式统一转化为数字进行运算 
            if(typeof(date) == "object" && typeof date.v == "number"){
                date = date.v;
            }else if(jfgrid.isdatatype(date) == "num"){
                date = parseFloat(date);
            }else if(jfgrid.isdatatype(date) == "date"){
                date = jfgrid.mask.genarate(date)[2];
            }else{
                return jfgrid.formula.error.v;
            }
            return date;
        },
        //获取一维数组
        getRangeArray:function(range){
            var rangeNow = [];
            var fmt = "General";
            if(range.length == 1){ //一行
                for(var c = 0;c < range[0].length;c++){
                    if(range[0][c] != null && range[0][c].v){
                        rangeNow.push(range[0][c].v);
                        var f = range[0][c].ct.fa;
                        fmt = (fmt == "General") ? f : fmt;
                    }else{
                        //若单元格为null或为空，此处推入null（待考虑是否使用"null"）
                        rangeNow.push(null);
                    }
                    
                }
            }else if(range[0].length == 1){ //一列
                  
                  for(var r = 0;r < range.length;r++){
                    if(range[r][0] != null && range[r][0].v){
                        rangeNow.push(range[r][0].v);
                        var f = range[r][0].ct.fa;
                        fmt = (fmt == "General") ? f : fmt;
                    }else{
                        rangeNow.push(null);
                    }
                    
                  }
            }else{
                for(var r = 0;r < range.length;r++){
                    for(var c = 0;c < range[r].length;c++){
                        if(range[r][c] != null && range[r][c].v){
                            rangeNow.push(range[r][c].v);
                            var f = range[r][c].ct.fa;
                            fmt = (fmt == "General") ? f : fmt;
                        }else{
                            rangeNow.push(null);
                        }
                    }
                }
            }
            range = rangeNow;
            return [range,fmt];
        },
        //获取二维数组：qksheet格式[[{v,m,ct}] ==> [1]
        getRangeArrayTwo:function(range){
                var data = $.extend(true, [], range);
                if(data.length == 1){ //一行
                    for(var c = 0;c < data[0].length;c++){
                        if(data[0][c] instanceof Object){
                            if(data[0][c] != null && data[0][c] instanceof Object && !!data[0][c].m){
                                data[0][c] = data[0][c].m;
                            }else{
                                if(data[0][c] != null && data[0][c] instanceof Object && !!data[0][c].v){
                                    data[0][c] = data[0][c].v;
                                }else{
                                    data[0][c] = null;
                                }
                                
                            }
                        }
                        
                        
                    }
                }else if(data[0].length == 1){ //一列
                      
                      for(var r = 0;r < data.length;r++){
                        if(data[r][0] instanceof Object){
                            if(data[r][0] != null && data[r][0] instanceof Object && !!data[r][0].m){
                                data[r][0] = data[r][0].m;
                            }else{
                                if(data[r][0] != null && data[r][0] instanceof Object && !!data[r][0].v){
                                    data[r][0] = data[r][0].v;
                                }else{
                                    data[r][0] = null;
                                }
                            }
                        }
                        
                        
                      }
                }else{
                    for(var r = 0;r < data.length;r++){
                        for(var c = 0;c < data[r].length;c++){
                            if(data[r][c] instanceof Object){
                                if(data[r][c] != null && data[r][c] instanceof Object && !!data[r][c].m){
                                    data[r][c] = data[r][c].m;
                                }else{
                                    if(data[r][c] != null && data[r][c] instanceof Object && !!data[r][c].v){
                                        data[r][c] = data[r][c].v;
                                    }else{
                                        data[r][c] = null;
                                    }
                                }
                            }
                            
                        }
                    }
                }
                return data;
        },
        isWildcard:function(a, b){ //正则匹配通配符: * ? ~* ~?,a目标参数，b通配符
            a = a.toString();
            b = b.toString();
          
            if(jfgrid.formula.isCompareOperator(b).flag){
                b = jfgrid.formula.isCompareOperator(b).num;
            }
            var str = "";
            for(var i = 0;i < b.length;i++){
                var v = b.charAt(i);
            
                if(v == "*" ){
                    str += ".*";
                }
                else if(v == "?"){
                    str += ".";
                }
                else if(v == "~"){
                    if(b.charAt(i+1) == "*"){
                        str += "\\*";
                        i++;
                    }
                    else if(b.charAt(i+1) == "?"){
                        str += "\\?";
                        i++;
                    }
                    else{
                        str += "~";
                    }
                }
                else{
                    str += v;
                }
            }
          
            var reg = new RegExp("^" + str + "$","g");
            return !!a.match(reg);
        },
        isCompareOperator:function(str){ //判断前一个或者两个字符是否是比较运算符
            str = str.toString();
            var ope = ""; //存放比较运算符
            var num = ""; //截取比较运算符之后的数字用于实际比较
            var strOne = str.substr(0,1); 
            var strTwo = str.substr(1,1);
            var flag = false;
            var ret;

            if(strOne == ">"){
                if(strTwo == "="){
                    ope = str.substr(0,2);
                    num = str.substr(2);
                    flag = true;
                }else if(strTwo != "="){
                    ope = str.substr(0,1);
                    num = str.substr(1);
                    flag = true;
                }
            }else if(strOne == "<"){
                if(strTwo == "=" || strTwo == ">"){
                    ope = str.substr(0,2);
                    num = str.substr(2);
                    flag = true;
                }else if(strTwo != "=" && strTwo != ">"){
                    ope = str.substr(0,1);
                    num = str.substr(1);
                    flag = true;
                }
            }else if(strOne == "=" && strTwo != "="){
                ope = str.substr(0,1);
                num = str.substr(1);
                flag = true;
            }
            ret = {"flag":flag,"ope":ope,"num":num};
            //console.log("字符串：",flag,ope,num);
            return ret;
        },
        acompareb:function(a, b){ //a 与 b比较，b可为含比较符，通配符
            var bFirst;
            var flag = false;

            // if(jfgrid.isdatatype(b) == "num"){
            if(jfgrid.func_methods.isRealNum(b)){
                flag = jfgrid_compareWith(a,"==",b);
            }
            else if(typeof(b) == "string"){ //条件输入字符串，如：">233"
                if(b.indexOf("*") != -1 || b.indexOf("?") != -1){ // 正则匹配：输入通配符："黑*","白?",以及"白?黑*~*"
                    //通配符函数
                    return jfgrid.formula.isWildcard(a,b);
                }
                else if(jfgrid.formula.isCompareOperator(b).flag){ //"黑糖"
                    var ope = jfgrid.formula.isCompareOperator(b).ope;
                    var num = jfgrid.formula.isCompareOperator(b).num;
                    flag = jfgrid_compareWith(a,ope,num);
                }
                else{
                    flag = jfgrid_compareWith(a,"==",b);
                }
            }
            return flag;
        },
        compareParams:function(fp,sp,sym){  //比较两个字符串或者数字的大小，支持比较对象,暂不支持数组
            var flag = false;
            //判断a和b的数据类型
            var classNameA=toString.call(fp),
                classNameB=toString.call(sp);
            if(sym == ">"){
                if(fp > sp){flag = true;}
            }
            else if(sym == ">="){
                if(fp >= sp){flag = true;}
            }
            else if(sym == "<"){
                if(fp < sp){flag = true;}
            }
            else if(sym == "<="){
                if(fp <= sp){flag = true;}
            }
            else if(sym == "="){
                if(fp == sp){flag = true;}
            }else if(sym == "<>"){
                if(fp != sp){flag = true;}
            }

            //对象类型比较相等
            if(classNameA == '[object Object]' && classNameB == '[object Object]'){
                //获取a和b的属性长度
                var propsA = Object.getOwnPropertyNames(fp),
                    propsB = Object.getOwnPropertyNames(sp);
                if(propsA.length != propsB.length){
                  return false;
                }
                for(var i=0;i<propsA.length;i++){
                  var propName=propsA[i];
                  //如果对应属性对应值不相等，则返回false
                  if(fp[propName] !== sp[propName]){
                    return false;
                  }
                }
                return true;
            }
            //数组类型
              if(classNameA == '[object Array]' && classNameB == '[object Array]'){
                if(fp.toString() == sp.toString()){
                  return true;
                }
                return false;
              }
            
            return flag;
        },
        parseDecimal:function(num){
            var num = parseFloat(num);
            var d = parseInt(num,10);
            if(d == 0){
                return num;
            }
            num = num % d;
            return num;
        },
        getcellrange: function(txt) {
            var val = txt.split("!");

            var sheettxt = "",
                rangetxt = "",
                sheetIndex = -1,
                sheetdata = null;
            
            var jfgridfile = jfgrid.getjfgridfile();

            if (val.length > 1) {
                sheettxt = val[0];
                rangetxt = val[1];
                
                for (var i in jfgridfile) {
                    if (sheettxt == jfgridfile[i].name) {
                        sheetIndex = jfgridfile[i].index;
                        sheetdata = jfgridfile[i].data;
                        break;
                    }
                }
            } 
            else {
                var index = jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex);
                sheettxt = jfgridfile[index].name;
                sheetIndex = jfgridfile[index].index;
                sheetdata = jfgrid.flowdata;
                rangetxt = val[0];
            }
            
            if (rangetxt.indexOf(":") == -1) {
                var row = parseInt(rangetxt.replace(/[^0-9]/g, "")) - 1;
                var col = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
                if (!isNaN(row) && !isNaN(col)) {
                    return {
                        "row": [row, row],
                        "column": [col, col],
                        "sheetIndex": sheetIndex
                    };
                }
                //else if (!isNaN(row)) {
                //    return { "row": [row, row], "column": [0, sheetdata[0].length - 1], "sheetIndex": sheetIndex };
                //}
                //else if (!isNaN(col)) {
                //    return { "row": [0, sheetdata.length - 1], "column": [col, col], "sheetIndex": sheetIndex };
                //}
                else {
                    return null;
                }
            } else {
                rangetxt = rangetxt.split(":");
                var row = [],col = [];
                //console.log(rangetxt[0].replace(/[^0-9]/, ""), rangetxt[1].replace(/[^0-9]/, ""), rangetxt);
                row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, "")) - 1;
                row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, "")) - 1;
                if (isNaN(row[0])) {
                    row[0] = 0;
                }
                if (isNaN(row[1])) {
                    row[1] = sheetdata.length - 1;
                }
                if (row[0] > row[1]) {
                    return null;
                }
                col[0] = jfgrid.jfgridABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ""));
                col[1] = jfgrid.jfgridABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ""));
                if (isNaN(col[0])) {
                    col[0] = 0;
                }
                if (isNaN(col[1])) {
                    col[1] = sheetdata[0].length - 1;
                }
                if (col[0] > col[1]) {
                    return null;
                }
                return {
                    "row": row,
                    "column": col,
                    "sheetIndex": sheetIndex
                };
            }
        },
        rangeHightlightHTML: '<div id="jfgrid-formula-functionrange-highlight-${id}" rangeindex="${id}"  class="jfgrid-selection-highlight jfgrid-formula-functionrange-highlight"><div data-type="top" class="jfgrid-selection-copy-top jfgrid-copy"></div><div data-type="right" class="jfgrid-selection-copy-right jfgrid-copy"></div><div data-type="bottom" class="jfgrid-selection-copy-bottom jfgrid-copy"></div><div data-type="left" class="jfgrid-selection-copy-left jfgrid-copy"></div><div class="jfgrid-selection-copy-hc"></div><div data-type="lt" class="jfgrid-selection-highlight-topleft jfgrid-highlight"></div><div data-type="rt" class="jfgrid-selection-highlight-topright jfgrid-highlight"></div><div data-type="lb" class="jfgrid-selection-highlight-bottomleft jfgrid-highlight"></div><div data-type="rb" class="jfgrid-selection-highlight-bottomright jfgrid-highlight"></div></div>',
        createRangeHightlight: function() {
            var $span = $("#jfgrid-rich-text-editor").find("span.jfgrid-formula-functionrange-cell");
            $("#jfgrid-formula-functionrange .jfgrid-formula-functionrange-highlight").remove();

            $span.each(function() {
                var rangeindex = $(this).attr("rangeindex"),
                    range = $(this).text();
                $("#jfgrid-formula-functionrange").append(jfgrid.replaceHtml(jfgrid.formula.rangeHightlightHTML, {
                    "id": rangeindex
                }));
                var cellrange = jfgrid.formula.getcellrange(range);
                var rangeid = "jfgrid-formula-functionrange-highlight-" + rangeindex;

                if (cellrange == null) {} else if (cellrange.sheetIndex == jfgrid.currentSheetIndex || (cellrange.sheetIndex == -1 && jfgrid.formula.rangetosheet == jfgrid.currentSheetIndex)) {
                    $("#" + rangeid).data("range", cellrange).find(".jfgrid-copy").css({
                        "background": jfgrid.jfcolor[rangeindex]
                    }).end().find(".jfgrid-highlight").css({
                        "background": jfgrid.jfcolor[rangeindex]
                    }).end().find(".jfgrid-selection-copy-hc").css({
                        "background": jfgrid.jfcolor[rangeindex]
                    });
                    jfgrid.seletedHighlistByindex(rangeid, cellrange.row[0], cellrange.row[1], cellrange.column[0], cellrange.column[1]);
                }
            });

            $("#jfgrid-formula-functionrange .jfgrid-formula-functionrange-highlight").show();
        },
        searchHTML: '<div id="jfgrid-formula-search-c" class="jfgrid-formula-search-c"></div>',
        helpHTML: '<div id="jfgrid-formula-help-c" class="jfgrid-formula-help-c"> <div class="jfgrid-formula-help-close" title="关闭"><i class="fa fa-times" aria-hidden="true"></i></div> <div class="jfgrid-formula-help-collapse" title="收起"><i class="fa fa-angle-up" aria-hidden="true"></i></div> <div class="jfgrid-formula-help-title"><div class="jfgrid-formula-help-title-formula"> <span class="jfgrid-arguments-help-function-name">SUM</span> <span class="jfgrid-arguments-paren">(</span> <span class="jfgrid-arguments-parameter-holder"> <span class="jfgrid-arguments-help-parameter jfgrid-arguments-help-parameter-active" dir="auto">A2:A100</span>, <span class="jfgrid-arguments-help-parameter" dir="auto">101</span> </span> <span class="jfgrid-arguments-paren">)</span> </div></div> <div class="jfgrid-formula-help-content"> <div class="jfgrid-formula-help-content-example"> <div class="jfgrid-arguments-help-section-title">示例</div> <div class="jfgrid-arguments-help-formula"> <span class="jfgrid-arguments-help-function-name">SUM</span> <span class="jfgrid-arguments-paren">(</span> <span class="jfgrid-arguments-parameter-holder"> <span class="jfgrid-arguments-help-parameter jfgrid-arguments-help-parameter-active" dir="auto">A2:A100</span>, <span class="jfgrid-arguments-help-parameter" dir="auto">101</span> </span> <span class="jfgrid-arguments-paren">)</span> </div> </div> <div class="jfgrid-formula-help-content-detail"> <div class="jfgrid-arguments-help-section"> <div class="jfgrid-arguments-help-section-title jfgrid-arguments-help-parameter-name">摘要</div> <span class="jfgrid-arguments-help-parameter-content">${detail}</span> </div> </div> <div class="jfgrid-formula-help-content-param"> ${param} </div> </div> <div class="jfgrid-formula-help-foot"></div></div>',
        getrangeseleciton: function() {
            var currSelection = window.getSelection();
            var anchor = $(currSelection.anchorNode);
            var anchorOffset = currSelection.anchorOffset;
            //console.log(anchor,anchorOffset, anchor.is("#jfgrid-functionbox-cell"), anchor.attr("id"));
            if (anchor.parent().is("span") && anchorOffset != 0) {
                var txt = $.trim(anchor.text()),
                    lasttxt = "";
                if (txt.length == 0 && anchor.parent().prev().length > 0) {
                    var ahr = anchor.parent().prev();
                    txt = $.trim(ahr.text());
                    lasttxt = txt.substr(txt.length - 1, 1);
                    return ahr;
                } else {
                    lasttxt = txt.substr(anchorOffset - 1, 1);
                    return anchor.parent();
                }
            } else if (anchor.is("#jfgrid-rich-text-editor") || anchor.is("#jfgrid-functionbox-cell")) {
                var txt = $.trim(anchor.find("span").last().text()),lasttxt;
                if (txt.length == 0 && anchor.find("span").length > 1) {
                    var ahr = anchor.find("span");
                    txt = $.trim(ahr.eq(ahr.length - 2).text());
                    return ahr;
                } else {
                    return anchor.find("span").last();
                }
            } else if (anchor.parent().is("#jfgrid-rich-text-editor") || anchor.parent().is("#jfgrid-functionbox-cell") || anchorOffset == 0) {
                if (anchorOffset == 0) {
                    anchor = anchor.parent();
                }
                if (anchor.prev().length > 0) {
                    var txt = $.trim(anchor.prev().text());
                    var lasttxt = txt.substr(txt.length - 1, 1);
                    return anchor.prev();
                }
            }
            return null;
        },
        searchFunctionPosition: function($menu, $editor, x, y, isparam) {
            var winH = $(window).height(),
                winW = $(window).width();
            var menuW = $menu.outerWidth(),
                menuH = $menu.outerHeight();
            if (isparam == null) {
                isparam = false;
            }
            var top = y,
                left = x;
            if (x + menuW > winW) {
                left = x - menuW + $editor.outerWidth();
            } else {
                left = x;
            }
            if (y + menuH > winH) {
                top = y - menuH;
            } else {
                top = y + $editor.outerHeight();
                if (!isparam) {
                    $menu.html($menu.find(".jfgrid-formula-search-item").get().reverse());
                }
            }
            if (top < 0) {
                top = 0;
            }
            if (left < 0) {
                left = 0;
            }
            $menu.css({
                "top": top,
                "left": left
            }).show();
        },
        searchFunctionCell: null,
        searchFunction: function($editer) {
            //$editer.closest(".jfgrid-formula-text-color")
            var $cell = this.getrangeseleciton();
            this.searchFunctionCell = $cell;
            if ($cell == null || $editer == null) {
                return;
            }
            var searchtxt = $cell.text().toUpperCase();
            var reg = /^[a-zA-Z]|[a-zA-Z_]+$/;
            //console.log(searchtxt, !reg.test(searchtxt), $editer);
            if (!reg.test(searchtxt)) {
                return;
            }
            var result = {
                    "f": [],
                    "s": [],
                    "t": []
                },
                result_i = 0;
            for (var i = 0; i < jfgrid.functionlist.length; i++) {
                var item = jfgrid.functionlist[i],
                    n = item.n;
                //console.log(n, searchtxt);
                if (n == searchtxt) {
                    result.f.unshift(item);
                    result_i++;
                } else if (n.substr(0, searchtxt.length) == searchtxt) {
                    result.s.unshift(item);
                    result_i++;
                } else if (n.indexOf(searchtxt) > -1) {
                    result.t.unshift(item);
                    result_i++;
                }
                if (result_i >= 10) {
                    break;
                }
            }
            //console.log(result, result_i);
            var list = result.t.concat(result.s.concat(result.f));
            if (list.length <= 0) {
                return;
            }
            var listHTML = this.searchFunctionHTML(list);
            $("#jfgrid-formula-search-c").html(listHTML).show();
            $("#jfgrid-formula-help-c").hide();
            var $c = $editer.parent(),
                offset = $c.offset();
            this.searchFunctionPosition($("#jfgrid-formula-search-c"), $c, offset.left, offset.top);
        },
        searchFunctionEnter: function($obj) {
            var functxt = $obj.data("func");
            jfgrid.formula.searchFunctionCell.text(functxt).after('<span dir="auto" class="jfgrid-formula-text-color">(</span>');
            jfgrid.formula.setCaretPosition(jfgrid.formula.searchFunctionCell.next().get(0), 0, 1);
            $("#jfgrid-formula-search-c").hide();
            this.helpFunctionExe(jfgrid.formula.searchFunctionCell.closest("div"), jfgrid.formula.searchFunctionCell.next());
        },
        searchFunctionHTML: function(list) {
            if ($("#jfgrid-formula-search-c").length == 0) {
                $("body").append(this.searchHTML);
                $("#jfgrid-formula-search-c").on("mouseover", ".jfgrid-formula-search-item", function() {
                    $("#jfgrid-formula-search-c").find(".jfgrid-formula-search-item").removeClass("jfgrid-formula-search-item-active");
                    $(this).addClass("jfgrid-formula-search-item-active");
                }).on("mouseout", ".jfgrid-formula-search-item", function() {}).on("click", ".jfgrid-formula-search-item", function() {
                    if (jfgrid.formula.searchFunctionCell == null) {
                        return;
                    }
                    jfgrid.formula.searchFunctionEnter($(this));
                });
            }
            var itemHTML = '<div data-func="${n}" class="jfgrid-formula-search-item ${class}"><div class="jfgrid-formula-search-func">${n}</div><div class="jfgrid-formula-search-detail">${a}</div></div>';
            var retHTML = "";
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                if (i == list.length - 1) {
                    retHTML += jfgrid.replaceHtml(itemHTML, {
                        "class": "jfgrid-formula-search-item-active",
                        "n": item.n,
                        "a": item.a
                    });
                } else {
                    retHTML += jfgrid.replaceHtml(itemHTML, {
                        "class": "",
                        "n": item.n,
                        "a": item.a
                    });
                }
            }
            return retHTML;
        },
        functionlistPosition: {},
        helpFunction: function($editer, funcname, paramIndex) {
            
            var $func = jfgrid.functionlist[this.functionlistPosition[$.trim(funcname).toUpperCase()]];
            //console.log();
            if ($func == null) {
                return;
            }
            $("#jfgrid-formula-help-c .jfgrid-arguments-help-function-name").html($func.n);
            $("#jfgrid-formula-help-c .jfgrid-arguments-help-parameter-content").html($func.d);
            var helpformula = '<span class="jfgrid-arguments-help-function-name">${name}</span> <span class="jfgrid-arguments-paren">(</span> <span class="jfgrid-arguments-parameter-holder"> ${param} </span> <span class="jfgrid-arguments-paren">)</span>';
            //jfgrid-arguments-help-parameter-active
            var helpformulaItem = '<span class="jfgrid-arguments-help-parameter" dir="auto">${param}</span>';
            var helpformulaArg = '<div class="jfgrid-arguments-help-section"><div class="jfgrid-arguments-help-section-title">${param}</div><span class="jfgrid-arguments-help-parameter-content">${content}</span></div>';
            //"n": "AVERAGE",
            //"t": "1",
            //"d": "返回数据集的算术平均值，对文本忽略不计。",
            //"a": "返回数据集的算术平均值",
            //"p": [{ "name": "数值1", "example": "A2:A100", "detail": "计算平均值时用到的第一个数值或范围。", "require": "m", "repeat": "n", "type": "rangenumber" },
            //    { "name": "数值2", "example": "B2:B100", "detail": "计算平均值时用到的其他数值或范围。", "require": "o", "repeat": "y", "type": "rangenumber" }
            //]
            var fht = "",
                ahf = "",
                fhcp = "";
            for (var i = 0; i < $func.p.length; i++) {
                var paramitem = $func.p[i];
                var name = paramitem.name,
                    nameli = paramitem.name;
                if (paramitem.repeat == "y") {
                    name += ", ...";
                    nameli += '<span class="jfgrid-arguments-help-argument-info">...-可重复</span>';
                }
                if (paramitem.require == "o") {
                    name = "[" + name + "]";
                    nameli += '<span class="jfgrid-arguments-help-argument-info">-[可选]</span>';
                }
                fht += '<span class="jfgrid-arguments-help-parameter" dir="auto">' + name + '</span>, ';
                ahf += '<span class="jfgrid-arguments-help-parameter" dir="auto">' + paramitem.example + '</span>, ';
                fhcp += jfgrid.replaceHtml(helpformulaArg, {
                    "param": nameli,
                    "content": paramitem.detail
                });
            }
            fht = fht.substr(0, fht.length - 2);
            ahf = ahf.substr(0, ahf.length - 2);
            $("#jfgrid-formula-help-c .jfgrid-formula-help-title .jfgrid-arguments-parameter-holder").html(fht); //介绍
            $("#jfgrid-formula-help-c .jfgrid-arguments-help-formula .jfgrid-arguments-parameter-holder").html(ahf); //示例
            $("#jfgrid-formula-help-c .jfgrid-formula-help-content-param").html(fhcp); //参数
            if(paramIndex==null){
                $("#jfgrid-formula-help-c .jfgrid-formula-help-title-formula .jfgrid-arguments-help-function-name").css("font-weight", "bold");
            }
            else{
                $("#jfgrid-formula-help-c .jfgrid-formula-help-title-formula .jfgrid-arguments-help-function-name").css("font-weight", "normal");
                var index = paramIndex >= $func.p.length ? $func.p.length - 1 : paramIndex;
                $("#jfgrid-formula-help-c .jfgrid-formula-help-title .jfgrid-arguments-parameter-holder .jfgrid-arguments-help-parameter").removeClass("jfgrid-arguments-help-parameter-active");
                $("#jfgrid-formula-help-c .jfgrid-formula-help-title .jfgrid-arguments-parameter-holder .jfgrid-arguments-help-parameter").eq(index).addClass("jfgrid-arguments-help-parameter-active");
                $("#jfgrid-formula-help-c .jfgrid-arguments-help-formula .jfgrid-arguments-parameter-holder .jfgrid-arguments-help-parameter").removeClass("jfgrid-arguments-help-parameter-active");
                $("#jfgrid-formula-help-c .jfgrid-arguments-help-formula .jfgrid-arguments-parameter-holder .jfgrid-arguments-help-parameter").eq(index).addClass("jfgrid-arguments-help-parameter-active");
                $("#jfgrid-formula-help-c .jfgrid-formula-help-content-param .jfgrid-arguments-help-section").removeClass("jfgrid-arguments-help-parameter-active");
                $("#jfgrid-formula-help-c .jfgrid-formula-help-content-param .jfgrid-arguments-help-section").eq(index).addClass("jfgrid-arguments-help-parameter-active");
            }
            var $c = $editer.parent(),
                offset = $c.offset();
            this.searchFunctionPosition($("#jfgrid-formula-help-c"), $c, offset.left, offset.top, true);
        },
        helpFunctionExe: function($editer, currSelection) {
            if ($("#jfgrid-formula-help-c").length == 0) {
                $("body").after(this.helpHTML);
                $("#jfgrid-formula-help-c .jfgrid-formula-help-close").click(function() {
                    $("#jfgrid-formula-help-c").hide();
                });
                $("#jfgrid-formula-help-c .jfgrid-formula-help-collapse").click(function() {
                    var $content = $("#jfgrid-formula-help-c .jfgrid-formula-help-content");
                    $content.slideToggle(100, function() {
                        var $c = jfgrid.formula.rangeResizeTo.parent(),
                            offset = $c.offset();
                        jfgrid.formula.searchFunctionPosition($("#jfgrid-formula-help-c"), $c, offset.left, offset.top, true);
                    });
                    if ($content.is(":hidden")) {
                        $(this).html('<i class="fa fa-angle-up" aria-hidden="true"></i>');
                    } else {
                        $(this).html('<i class="fa fa-angle-down" aria-hidden="true"></i>');
                    }
                });
                for (var i = 0; i < jfgrid.functionlist.length; i++) {
                    this.functionlistPosition[jfgrid.functionlist[i].n] = i;
                }
            }

            if(!currSelection){
                return;
            }

            var $prev = currSelection,
                funcLen = $editer.length, 
                $span = $editer.find("span"),
                currentIndex = currSelection.index(),i = currentIndex;
            if ($prev == null) {
                return;
            }
            // while ($prev.text() != "(" && $prev.text() != "=" && $prev.length > 0) {
            //     // if (i > 0 && this.iscelldata($prev.text())) {
            //     //     paramindex++;
            //     // }
            //     if (i > 0 && $prev.attr("rangeindex") != null) {
            //         paramindex++;
            //     }
            //     $prev = $prev.prev();
            //     i++;
            // }

            var funcName = null, paramindex= null;
            if($span.eq(i).is(".jfgrid-formula-text-func")){
                funcName = $span.eq(i).text();
            }
            else{
                var $cur = null, exceptIndex = [-1, -1];
                while (--i > 0) {
                    $cur = $span.eq(i);
                    if($cur.is(".jfgrid-formula-text-func")  || $.trim($cur.text()).toUpperCase() in this.functionlistPosition){
                        funcName = $cur.text();
                        paramindex = null;
                        var endstate = true;
                        for(var a=i;a<=currentIndex;a++){
                            if(!paramindex){
                                paramindex = 0;
                            }
                            if(a>=exceptIndex[0] && a<=exceptIndex[1]){
                                continue;
                            }
                            $cur = $span.eq(a);
                            if($cur.is(".jfgrid-formula-text-rpar")){
                                exceptIndex = [i , a];
                                funcName = null;
                                endstate = false;
                                break;
                            }

                            if($cur.is(".jfgrid-formula-text-comma")){
                                paramindex++;
                            }
                        }

                        if(endstate){
                            break;
                        }
                    }
                }
            }

            if(funcName==null){
                return;
            }
            
            this.helpFunction($editer, funcName, paramindex);
        },
        rangeHightlightselected: function($editer, kcode) {
            var currSelection = this.getrangeseleciton();
            $("#jfgrid-formula-search-c, #jfgrid-formula-help-c").hide();
            $("#jfgrid-formula-functionrange .jfgrid-formula-functionrange-highlight .jfgrid-selection-copy-hc").css("opacity", "0.03");
            $("#jfgrid-formula-search-c, #jfgrid-formula-help-c").hide();
            this.helpFunctionExe($editer, currSelection);
            if ($(currSelection).closest(".jfgrid-formula-functionrange-cell").length == 0) {
                this.searchFunction($editer);
                return;
            }
            var $anchorOffset = $(currSelection).closest(".jfgrid-formula-functionrange-cell");
            //if (jfgrid.formula.israngeseleciton(true)) {
            //    var searchHTML = this.searchFunction($(currSelection));
            //    $("#jfgrid-formula-search-c").html(searchHTML);
            //}
            var rangeindex = $anchorOffset.attr("rangeindex");
            var rangeid = "jfgrid-formula-functionrange-highlight-" + rangeindex;
            $("#" + rangeid).find(".jfgrid-selection-copy-hc").css({
                "opacity": "0.13"
            });
        },
        updatecell: function(r, c) {
            var $input = $("#jfgrid-rich-text-editor"),
                value = $input.text();

            if (jfgrid.formula.rangetosheet != jfgrid.currentSheetIndex) {
                jfgrid.sheetmanage.changeSheetExec(jfgrid.formula.rangetosheet);
            }

            var curv = jfgrid.flowdata[r][c];

            if(jfgrid.func_methods.isRealNull(value)){
                if(curv == null || jfgrid.func_methods.isRealNull(curv.v)){
                    this.cancelNormalSelected();
                    return;
                }
            }
            else{
                if (jfgrid.getObjType(curv) == "object" && (value == curv.f || value == curv.v || value == curv.m)) {
                    this.cancelNormalSelected();
                    return;
                } 
                else if (value == curv) {
                    this.cancelNormalSelected();
                    return;
                }
            }

            if (value.slice(0, 1) == "=" && value.length > 1) {

            }
            else if(jfgrid.getObjType(curv) == "object" && curv.ct != null && curv.ct.fa != null && curv.ct.fa != "@" && !jfgrid.func_methods.isRealNull(value)){
                delete curv.m;//更新时间m处理 ， 会实际删除单元格数据的参数（flowdata时已删除）
                if(curv.f != null){ //如果原来是公式，而更新的数据不是公式，则把公式删除
                    delete curv.f;
                    delete curv.spl; //删除单元格的sparklines的配置串
                }
            }
            
            window.jfgrid_getcelldata_cache = null;
            
            var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);

            if (jfgrid.getObjType(curv) == "object") {
                if(jfgrid.getObjType(value) == "string" && value.slice(0, 1) == "=" && value.length > 1){
                    var v = this.execfunction(value, r, c, true);

                    curv = this.execFunctionGroupData[r][c];
                    curv.f = v[2];

                    //打进单元格的sparklines的配置串， 报错需要单独处理。
                    if(v.length == 4 && v[3].type == "sparklines"){
                        delete curv.m;
                        delete curv.v;

                        var curCalv = v[3].data;

                        if(jfgrid.getObjType(curCalv) == "array" && jfgrid.getObjType(curCalv[0]) != "object"){
                            curv.v = curCalv[0];
                        }
                        else{
                            curv.spl = v[3].data;
                        }
                    }
                }
                else{
                    this.delFunctionGroup(r, c);
                    this.execFunctionGroup(r, c, value);

                    curv = this.execFunctionGroupData[r][c];

                    delete curv.f;
                    delete curv.spl;
                }

                value = curv;
            } 
            else {
                if(jfgrid.getObjType(value) == "string" && value.slice(0, 1) == "=" && value.length > 1){
                    var v = this.execfunction(value, r, c, true);

                    value = {
                        "v": v[1],
                        "f": v[2]
                    };

                    //打进单元格的sparklines的配置串， 报错需要单独处理。
                    if(v.length == 4 && v[3].type == "sparklines"){
                        var curCalv = v[3].data;

                        if(jfgrid.getObjType(curCalv) == "array" && jfgrid.getObjType(curCalv[0]) != "object"){
                            value.v = curCalv[0];
                        }
                        else{
                            value.spl = v[3].data;
                        }
                    }
                }
                else{
                    this.delFunctionGroup(r, c);
                    this.execFunctionGroup(r, c, value);
                }
            }

            jfgrid.setcellvalue(r, c, d, value);
            this.cancelNormalSelected();

            var RowlChange = false;
            if(d[r][c].tb == "2" && d[r][c].v != null){//自动换行
                var cfg = $.extend(true, {}, jfgrid.getjfgridfile()[jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex)]["config"]);
                if(cfg["rowlen"] == null){
                    cfg["rowlen"] = {};
                }

                var defaultrowlen = 19;

                var offlinecanvas = $("#jfgridTableContentF").get(0).getContext("2d");
                var fontset = jfgrid.jfgridfontformat(d[r][c]);
                offlinecanvas.font = fontset;

                var currentRowLen = defaultrowlen;
                if(cfg["rowlen"][r] != null){
                    currentRowLen = cfg["rowlen"][r];
                }

                var strValue = jfgrid.getcellvalue(r,c,d).toString();
                var tbWidth = offlinecanvas.measureText(strValue).width;
                var cellWidth = jfgrid.colLocationByIndex(c)[1] - jfgrid.colLocationByIndex(c)[0] - 8;

                if(tbWidth > cellWidth){
                    var strArr = [];//文本截断数组
                    
                    for(var strI = 1; strI <= strValue.length; strI++){
                        var strV = strValue.substring(strArr.join("").length,strI);
                        var strtextMetrics = offlinecanvas.measureText(strV).width;
                        if(strtextMetrics > cellWidth){
                            strArr.push(strValue.substring(strArr.join("").length, strI - 1));
                            strI = strI - 2;
                        }
                        else if(strtextMetrics <= cellWidth && strI == strValue.length){
                            strArr.push(strV);
                        }
                    }

                    var oneLineTextHeight = jfgrid.menuButton.getTextSize("田", fontset)[1];
                    currentRowLen = oneLineTextHeight * strArr.length;
                }

                if(currentRowLen != defaultrowlen){
                    cfg["rowlen"][r] = currentRowLen;
                    RowlChange = true;
                }
            }
            
            if(RowlChange){
                jfgrid.jfrefreshgrid(d, [{"row": [r, r], "column": [c, c]}], cfg, null, RowlChange);
            }
            else{
                jfgrid.jfrefreshgrid(d, [{"row": [r, r], "column": [c, c]}]);
            }

            jfgridCellUpdate = [];
            this.execFunctionGroupData = null; //销毁
        },
        cancelNormalSelected: function() {
            this.canceFunctionrangeSelected();
            $("#jfgrid-formula-functionrange .jfgrid-formula-functionrange-highlight").remove();
            $("#jfgrid-input-box").removeAttr("style");
            $("#jfgrid-input-box-index").hide();
            $("#jfgrid-wa-functionbox-cancel, #jfgrid-wa-functionbox-confirm").removeClass("jfgrid-wa-calculate-active");
            jfgrid.formula.rangestart = false;
            jfgrid.formula.rangedrag_column_start = false;
            jfgrid.formula.rangedrag_row_start = false;
        },
        canceFunctionrangeSelected: function() {
            $("#jfgrid-formula-functionrange-select").hide();
            $("#jfgrid-row-count-show, #jfgrid-column-count-show").hide();
            // $("#jfgrid-cols-h-selected, #jfgrid-rows-h-selected").hide();
            $("#jfgrid-formula-search-c, #jfgrid-formula-help-c").hide();
        },
        iscellformat: function(txt) {
            var re_abc = /[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ][123456789]/;
        },
        iscelldata: function(txt) { //判断是否为单元格格式
            var val = txt.split("!"),
                rangetxt;
            if (val.length > 1) {
                rangetxt = val[1];
            } else {
                rangetxt = val[0];
            }

            // var reg_cell = /^[a-zA-Z]+[0-9]+$/g; //增加正则判断单元格为字母+数字的格式：如 A1:B3
            var reg_cell = /^(([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+))$/g; //增加正则判断单元格为字母+数字的格式：如 A1:B3
            // var reg_cellRange = /^(([a-zA-Z]+[0-9]+)|([a-zA-Z]+))$/g;//增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A
            var reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+))))$/g;//增加正则判断单元格为字母+数字或字母的格式：如 A1:B3，A:A
            if (rangetxt.indexOf(":") == -1) {
                var row = parseInt(rangetxt.replace(/[^0-9]/g, "")) - 1;
                var col = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
                
                if (!isNaN(row) && !isNaN(col) && rangetxt.toString().match(reg_cell)) {
                    return true;
                } else if (!isNaN(row)) {
                    return false;
                } else if (!isNaN(col)) {
                    return false;
                } else {
                    return false;
                }
            } 
            else {
                // reg_cellRange = /^(([a-zA-Z]+[0-9]+)|([a-zA-Z]+)|([0-9]+))$/g;
                reg_cellRange = /^(((([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+)))|((([a-zA-Z]+)|([$][a-zA-Z]+)))|((([0-9]+)|([$][0-9]+s))))$/g;

                rangetxt = rangetxt.split(":");
                var row = [],col = [];
                //console.log(rangetxt[0].replace(/[^0-9]/, ""), rangetxt[1].replace(/[^0-9]/, ""), rangetxt);
                row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, "")) - 1;
                row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, "")) - 1;
                if (row[0] > row[1]) {
                    return false;
                }
                col[0] = jfgrid.jfgridABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ""));
                col[1] = jfgrid.jfgridABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ""));
                if (col[0] > col[1]) {
                    return false;
                }
                if(rangetxt[0].toString().match(reg_cellRange) && rangetxt[1].toString().match(reg_cellRange)){
                    return true;
                }else{
                    return false;
                }
            }
        },
        operator: '==|!=|<>|<=|>=|=|+|-|>|<|/|*|%|&|^',
        operatorjson: null,
        functionCopy: function(txt, mode, step) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};

                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }

                jfgrid.formula.operatorjson = op;
            }

            if (mode == null) {
                mode = "down";
            }

            if (step == null) {
                step = 1;
            }

            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }

            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "",
                ispassby = true;
            
            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0
            };

            while (i < funcstack.length) {
                var s = funcstack[i];

                if (s == "(" && matchConfig.dquote == 0) {
                    matchConfig.bracket += 1;

                    if (str.length > 0) {
                        function_str += str + "(";
                    } 
                    else {
                        function_str += "(";
                    }

                    str = "";
                } 
                else if (s == ")" && matchConfig.dquote == 0) {
                    matchConfig.bracket -= 1;
                    //if (matchConfig.bracket == 0) {
                    function_str += jfgrid.formula.functionCopy(str, mode, step) + ")";
                    str = "";
                    //}
                }
                //else if (s == "'" && matchConfig.dquote == 0) {
                //    if (matchConfig.squote > 0) {
                //        function_str += str + "'";
                //        matchConfig.squote -= 1;
                //        str = "";
                //    }
                //    else {
                //        matchConfig.squote += 1;
                //        str += "'";
                //    }
                //}
                else if (s == '"' && matchConfig.squote == 0) {
                    if (matchConfig.dquote > 0) {
                        function_str += str + '"';
                        matchConfig.dquote -= 1;
                        str = "";
                    } 
                    else {
                        matchConfig.dquote += 1;
                        str += '"';
                    }
                } 
                else if (s == ',' && matchConfig.dquote == 0) {
                    //matchConfig.comma += 1;
                    function_str += jfgrid.formula.functionCopy(str, mode, step) + ',';
                    str = "";
                } 
                else if (s == '&' && matchConfig.dquote == 0) {
                    if (str.length > 0) {
                        function_str += jfgrid.formula.functionCopy(str, mode, step) + "&";
                        str = "";
                    } 
                    else {
                        function_str += "&";
                    }
                } 
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0) {
                    var s_next = "";

                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    var p = i-1, s_pre = null;;
                    if(p>=0){
                        do {
                            s_pre = funcstack[p--];
                        }
                        while (p>=0 && s_pre ==" ")
                    }

                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionCopy(str, mode, step) + s + s_next;
                            str = "";
                        } 
                        else {
                            function_str += s + s_next;
                        }

                        i++;
                    }
                    else if(!(/[^0-9]/.test(s_next)) && s=="-" && (s_pre=="(" || s_pre == null || s_pre == "," || s_pre == " " || s_pre in jfgrid.formula.operatorjson ) ){
                        str += s;
                    }
                    else {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionCopy(str, mode, step) + s;
                            str = "";
                        } 
                        else {
                            function_str += s;
                        }
                    }
                } 
                else {
                    str += s;
                }

                if (i == funcstack.length - 1) {
                    //function_str += str;
                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        if (mode == "down") {
                            function_str += jfgrid.formula.downparam($.trim(str), step);
                        } 
                        else if (mode == "up") {
                            function_str += jfgrid.formula.upparam($.trim(str), step);
                        } 
                        else if (mode == "left") {
                            function_str += jfgrid.formula.leftparam($.trim(str), step);
                        } 
                        else if (mode == "right") {
                            function_str += jfgrid.formula.rightparam($.trim(str), step);
                        }
                    } 
                    else {
                        function_str += $.trim(str);
                    }
                }
                
                i++;
            }

            return function_str;
        },
        isfreezonFuc: function(txt) {
            var row = txt.replace(/[^0-9]/g, "");
            var col = txt.replace(/[^A-Za-z]/g, "");
            var row$ = txt.substr(txt.indexOf(row) - 1, 1);
            var col$ = txt.substr(txt.indexOf(col) - 1, 1);
            var ret = [false, false];
            if (row$ == "$") {
                ret[0] = true;
            }
            if (col$ == "$") {
                ret[1] = true;
            }
            return ret;
        },
        setfreezonFuceExe: function(rangetxt) {
            var row = parseInt(rangetxt.replace(/[^0-9]/g, ""));
            var col = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
            var freezonFuc = this.isfreezonFuc(rangetxt);
            var $row = "$",
                $col = "$";
            if (!isNaN(row) && !isNaN(col)) {
                return $col + jfgrid.jfgridchatatABC(col) + $row + (row);
            } else if (!isNaN(row)) {
                return $row + (row);
            } else if (!isNaN(col)) {
                return $col + jfgrid.jfgridchatatABC(col);
            } else {
                return txt;
            }
        },
        setfreezonFuc: function(event) {
            var obj = this.getrangeseleciton();
            if (!this.iscelldata(obj.text())) {
                return;
            }
            var txt = obj.text(),
                pos = window.getSelection().anchorOffset;
            var val = txt.split("!"),
                rangetxt, prefix = "";
            if (val.length > 1) {
                rangetxt = val[1];
                prefix = val[0] + "!";
            } else {
                rangetxt = val[0];
            }
            var newtxt = "",
                newpos = "";
            var rangetxtIndex = rangetxt.indexOf(":");
            if (rangetxtIndex == -1) {
                //return [this.setfreezonFuceExe(rangetxt), rangetxt.length];
                newtxt = prefix + this.setfreezonFuceExe(rangetxt);
                newpos = newtxt.length;
            } else {
                rangetxt = rangetxt.split(":");
                if (pos > rangetxtIndex) {
                    var ret = prefix + rangetxt[0] + ":" + this.setfreezonFuceExe(rangetxt[1]);
                    //return [ret, ret.length];
                    newtxt = ret;
                    newpos = ret.length;
                } else {
                    var firsttxt = prefix + this.setfreezonFuceExe(rangetxt[0]);
                    var ret = firsttxt + ":" + rangetxt[1];
                    //return [ret, firsttxt.length];
                    newtxt = ret;
                    newpos = firsttxt.length;
                }
            }
            obj.text(prefix + newtxt);
            this.setCaretPosition(obj.get(0), 0, newpos);
        },
        updateparam: function(orient, txt, step) {
            var val = txt.split("!"),
                rangetxt, prefix = "";
            
            if (val.length > 1) {
                rangetxt = val[1];
                prefix = val[0] + "!";
            } 
            else {
                rangetxt = val[0];
            }

            if (rangetxt.indexOf(":") == -1) {
                var row = parseInt(rangetxt.replace(/[^0-9]/g, ""));
                var col = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
                var freezonFuc = this.isfreezonFuc(rangetxt);
                var $row = freezonFuc[0] ? "$" : "",
                    $col = freezonFuc[1] ? "$" : "";
                
                if (orient == "u" && !freezonFuc[0]) {
                    row -= step;
                } 
                else if (orient == "r" && !freezonFuc[1]) {
                    col += step;
                } 
                else if (orient == "l" && !freezonFuc[1]) {
                    col -= step;
                } 
                else if (!freezonFuc[0]) {
                    row += step;
                }

                console.log(prefix + $col + jfgrid.jfgridchatatABC(col) + $row + (row));

                if(row[0] < 0 || col[0] < 0){
                    return jfgrid.formula.error.r;
                }
                
                if (!isNaN(row) && !isNaN(col)) {
                    return prefix + $col + jfgrid.jfgridchatatABC(col) + $row + (row);
                } 
                else if (!isNaN(row)) {
                    return prefix + $row + (row);
                } 
                else if (!isNaN(col)) {
                    return prefix + $col + jfgrid.jfgridchatatABC(col);
                } 
                else {
                    return txt;
                }
            } 
            else {
                rangetxt = rangetxt.split(":");
                var row = [],col = [];
                //console.log(rangetxt[0].replace(/[^0-9]/, ""), rangetxt[1].replace(/[^0-9]/, ""), rangetxt);
                row[0] = parseInt(rangetxt[0].replace(/[^0-9]/g, ""));
                row[1] = parseInt(rangetxt[1].replace(/[^0-9]/g, ""));
                var freezonFuc0 = this.isfreezonFuc(rangetxt[0]);
                if (row[0] > row[1]) {
                    return txt;
                }
                var freezonFuc1 = this.isfreezonFuc(rangetxt[1]);
                col[0] = jfgrid.jfgridABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ""));
                col[1] = jfgrid.jfgridABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ""));
                if (col[0] > col[1]) {
                    return txt;
                }
                var $row0 = freezonFuc0[0] ? "$" : "",
                    $col0 = freezonFuc0[1] ? "$" : "";
                var $row1 = freezonFuc1[0] ? "$" : "",
                    $col1 = freezonFuc1[1] ? "$" : "";
                
                if (orient == "u") {
                    if (!freezonFuc0[0]) {
                        row[0] -= step;
                    }

                    if (!freezonFuc1[0]) {
                        row[1] -= step;
                    }
                } 
                else if (orient == "r") {
                    if (!freezonFuc0[1]) {
                        col[0] += step;
                    }

                    if (!freezonFuc1[1]) {
                        col[1] += step;
                    }
                } 
                else if (orient == "l") {
                    //col[0] -= step;
                    //col[1] -= step;
                    if (!freezonFuc0[1]) {
                        col[0] -= step;
                    }

                    if (!freezonFuc1[1]) {
                        col[1] -= step;
                    }
                } 
                else {
                    //row[0] += step;
                    //row[1] += step;
                    if (!freezonFuc0[0]) {
                        row[0] += step;
                    }

                    if (!freezonFuc1[0]) {
                        row[1] += step;
                    }
                }

                if(row[0] < 0 || col[0] < 0){
                    return jfgrid.formula.error.r;
                }

                if (isNaN(col[0]) && isNaN(col[1])) {
                    return prefix + $row0 + (row[0]) + ":" + $row1 + (row[1]);
                } 
                else if (isNaN(row[0]) && isNaN(row[1])) {
                    return prefix + $col0 + jfgrid.jfgridchatatABC(col[0]) + ":" + $col1 + jfgrid.jfgridchatatABC(col[1]);
                } 
                else {
                    return prefix + $col0 + jfgrid.jfgridchatatABC(col[0]) + $row0 + (row[0]) + ":" + $col1 + jfgrid.jfgridchatatABC(col[1]) + $row1 + (row[1]);
                }
            }
        },
        downparam: function(txt, step) {
            return this.updateparam("d", txt, step);
        },
        upparam: function(txt, step) {
            return this.updateparam("u", txt, step);
        },
        leftparam: function(txt, step) {
            return this.updateparam("l", txt, step);
        },
        rightparam: function(txt, step) {
            return this.updateparam("r", txt, step);
        },
        functionStrChange: function(txt, type, rc, orient, stindex, step) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};

                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }

                jfgrid.formula.operatorjson = op;
            }

            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }

            var funcstack = txt.split("");
            var i = 0,
                str = "",
                function_str = "",
                ispassby = true;
            
            var matchConfig = {
                "bracket": 0, //括号
                "comma": 0, //逗号
                "squote": 0, //单引号
                "dquote": 0 //双引号
            };

            while (i < funcstack.length) {
                var s = funcstack[i];

                if (s == "(" && matchConfig.dquote == 0) {
                    matchConfig.bracket += 1;

                    if (str.length > 0) {
                        function_str += str + "(";
                    } 
                    else {
                        function_str += "(";
                    }

                    str = "";
                } 
                else if (s == ")" && matchConfig.dquote == 0) {
                    matchConfig.bracket -= 1;
                    //if (matchConfig.bracket == 0) {
                    function_str += jfgrid.formula.functionStrChange(str, type, rc, orient, stindex, step) + ")";
                    str = "";
                    //}
                }
                //else if (s == "'" && matchConfig.dquote == 0) {
                //    if (matchConfig.squote > 0) {
                //        function_str += str + "'";
                //        matchConfig.squote -= 1;
                //        str = "";
                //    }
                //    else {
                //        matchConfig.squote += 1;
                //        str += "'";
                //    }
                //}
                else if (s == '"' && matchConfig.squote == 0) {
                    if (matchConfig.dquote > 0) {
                        function_str += str + '"';
                        matchConfig.dquote -= 1;
                        str = "";
                    } 
                    else {
                        matchConfig.dquote += 1;
                        str += '"';
                    }
                } 
                else if (s == ',' && matchConfig.dquote == 0) {
                    function_str += jfgrid.formula.functionStrChange(str, type, rc, orient, stindex, step) + ',';
                    str = "";
                } 
                else if (s == '&' && matchConfig.dquote == 0) {
                    if (str.length > 0) {
                        function_str += jfgrid.formula.functionStrChange(str, type, rc, orient, stindex, step) + "&";
                        str = "";
                    } 
                    else {
                        function_str += "&";
                    }
                } 
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0) {
                    var s_next = "";

                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    var p = i-1, s_pre = null;;
                    if(p>=0){
                        do {
                            s_pre = funcstack[p--];
                        }
                        while (p>=0 && s_pre ==" ")
                    }

                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionStrChange(str, type, rc, orient, stindex, step) + s + s_next;
                            str = "";
                        } 
                        else {
                            function_str += s + s_next;
                        }

                        i++;
                    }
                    else if(!(/[^0-9]/.test(s_next)) && s=="-" && (s_pre=="(" || s_pre == null || s_pre == "," || s_pre == " " || s_pre in jfgrid.formula.operatorjson ) ){
                        str += s;
                    }
                    else {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionStrChange(str, type, rc, orient, stindex, step) + s;
                            str = "";
                        } 
                        else {
                            function_str += s;
                        }
                    }
                } 
                else {
                    str += s;
                }

                if (i == funcstack.length - 1) {
                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        function_str += jfgrid.formula.functionStrChange_range($.trim(str), type, rc, orient, stindex, step);
                    } 
                    else {
                        function_str += $.trim(str);
                    }
                }
                
                i++;
            }

            return function_str;
        },
        functionStrChange_range: function(txt, type, rc, orient, stindex, step){
            var val = txt.split("!"),
                rangetxt, prefix = "";
            
            if (val.length > 1) {
                rangetxt = val[1];
                prefix = val[0] + "!";
            } 
            else {
                rangetxt = val[0];
            }

            var r1, r2, c1, c2;
            var $row0, $row1, $col0, $col1;
            if (rangetxt.indexOf(":") == -1) {
                r1 = r2 = parseInt(rangetxt.replace(/[^0-9]/g, "")) - 1;
                c1 = c2 = jfgrid.jfgridABCatNum(rangetxt.replace(/[^A-Za-z]/g, ""));
                
                var freezonFuc = this.isfreezonFuc(rangetxt);
                
                $row0 = $row1 = freezonFuc[0] ? "$" : "",
                $col0 = $col1 = freezonFuc[1] ? "$" : "";
            } 
            else {
                rangetxt = rangetxt.split(":");
                
                r1 = parseInt(rangetxt[0].replace(/[^0-9]/g, "")) - 1;
                r2 = parseInt(rangetxt[1].replace(/[^0-9]/g, "")) - 1;
                if (r1 > r2) {
                    return txt;
                }
                
                c1 = jfgrid.jfgridABCatNum(rangetxt[0].replace(/[^A-Za-z]/g, ""));
                c2 = jfgrid.jfgridABCatNum(rangetxt[1].replace(/[^A-Za-z]/g, ""));
                if (c1 > c2) {
                    return txt;
                }

                var freezonFuc0 = this.isfreezonFuc(rangetxt[0]);
                $row0 = freezonFuc0[0] ? "$" : "";
                $col0 = freezonFuc0[1] ? "$" : "";

                var freezonFuc1 = this.isfreezonFuc(rangetxt[1]);
                $row1 = freezonFuc1[0] ? "$" : "";
                $col1 = freezonFuc1[1] ? "$" : "";
            }

            if(type == "del"){
                if(rc == "row"){
                    if(r1 >= stindex && r2 <= stindex + step - 1){
                        return jfgrid.formula.error.r;
                    }
                    
                    if(r1 > stindex + step - 1){
                        r1 -= step;
                    }
                    else if(r1 >= stindex){
                        r1 = stindex;
                    }

                    if(r2 > stindex + step - 1){
                        r2 -= step;
                    }
                    else if(r2 >= stindex){
                        r2 = stindex - 1;
                    }

                    if(r1 < 0){
                        r1 = 0;
                    }

                    if(r2 < r1){
                        r2 = r1;
                    }
                }
                else if(rc == "col"){
                    if(c1 >= stindex && c2 <= stindex + step - 1){
                        return jfgrid.formula.error.r;
                    }
                    
                    if(c1 > stindex + step - 1){
                        c1 -= step;
                    }
                    else if(c1 >= stindex){
                        c1 = stindex;
                    }

                    if(c2 > stindex + step - 1){
                        c2 -= step;
                    }
                    else if(c2 >= stindex){
                        c2 = stindex - 1;
                    }

                    if(c1 < 0){
                        c1 = 0;
                    }

                    if(c2 < c1){
                        c2 = c1;
                    }
                }

                if(r1 == r2 && c1 == c2){
                    if (!isNaN(r1) && !isNaN(c1)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + $row0 + (r1 + 1);
                    } 
                    else if (!isNaN(r1)) {
                        return prefix + $row0 + (r1 + 1);
                    } 
                    else if (!isNaN(c1)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1);
                    } 
                    else {
                        return txt;
                    }
                }
                else{
                    if (isNaN(c1) && isNaN(c2)) {
                        return prefix + $row0 + (r1 + 1) + ":" + $row1 + (r2 + 1);
                    } 
                    else if (isNaN(r1) && isNaN(r2)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + ":" + $col1 + jfgrid.jfgridchatatABC(c2);
                    } 
                    else {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + $row0 + (r1 + 1) + ":" + $col1 + jfgrid.jfgridchatatABC(c2) + $row1 + (r2 + 1);
                    }
                }
            }
            else if(type == "add"){
                if(rc == "row"){
                    if(orient == "lefttop"){
                        if(r1 >= stindex){
                            r1 += step;
                        }
                        
                        if(r2 >= stindex){
                            r2 += step;
                        }
                    }
                    else if(orient == "rightbottom"){
                        if(r1 > stindex){
                            r1 += step;
                        }

                        if(r2 > stindex){
                            r2 += step;
                        }
                    }
                }
                else if(rc == "col"){
                    if(orient == "lefttop"){
                        if(c1 >= stindex){
                            c1 += step;
                        }
                        
                        if(c2 >= stindex){
                            c2 += step;
                        }
                    }
                    else if(orient == "rightbottom"){
                        if(c1 > stindex){
                            c1 += step;
                        }

                        if(c2 > stindex){
                            c2 += step;
                        }
                    }
                }

                if(r1 == r2 && c1 == c2){
                    if (!isNaN(r1) && !isNaN(c1)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + $row0 + (r1 + 1);
                    } 
                    else if (!isNaN(r1)) {
                        return prefix + $row0 + (r1 + 1);
                    } 
                    else if (!isNaN(c1)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1);
                    } 
                    else {
                        return txt;
                    }
                }
                else{
                    if (isNaN(c1) && isNaN(c2)) {
                        return prefix + $row0 + (r1 + 1) + ":" + $row1 + (r2 + 1);
                    } 
                    else if (isNaN(r1) && isNaN(r2)) {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + ":" + $col1 + jfgrid.jfgridchatatABC(c2);
                    } 
                    else {
                        return prefix + $col0 + jfgrid.jfgridchatatABC(c1) + $row0 + (r1 + 1) + ":" + $col1 + jfgrid.jfgridchatatABC(c2) + $row1 + (r2 + 1);
                    }
                }
            }
        },
        israngeseleciton: function(istooltip) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};

                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }

                jfgrid.formula.operatorjson = op;
            }

            if (istooltip == null) {
                istooltip = false;
            }

            var currSelection = window.getSelection();
            var anchor = $(currSelection.anchorNode);
            var anchorOffset = currSelection.anchorOffset;

            if (anchor.parent().is("span") && anchorOffset != 0) {
                var txt = $.trim(anchor.text()),
                    lasttxt = "";

                if (txt.length == 0 && anchor.parent().prev().length > 0) {
                    var ahr = anchor.parent().prev();
                    txt = $.trim(ahr.text());
                    lasttxt = txt.substr(txt.length - 1, 1);
                    this.rangeSetValueTo = ahr;
                } 
                else {
                    lasttxt = txt.substr(anchorOffset - 1, 1);
                    this.rangeSetValueTo = anchor.parent();
                }

                if ((istooltip && (lasttxt == "(" || lasttxt == ",")) || (!istooltip && (lasttxt == "(" || lasttxt == "," || lasttxt == "=" || lasttxt in jfgrid.formula.operatorjson || lasttxt == "&"))) {
                    return true;
                }
            } 
            else if (anchor.is("#jfgrid-rich-text-editor") || anchor.is("#jfgrid-functionbox-cell")) {
                var txt = $.trim(anchor.find("span").last().text()),
                    lasttxt;

                this.rangeSetValueTo = anchor.find("span").last();

                if (txt.length == 0 && anchor.find("span").length > 1) {
                    var ahr = anchor.find("span");
                    txt = $.trim(ahr.eq(ahr.length - 2).text());
                    this.rangeSetValueTo = ahr;
                }

                lasttxt = txt.substr(txt.length - 1, 1);

                if ((istooltip && (lasttxt == "(" || lasttxt == ",")) || (!istooltip && (lasttxt == "(" || lasttxt == "," || lasttxt == "=" || lasttxt in jfgrid.formula.operatorjson || lasttxt == "&"))) {
                    return true;
                }
            } 
            else if (anchor.parent().is("#jfgrid-rich-text-editor") || anchor.parent().is("#jfgrid-functionbox-cell") || anchorOffset == 0) {
                if (anchorOffset == 0) {
                    anchor = anchor.parent();
                }

                if (anchor.prev().length > 0) {
                    var txt = $.trim(anchor.prev().text());
                    var lasttxt = txt.substr(txt.length - 1, 1);

                    this.rangeSetValueTo = anchor.prev();

                    if ((istooltip && (lasttxt == "(" || lasttxt == ",")) || (!istooltip && (lasttxt == "(" || lasttxt == "," || lasttxt == "=" || lasttxt in jfgrid.formula.operatorjson || lasttxt == "&"))) {
                        return true;
                    }
                }
            }

            return false;
        },
        rangechangeindex: null,
        rangestart: false,
        rangetosheet: null,
        rangeSetValueTo: null,
        func_selectedrange: {}, //函数选区范围
        rangeSetValue: function(selected, obj) {
            var range = jfgrid.sheetmanage.getRangetxt(jfgrid.currentSheetIndex, selected, this.rangetosheet);
            var $editor;

            if (jfgrid.formula.rangestart || jfgrid.formula.rangedrag_column_start || jfgrid.formula.rangedrag_row_start) {
                if($("#jfgrid-search-formula-parm").is(":visible")||$("#jfgrid-search-formula-parm-select").is(":visible")){
                    //公式参数框选取范围
                    $editor=$("#jfgrid-rich-text-editor");
                    $("#jfgrid-search-formula-parm-select-input").val(range);
                    $("#jfgrid-search-formula-parm .parmBox").eq(jfgrid.formula.data_parm_index).find(".txt input").val(range);
                    //参数对应值显示
                    var txtdata=window.jfgrid_getcelldata(range).data;
                    if(txtdata instanceof Array){
                        //参数为多个单元格选区
                        var txtArr=[];
                        for(var i=0;i<txtdata.length;i++){
                            for(var j=0;j<txtdata[i].length;j++){
                                if(txtdata[i][j]==null){
                                    txtArr.push(null);
                                }
                                else{
                                    txtArr.push(txtdata[i][j].v);
                                }
                            }
                        }
                        $("#jfgrid-search-formula-parm .parmBox").eq(jfgrid.formula.data_parm_index).find(".val").text(" = {"+txtArr.join(",")+"}");
                    }
                    else{
                        //参数为单个单元格选区
                        $("#jfgrid-search-formula-parm .parmBox").eq(jfgrid.formula.data_parm_index).find(".val").text(" = {"+txtdata.v+"}");
                    }
                    //计算结果显示
                    var isVal=true; //参数不为空
                    var parmValArr=[]; //参数值集合
                    var lvi=-1; //最后一个有值的参数索引
                    $("#jfgrid-search-formula-parm .parmBox").each(function(i,e){
                        var parmtxt=$(e).find(".txt input").val();
                        if(parmtxt==""&&$(e).find(".txt input").attr("data_parm_require")=="m"){
                            isVal=false;
                        }
                        if(parmtxt!=""){
                            lvi=i;
                        }
                    })
                    //单元格显示
                    if(lvi==-1){
                        var functionHtmlTxt="="+$("#jfgrid-search-formula-parm .jfgrid-modal-dialog-title-text").text()+"()"; 
                    }
                    else if(lvi==0){
                        var functionHtmlTxt="="+$("#jfgrid-search-formula-parm .jfgrid-modal-dialog-title-text").text()+"("+$("#jfgrid-search-formula-parm .parmBox").eq(0).find(".txt input").val()+")"; 
                    }
                    else{
                        for(var j=0;j<=lvi;j++){
                            parmValArr.push($("#jfgrid-search-formula-parm .parmBox").eq(j).find(".txt input").val());
                        }
                        var functionHtmlTxt="="+$("#jfgrid-search-formula-parm .jfgrid-modal-dialog-title-text").text()+"("+parmValArr.join(",")+")";    
                    }
                    var function_str=jfgrid.formula.functionHTMLGenerate(functionHtmlTxt);
                    $("#jfgrid-rich-text-editor").html(function_str);
                    $("#jfgrid-functionbox-cell").html($("#jfgrid-rich-text-editor").html());
                    if(isVal==true){
                        //公式计算
                        var fp = $.trim(jfgrid.formula.functionParser($("#jfgrid-rich-text-editor").text()));
                        var result = eval(fp);
                        $("#jfgrid-search-formula-parm .result span").text(result);
                    }
                }
                else{
                    var currSelection = window.getSelection();
                    var anchorOffset = currSelection.anchorNode;
                    $editor = $(anchorOffset).closest("div");

                    var $span = $editor.find("span[rangeindex='" + this.rangechangeindex + "']").html(range);

                    jfgrid.formula.setCaretPosition($span.get(0), 0, range.length);
                }
            } 
            else {
                var function_str = '<span class="jfgrid-formula-functionrange-cell" rangeindex="' + this.functionHTMLIndex + '" dir="auto" style="color:' + jfgrid.jfcolor[this.functionHTMLIndex] + ';">' + range + '</span>';
                var $t = $(function_str).insertAfter(this.rangeSetValueTo);
                this.rangechangeindex = this.functionHTMLIndex;
                $editor = $(this.rangeSetValueTo).closest("div");

                jfgrid.formula.setCaretPosition($editor.find("span[rangeindex='" + jfgrid.formula.rangechangeindex + "']").get(0), 0, range.length);

                this.functionHTMLIndex++;
            }

            if ($editor.attr("id") == "jfgrid-rich-text-editor") {
                $("#jfgrid-functionbox-cell").html($("#jfgrid-rich-text-editor").html());
            } else {
                $("#jfgrid-rich-text-editor").html($("#jfgrid-functionbox-cell").html());
            }
        },
        rangedrag: function(event) {
            var mouse = jfgrid.mouseposition(event.pageX, event.pageY);

            var x = mouse[0] + $("#jfgrid-cell-main").scrollLeft();
            var y = mouse[1] + $("#jfgrid-cell-main").scrollTop();
            // var x = mouse[0] + $("#jfgrid-scrollbar-x").scrollLeft();
            // var y = mouse[1] + $("#jfgrid-scrollbar-y").scrollTop();

            // console.log($("#jfgrid-cell-main").scrollTop(), $("#jfgrid-scrollbar-y").scrollTop());
            
            var rowLocation = jfgrid.rowLocation(y),
                row = rowLocation[1],
                row_pre = rowLocation[0],
                row_index = rowLocation[2];

            var colLocation = jfgrid.colLocation(x),
                col = colLocation[1],
                col_pre = colLocation[0],
                col_index = colLocation[2];

            var top = 0,
                height = 0,
                rowseleted = [];

            if (this.func_selectedrange.top > row_pre) {
                top = row_pre;
                height = this.func_selectedrange.top + this.func_selectedrange.height - row_pre;
                rowseleted = [row_index, this.func_selectedrange.row[1]];
            } 
            else if (this.func_selectedrange.top == row_pre) {
                top = row_pre;
                height = this.func_selectedrange.top + this.func_selectedrange.height - row_pre;
                rowseleted = [row_index, this.func_selectedrange.row[0]];
            } 
            else {
                top = this.func_selectedrange.top;
                height = row - this.func_selectedrange.top - 1;
                rowseleted = [this.func_selectedrange.row[0], row_index];
            }

            var left = 0,
                width = 0,
                columnseleted = [];

            if (this.func_selectedrange.left > col_pre) {
                left = col_pre;
                width = this.func_selectedrange.left + this.func_selectedrange.width - col_pre;
                columnseleted = [col_index, this.func_selectedrange.column[1]];
            } 
            else if (this.func_selectedrange.left == col_pre) {
                left = col_pre;
                width = this.func_selectedrange.left + this.func_selectedrange.width - col_pre;
                columnseleted = [col_index, this.func_selectedrange.column[0]];
            } 
            else {
                left = this.func_selectedrange.left;
                width = col - this.func_selectedrange.left - 1;
                columnseleted = [this.func_selectedrange.column[0], col_index];
            }

            rowseleted[0] = jfgrid.freezen.changeFreezenIndex(rowseleted[0], "h");
            rowseleted[1] = jfgrid.freezen.changeFreezenIndex(rowseleted[1], "h");
            columnseleted[0] = jfgrid.freezen.changeFreezenIndex(columnseleted[0], "v");
            columnseleted[1] = jfgrid.freezen.changeFreezenIndex(columnseleted[1], "v");

            var changeparam = jfgrid.menuButton.mergeMoveMain(columnseleted, rowseleted, this.func_selectedrange, top , height, left , width);
            if(changeparam != null){
                columnseleted = changeparam[0];
                rowseleted= changeparam[1];
                top = changeparam[2];
                height = changeparam[3];
                left = changeparam[4];
                width = changeparam[5];
            }

            this.func_selectedrange["row"] = rowseleted;
            this.func_selectedrange["column"] = columnseleted;

            this.func_selectedrange["left_move"] = left;
            this.func_selectedrange["width_move"] = width;
            this.func_selectedrange["top_move"] = top;
            this.func_selectedrange["height_move"] = height;

            jfgrid.jfgrid_count_show(left, top, width, height, rowseleted, columnseleted);

            $("#jfgrid-formula-functionrange-select").css({
                "left": left,
                "width": width,
                "top": top,
                "height": height
            }).show();

            if($("#jfgrid-ifFormulaGenerator-multiRange-dialog").is(":visible")){
                //if公式生成器 选择范围
                var range = jfgrid.sheetmanage.getRangetxt(jfgrid.currentSheetIndex, { "row": rowseleted, "column": columnseleted }, jfgrid.currentSheetIndex);
                $("#jfgrid-ifFormulaGenerator-multiRange-dialog input").val(range);
            }
            else{
                this.rangeSetValue({
                    "row": rowseleted,
                    "column": columnseleted
                }); 
            }
            
            setTimeout(function() {
                jfgridautoadjustmousedown = 1;
            }, 1);

            jfgrid.freezen.scrollFreezen(rowseleted, columnseleted);
        },
        rangedrag_column_start: false,
        rangedrag_row_start: false,
        rangedrag_column: function(event) {
            var mouse = jfgrid.mouseposition(event.pageX, event.pageY);

            var x = mouse[0] + $("#jfgrid-cell-main").scrollLeft();
            var y = mouse[1] + $("#jfgrid-cell-main").scrollTop();
            // var x = mouse[0] + $("#jfgrid-scrollbar-x").scrollLeft();
            // var y = mouse[1] + $("#jfgrid-scrollbar-y").scrollTop();
            
            var visibledatarow = jfgrid.getvisibledatarow();
            //var rowLocation = jfgrid.rowLocation(y), row = rowLocation[1], row_pre = rowLocation[0], row_index = rowLocation[2];
            var row_index = visibledatarow.length - 1,
                row = visibledatarow[row_index],
                row_pre = 0;

            var colLocation = jfgrid.colLocation(x),
                col = colLocation[1],
                col_pre = colLocation[0],
                col_index = colLocation[2];

            var left = 0,
                width = 0,
                columnseleted = [];

            if (this.func_selectedrange.left > col_pre) {
                left = col_pre;
                width = this.func_selectedrange.left + this.func_selectedrange.width - col_pre;
                columnseleted = [col_index, this.func_selectedrange.column[1]];
            } 
            else if (this.func_selectedrange.left == col_pre) {
                left = col_pre;
                width = this.func_selectedrange.left + this.func_selectedrange.width - col_pre;
                columnseleted = [col_index, this.func_selectedrange.column[0]];
            } 
            else {
                left = this.func_selectedrange.left;
                width = col - this.func_selectedrange.left - 1;
                columnseleted = [this.func_selectedrange.column[0], col_index];
            }

            //rowseleted[0] = jfgrid.freezen.changeFreezenIndex(rowseleted[0], "h");
            //rowseleted[1] = jfgrid.freezen.changeFreezenIndex(rowseleted[1], "h");
            columnseleted[0] = jfgrid.freezen.changeFreezenIndex(columnseleted[0], "v");
            columnseleted[1] = jfgrid.freezen.changeFreezenIndex(columnseleted[1], "v");

            var changeparam = jfgrid.menuButton.mergeMoveMain(columnseleted, [0, row_index], this.func_selectedrange, row_pre , row - row_pre - 1, left , width);
            if(changeparam != null){
                columnseleted = changeparam[0];
                // rowseleted= changeparam[1];
                // top = changeparam[2];
                // height = changeparam[3];
                left = changeparam[4];
                width = changeparam[5];
            }

            this.func_selectedrange["column"] = columnseleted;

            this.func_selectedrange["left_move"] = left;
            this.func_selectedrange["width_move"] = width;

            jfgrid.jfgrid_count_show(left, row_pre, width, row - row_pre - 1, [0, row_index], columnseleted);

            this.rangeSetValue({
                "row": [null, null],
                "column": columnseleted
            });

            $("#jfgrid-formula-functionrange-select").css({
                "left": left,
                "width": width,
                "top": row_pre,
                "height": row - row_pre - 1
            }).show();
            
            setTimeout(function() {
                jfgridautoadjustmousedown = 1;
            }, 1);
            jfgrid.freezen.scrollFreezen([0, row_index], columnseleted);
        },
        rangedrag_row: function(event) {
            var mouse = jfgrid.mouseposition(event.pageX, event.pageY);

            var x = mouse[0] + $("#jfgrid-cell-main").scrollLeft();
            var y = mouse[1] + $("#jfgrid-cell-main").scrollTop();
            // var x = mouse[0] + $("#jfgrid-scrollbar-x").scrollLeft();
            // var y = mouse[1] + $("#jfgrid-scrollbar-y").scrollTop();

            var rowLocation = jfgrid.rowLocation(y),
                row = rowLocation[1],
                row_pre = rowLocation[0],
                row_index = rowLocation[2];

            var visibledatacolumn = jfgrid.getvisibledatacolumn();
            //var colLocation = jfgrid.colLocation(x), col = colLocation[1], col_pre = colLocation[0], col_index = colLocation[2];
            var col_index = visibledatacolumn.length - 1,
                col = visibledatacolumn[col_index],
                col_pre = 0;
            
            var top = 0,
                height = 0,
                rowseleted = [];

            if (this.func_selectedrange.top > row_pre) {
                top = row_pre;
                height = this.func_selectedrange.top + this.func_selectedrange.height - row_pre;
                rowseleted = [row_index, this.func_selectedrange.row[1]];
            } 
            else if (this.func_selectedrange.top == row_pre) {
                top = row_pre;
                height = this.func_selectedrange.top + this.func_selectedrange.height - row_pre;
                rowseleted = [row_index, this.func_selectedrange.row[0]];
            } 
            else {
                top = this.func_selectedrange.top;
                height = row - this.func_selectedrange.top - 1;
                rowseleted = [this.func_selectedrange.row[0], row_index];
            }

            rowseleted[0] = jfgrid.freezen.changeFreezenIndex(rowseleted[0], "h");
            rowseleted[1] = jfgrid.freezen.changeFreezenIndex(rowseleted[1], "h");
            // columnseleted[0] = jfgrid.freezen.changeFreezenIndex(columnseleted[0], "v");
            // columnseleted[1] = jfgrid.freezen.changeFreezenIndex(columnseleted[1], "v");

            var changeparam = jfgrid.menuButton.mergeMoveMain([0, col_index], rowseleted, this.func_selectedrange, top, height, col_pre, col - col_pre - 1);
            if(changeparam != null){
                // columnseleted = changeparam[0];
                rowseleted= changeparam[1];
                top = changeparam[2];
                height = changeparam[3];
                // left = changeparam[4];
                // width = changeparam[5];
            }

            this.func_selectedrange["row"] = rowseleted;

            this.func_selectedrange["top_move"] = top;
            this.func_selectedrange["height_move"] = height;

            jfgrid.jfgrid_count_show(col_pre, top, col - col_pre - 1, height, rowseleted, [0, col_index]);

            this.rangeSetValue({
                "row": rowseleted,
                "column": [null, null]
            });

            $("#jfgrid-formula-functionrange-select").css({
                "left": col_pre,
                "width": col - col_pre - 1,
                "top": top,
                "height": height
            }).show();
            
            setTimeout(function() {
                jfgridautoadjustmousedown = 1;
            }, 1);

            jfgrid.freezen.scrollFreezen(rowseleted, [0, col_index]);
        },
        rangedragged: function() {},
        rangeResizeObj: null,
        rangeResize: null,
        rangeResizeIndex: null,
        rangeResizexy: null,
        rangeResizeWinH: null,
        rangeResizeWinW: null,
        rangeResizeTo: null,
        rangeResizeDraging: function(event, jfgridCurrentChartResizeObj, jfgridCurrentChartResizeXy, jfgridCurrentChartResize, jfgridCurrentChartResizeWinW, jfgridCurrentChartResizeWinH, ch_width, rh_height) {
            var scrollTop = $("#jfgrid-scrollbar-y").scrollTop(),
                scrollLeft = $("#jfgrid-scrollbar-x").scrollLeft();
            var mouse = jfgrid.mouseposition(event.pageX, event.pageY);
            var x = mouse[0] + scrollLeft;
            var y = mouse[1] + scrollTop;
            var rowLocation = jfgrid.rowLocation(y),
                row = rowLocation[1],
                row_pre = rowLocation[0],
                row_index = rowLocation[2];
            var colLocation = jfgrid.colLocation(x),
                col = colLocation[1],
                col_pre = colLocation[0],
                col_index = colLocation[2];
            if (x < 0 || y < 0) {
                return false;
            }
            var myh = jfgridCurrentChartResizeObj.height(),
                myw = jfgridCurrentChartResizeObj.width();
            var topchange = row_pre - jfgridCurrentChartResizeXy[1],
                leftchange = col_pre - jfgridCurrentChartResizeXy[0];
            var top = jfgridCurrentChartResizeXy[5],
                height = jfgridCurrentChartResizeXy[3],
                left = jfgridCurrentChartResizeXy[4],
                width = jfgridCurrentChartResizeXy[2];
            if (jfgridCurrentChartResize == "lt" || jfgridCurrentChartResize == "lb") {
                if (jfgridCurrentChartResizeXy[0] + jfgridCurrentChartResizeXy[2] < col_pre) {
                    return;
                }
                left = col_pre;
                width = jfgridCurrentChartResizeXy[2] - leftchange;
                if (left > jfgridCurrentChartResizeXy[2] + jfgridCurrentChartResizeXy[4] - col + col_pre) {
                    left = jfgridCurrentChartResizeXy[2] + jfgridCurrentChartResizeXy[4] - col + col_pre;
                    width = jfgridCurrentChartResizeXy[2] - (jfgridCurrentChartResizeXy[2] + jfgridCurrentChartResizeXy[4] - col + col_pre - jfgridCurrentChartResizeXy[0]);
                } else if (left <= 0) {
                    left = 0;
                    width = jfgridCurrentChartResizeXy[2] + jfgridCurrentChartResizeXy[0];
                }
            }
            if (jfgridCurrentChartResize == "rt" || jfgridCurrentChartResize == "rb") {
                if (jfgridCurrentChartResizeXy[6] - jfgridCurrentChartResizeXy[2] > col) {
                    return;
                }
                width = jfgridCurrentChartResizeXy[2] + col - jfgridCurrentChartResizeXy[6];
                if (width < col - col_pre - 1) {
                    width = col - col_pre - 1;
                } else if (width >= ch_width - left) {
                    width = ch_width - left;
                }
            }
            if (jfgridCurrentChartResize == "lt" || jfgridCurrentChartResize == "rt") {
                if (jfgridCurrentChartResizeXy[1] + jfgridCurrentChartResizeXy[3] < row_pre) {
                    return;
                }
                top = row_pre;
                height = jfgridCurrentChartResizeXy[3] - topchange;
                if (top > jfgridCurrentChartResizeXy[3] + jfgridCurrentChartResizeXy[5] - row + row_pre) {
                    top = jfgridCurrentChartResizeXy[3] + jfgridCurrentChartResizeXy[5] - row + row_pre;
                    height = jfgridCurrentChartResizeXy[3] - (jfgridCurrentChartResizeXy[3] + jfgridCurrentChartResizeXy[5] - row + row_pre - jfgridCurrentChartResizeXy[1]);
                } else if (top <= 0) {
                    top = 0;
                    height = jfgridCurrentChartResizeXy[3] + jfgridCurrentChartResizeXy[1];
                }
            }
            if (jfgridCurrentChartResize == "lb" || jfgridCurrentChartResize == "rb") {
                if (jfgridCurrentChartResizeXy[7] - jfgridCurrentChartResizeXy[3] > row) {
                    return;
                }
                height = jfgridCurrentChartResizeXy[3] + row - jfgridCurrentChartResizeXy[7];
                if (height < row - row_pre - 1) {
                    height = row - row_pre - 1;
                } else if (height >= rh_height - top) {
                    height = rh_height - top;
                }
            }
            var rangeindex = jfgrid.formula.rangeResizeIndex;
            var selected = {
                "top": top,
                "left": left,
                "height": height,
                "width": width
            };
            var range = this.getSelectedFromRange(selected);
            var rangetxt = jfgrid.sheetmanage.getRangetxt(jfgrid.currentSheetIndex, range, this.rangetosheet);
            var $span = jfgrid.formula.rangeResizeTo.find("span[rangeindex='" + rangeindex + "']").html(rangetxt);
            jfgrid.jfgridRangeLast(jfgrid.formula.rangeResizeTo[0]);
            jfgridCurrentChartResizeObj.css(selected).data("range", range);
        },
        getSelectedFromRange: function(obj) {
            var row_st = obj.top + 2,
                row_ed = obj.top + obj.height - 2;
            var col_st = obj.left + 2,
                col_ed = obj.left + obj.width - 2;
            var ret = {
                "row": [],
                "column": []
            };
            var rowLocation = jfgrid.rowLocation(row_st),
                row = rowLocation[1],
                row_pre = rowLocation[0],
                row_index = rowLocation[2];
            var colLocation = jfgrid.colLocation(col_st),
                col = colLocation[1],
                col_pre = colLocation[0],
                col_index = colLocation[2];
            ret.row[0] = row_index;
            ret.column[0] = col_index;
            var rowLocation = jfgrid.rowLocation(row_ed),row = rowLocation[1],row_pre = rowLocation[0],row_index = rowLocation[2];
            var colLocation = jfgrid.colLocation(col_ed),col = colLocation[1],col_pre = colLocation[0], col_index = colLocation[2];
            ret.row[1] = row_index;
            ret.column[1] = col_index;
            return ret;
        },
        rangeResizeDragged: function(event, jfgridCurrentChartResizeObj, jfgridCurrentChartResizeXy, jfgridCurrentChartResize, jfgridCurrentChartResizeWinW, jfgridCurrentChartResizeWinH) {
            jfgrid.formula.rangeResize = null;
            $("#jfgrid-formula-functionrange-highlight-" + jfgrid.formula.rangeResizeIndex).find(".jfgrid-selection-copy-hc").css("opacity", 0.03);
        },
        rangeMovexy: null,
        rangeMove: false,
        rangeMoveObj: null,
        rangeMoveIndex: null,
        rangeMoveRangedata: null,
        rangeMoveDraging: function(event, jfgrid_cell_selected_move_index, jfgird_select_save, obj, sheetBarHeight, statisticBarHeight) {
            var mouse = jfgrid.mouseposition(event.pageX, event.pageY);
            var scrollLeft = $("#jfgrid-scrollbar-x").scrollLeft();
            var scrollTop = $("#jfgrid-scrollbar-y").scrollTop();
            var x = mouse[0] + scrollLeft;
            var y = mouse[1] + scrollTop;
            var winH = $(window).height() + scrollTop - sheetBarHeight - statisticBarHeight,
                winW = $(window).width() + scrollLeft;
            var rowLocation = jfgrid.rowLocation(y),
                row = rowLocation[1],
                row_pre = rowLocation[0],
                row_index = rowLocation[2];
            var colLocation = jfgrid.colLocation(x),
                col = colLocation[1],
                col_pre = colLocation[0],
                col_index = colLocation[2];
            var row_index_original = jfgrid_cell_selected_move_index[0],
                col_index_original = jfgrid_cell_selected_move_index[1];
            var row_s = jfgird_select_save["row"][0] - row_index_original + row_index,
                row_e = jfgird_select_save["row"][1] - row_index_original + row_index;
            var col_s = jfgird_select_save["column"][0] - col_index_original + col_index,
                col_e = jfgird_select_save["column"][1] - col_index_original + col_index;
            //console.log(row_index_original, row_index,col_index_original,col_index);
            if (row_s < 0 || y < 0) {
                row_s = 0;
                row_e = jfgird_select_save["row"][1] - jfgird_select_save["row"][0];
            }
            if (col_s < 0 || x < 0) {
                col_s = 0;
                col_e = jfgird_select_save["column"][1] - jfgird_select_save["column"][0];
            }
            //console.log(row_s, row_e,col_s,col_e, x, y);
            var visibledatarow = jfgrid.getvisibledatarow();
            if (row_e >= visibledatarow[visibledatarow.length - 1] || y > winH) {
                row_s = visibledatarow.length - 1 - jfgird_select_save["row"][1] + jfgird_select_save["row"][0];
                row_e = visibledatarow.length - 1;
            }
            var visibledatacolumn = jfgrid.getvisibledatacolumn();
            if (col_e >= visibledatacolumn[visibledatacolumn.length - 1] || x > winW) {
                col_s = visibledatacolumn.length - 1 - jfgird_select_save["column"][1] + jfgird_select_save["column"][0];
                col_e = visibledatacolumn.length - 1;
            }
            //console.log(row_s, row_e,visibledatarow.length,jfgird_select_save["row"][1] - jfgird_select_save["row"][0]);
            var col_pre = col_s - 1 == -1 ? 0 : visibledatacolumn[col_s - 1],
                col = visibledatacolumn[col_e];
            var row_pre = row_s - 1 == -1 ? 0 : visibledatarow[row_s - 1],
                row = visibledatarow[row_e];
            var rangeindex = jfgrid.formula.rangeMoveIndex;
            var selected = {
                "left": col_pre,
                "width": col - col_pre - 2,
                "top": row_pre,
                "height": row - row_pre - 2,
                "display": "block"
            };
            var range = this.getSelectedFromRange(selected);
            var rangetxt = jfgrid.sheetmanage.getRangetxt(jfgrid.currentSheetIndex, range, this.rangetosheet);
            var $span = jfgrid.formula.rangeResizeTo.find("span[rangeindex='" + rangeindex + "']").html(rangetxt);
            jfgrid.jfgridRangeLast(jfgrid.formula.rangeResizeTo[0]);
            jfgrid.formula.rangeMoveRangedata = range;
            obj.css(selected);
        },
        rangeMoveDragged: function(obj) {
            jfgrid.formula.rangeMove = false;
            $("#jfgrid-formula-functionrange-highlight-" + jfgrid.formula.rangeMoveIndex).data("range", jfgrid.formula.rangeMoveRangedata).find(".jfgrid-selection-copy-hc").css("opacity", 0.03);
        },
        functionHTMLIndex: 0,
        functionRangeIndex: null,
        findrangeindex: function(v, vp) {
            var re = /<span.*?>/g;
            var v_a = v.replace(re, ""),
                vp_a = vp.replace(re, "");
            v_a = v_a.split('</span>');
            vp_a = vp_a.split('</span>');
            v_a.pop();
            vp_a.pop();
            var pfri = jfgrid.formula.functionRangeIndex;
            var i = 0;
            var spanlen = vp_a.length > v_a.length ? v_a.length : vp_a.length;

            var vplen = vp_a.length, vlen = v_a.length;
            //不增加元素输入
            if(vplen == vlen){
                var i = pfri[0];
                var p = vp_a[i], n = v_a[i];
                if(p==null){
                    if(vp_a.length<=i){
                        pfri = [vp_a.length-1, vp_a.length-1];
                    }
                    else if(v_a.length<=i){
                        pfri = [v_a.length-1, v_a.length-1];
                    }
                    return pfri;
                }
                else if(p.length == n.length){
                    //pfri[1] = pfri[1] - 1;
                    // if(pfri[1]<0){
                    //     pfri[1] = 0;
                    // }
                    if(vp_a[i+1]!=null && v_a[i+1]!=null && vp_a[i+1].length<v_a[i+1].length){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    return pfri;
                }
                else if(p.length > n.length){
                    //pfri[1] = pfri[1] - 1;
                    if(p!=null && v_a[i+1]!=null && v_a[i+1].substr(0,1) =='"' && (p.indexOf("{") >-1 || p.indexOf("}") >-1)){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    return pfri;
                }
                else if(p.length < n.length){
                    //pfri[1] = pfri[1];
                    if(pfri[1]>n.length){
                        pfri[1] = n.length;
                    }
                    return pfri;
                }
            }
            //减少元素输入
            else if(vplen > vlen){

                var i = pfri[0];
                var p = vp_a[i], n = v_a[i];
                if(n==null){
                    if(v_a[i-1].indexOf("{")>-1){
                        pfri[0] = pfri[0] -1;
                        var start = v_a[i-1].search("{");
                        pfri[1] = pfri[1] + start;
                    }
                    else{
                        pfri[0] = 0;
                        pfri[1] = 0;
                    }
                   
                }
                else if(p.length == n.length){
                    if(v_a[i+1]!=null && (v_a[i+1].substr(0,1)=='"' || v_a[i+1].substr(0,1)=='{' || v_a[i+1].substr(0,1)=='}')){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    else if(p!=null && p.length>2 && p.substr(0,1)=='"' && p.substr(p.length-1,1)=='"' ){
                        //pfri[1] = n.length-1;
                    }
                    else if(v_a[i]!=null && v_a[i]=='")'){
                        pfri[1] = 1;
                    }
                    else if(v_a[i]!=null && v_a[i]=='"}'){
                        pfri[1] = 1;
                    }
                    else if(v_a[i]!=null && v_a[i]=='{)'){
                        pfri[1] = 1;
                    }
                    else{
                        pfri[1] = n.length;
                    }
                   
                    // if(pfri[1]==0){
                    //     pfri[1] = 1;
                    // }
                    return pfri;
                }
                else if(p.length > n.length){
                    if(v_a[i+1]!=null && (v_a[i+1].substr(0,1)=='"' || v_a[i+1].substr(0,1)=='{' || v_a[i+1].substr(0,1)=='}')){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    return pfri;
                }
                else if(p.length < n.length){
                    return pfri;
                }

                // if(pfri[0]>=v_a.length-1){
                //     pfri[0] = v_a.length-1;
                //     if(pfri[0]<0){
                //         pfri[0] = 0;
                //     }
                // }
                // else{
                //     if(v_a[pfri[0]+1]!=null && v_a[pfri[0]+1].substr(0,1)=='"'){
                //         pfri[0] = pfri[0] + 1;
                //     }
                //     else if(v_a[pfri[0]]!=null && v_a[pfri[0]].substr(v_a[pfri[0]].length-1,1)=='"'){
                //         pfri[0] = pfri[0] + 1;
                //     }
                //     else{
                //         pfri[0] = pfri[0];
                //     }
                // }

                // var i = pfri[0];
                // if(v_a[i]==null){
                //     pfri[1] = 0;
                // }
                // else{
                //     if(v_a[pfri[0]].length>1 && vp_a[pfri[0]+1]==","){
                //         if(vp_a[pfri[0]]=='""'){
                //             pfri[1] = 1;
                //         }
                //         else{
                //             if(vp_a[pfri[0]].substr(vp_a[pfri[0]].length-1,1)=='"'){
                //                 pfri[1] = vp_a[pfri[0]].length-1;
                //             }
                //             else{
                //                 pfri[1] = vp_a[pfri[0]].length;
                //             }
                           
                //         }
                       
                //     }
                //     else{
                //         if(v_a[pfri[0]+1]!=null && v_a[pfri[0]+1].substr(0,1)=='"'){
                //             pfri[1] = 1;
                //         }
                //         else if(v_a[pfri[0]]!=null && v_a[pfri[0]].substr(v_a[pfri[0]].length-1,1)=='"'){
                //             pfri[1] = 1;
                //         }
                //         else{
                //             pfri[1] = v_a[i].length;
                //         }
                //     }
                   
                // }
                return pfri;
            }
            //增加元素输入
            else if(vplen < vlen){
                var i = pfri[0];
                var p = vp_a[i], n = v_a[i];
                if(p==null){
                    pfri[0] = v_a.length-1;
                    if(n!=null){
                        pfri[1] = n.length;
                    }
                    else{
                        pfri[1] = 1;
                    }
                }
                else if(p.length == n.length){
                    if(vp_a[i+1]!=null && (vp_a[i+1].substr(0,1)=='"' || vp_a[i+1].substr(0,1)=='{' || vp_a[i+1].substr(0,1)=='}') ){
                        pfri[1] = n.length;
                    }
                    else if(v_a[i+1]!=null && v_a[i+1].substr(0,1)=='"' && ( v_a[i+1].substr(0,1)=='{' || v_a[i+1].substr(0,1)=='}') ){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    // else if(n!=null && n.length>2 && n.substr(0,1)=='"' && n.substr(n.length-1,1)=='"'){
                    //     pfri[1] = n.length;
                    // }
                    else if(n!=null && n.substr(0,1)=='"' && n.substr(n.length-1,1)=='"' && p.substr(0,1)=='"' && p.substr(p.length-1,1)==')'){
                        pfri[1] = n.length;
                    }
                    else if(n!=null && n.substr(0,1)=='{' && n.substr(n.length-1,1)=='}' && p.substr(0,1)=='{' && p.substr(p.length-1,1)==')'){
                        pfri[1] = n.length;
                    }
                    // else if(p!=null && (p.indexOf("{") >-1 || p.indexOf("}") >-1)){

                    // }
                    else{
                        pfri[0] = pfri[0] + vlen - vplen;
                        if(v_a.length>vp_a.length){
                            pfri[1] = v_a[i+1].length;
                        }
                        else{
                            pfri[1] = 1;
                        }
                       
                        // pfri[0] = pfri[0] + vlen - vplen - p.length + 1;
                        // pfri[1] = p.length;
                    }
                    return pfri;
                }
                else if(p.length > n.length){
                    if(p!=null && p.substr(0,1)=='"'){
                        pfri[1] = n.length;
                    }
                    else if(v_a[i+1]!=null && /{.*?}/.test(v_a[i+1])){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = v_a[i+1].length;
                    }
                    else if(p!=null && v_a[i+1].substr(0,1) =='"' && (p.indexOf("{") >-1 || p.indexOf("}") >-1)){
                        pfri[0] = pfri[0] + 1;
                        pfri[1] = 1;
                    }
                    else if(p!=null && (p.indexOf("{") >-1 || p.indexOf("}") >-1)){

                    }
                    else{
                        pfri[0] = pfri[0] + vlen - vplen - 1;
                        pfri[1] = v_a[i-1].length;
                    }
                    return pfri;
                }
                else if(p.length < n.length){
                    return pfri;
                }

                // if(pfri[0]>=v_a.length-1 || vplen==0){
                //     pfri[0] = v_a.length-1;
                //     pfri[1] = 1;
                // }
                // else{
                //     if(v_a[pfri[0]+1]!=null && v_a[pfri[0]+1].substr(0,1)=='"'){
                //         pfri[0] = pfri[0] + 1;
                //         pfri[1] = 1;
                //     }
                //     else if(v_a[pfri[0]]!=null && v_a[pfri[0]].substr(v_a[pfri[0]].length-1,1)=='"'){
                //         pfri[0] = pfri[0];
                //         pfri[1] = v_a[pfri[0]].length;
                //     }
                //     else if(vp_a[pfri[0]+1]!=null && vp_a[pfri[0]+1].substr(0,1)=='"'){
                //         pfri[0] = pfri[0];
                //         pfri[1] = 1;
                //     }
                //     else{
                //         var cutfix = 0;
                //         //处理在sum之间输入N个','产生2个span的情况
                //         if(vp_a[pfri[0]].length>1 && v_a[pfri[0]+1]=="," && v_a[pfri[0]+2]!=null && !(v_a[pfri[0]+2] in {"(":0, ")":0}) ){
                //             cutfix = 1;
                //         }

                //         pfri[0] = pfri[0] + vlen - vplen - cutfix;
                //         pfri[1] = 1;
                //     }
                   
                // }
               
                return pfri;
            }
            return null;

            while (i < spanlen) {
                var p = vp_a[i],
                    n = v_a[i];
                //console.log(p, n, i, p.length, n.length);
                if (p.length == n.length) {
                    //return [i, jfgrid.formula.functionRangeIndex[1]];
                    var p_a = p.split("");
                    var n_a = n.split("");
                    var s = 0;
                    //console.log(p_a, n_a, JSON.stringify(pfri));
                    while (s < n_a.length) {
                        var pp = p_a[s],
                            nn = n_a[s];
                        //console.log(111111,nn,pp,i, s, JSON.stringify(pfri));
                        if (pp != nn) {
                            return [i, s + 1];
                        }
                        // else if (pp == nn && pfri != null && pfri[0] == i && pfri[1] == s + 1) {
                        //     return [i, s + 1];
                        // }
                        // else if (pp == nn && pfri != null && pfri[0] == i && pfri[1] == s + 2 && nn==",") {
                        //     return [i+1, s + 1];
                        // }
                        s++;
                    }
                } else if (p.length > n.length) {
                    var p_a = p.split("");
                    var n_a = n.split("");
                    var s = 0;
                    while (s < n_a.length) {
                        var pp = p_a[s],
                            nn = n_a[s];
                        //console.log(222222,nn,pp,i, s, JSON.stringify(pfri));
                        if (pp != nn) {
                            return [i, s];
                        }
                        // else if (pp == nn && pfri != null && pfri[0] == i && pfri[1] == s) {
                        //     return [i, s];
                        // }
                        s++;
                    }
                    return [i, n_a.length];
                } else if (p.length < n.length) {
                    var p_a = p.split("");
                    var n_a = n.split("");
                    var s = 0;
                    while (s < p_a.length) {
                        var pp = p_a[s],
                            nn = n_a[s];
                        //console.log(33333,nn,pp,i, s, JSON.stringify(pfri));
                        if (pp != nn) {
                            return [i, s + 1];
                        }
                        // else if (pp == nn && pfri != null && pfri[0] == i && pfri[1] == s + 1) {
                        //     return [i, s + 1];
                        // }
                        s++;
                    }
                    return [i, n_a.length];
                }
                i++;
            }
            return null;
        },
        setCaretPosition: function(textDom, children, pos) {
            var el = textDom;
            var range = document.createRange();
            var sel = window.getSelection();
            //console.log(el.childNodes[children], pos);
            range.setStart(el.childNodes[children], pos);
            range.collapse(true);
            sel.removeAllRanges();
            sel.addRange(range);
            el.focus();
            //if (textDom.setSelectionRange) {
            //    // IE Support
            //    textDom.focus();
            //    textDom.setSelectionRange(pos, pos);
            //} else if (textDom.createTextRange) {
            //    // Firefox support
            //    var range = textDom.createTextRange();
            //    range.collapse(true);
            //    range.moveEnd('character', pos);
            //    range.moveStart('character', pos);
            //    range.select();
            //}
        },
        functionRange: function(obj, v, vp) {
            console.log(v, vp);
            if (window.getSelection) { //ie11 10 9 ff safari
                var currSelection = window.getSelection();
                var fri = jfgrid.formula.findrangeindex(v, vp);
                //jfgrid.formula.functionRangeIndex = fri;
                //console.log(fri);
                if (fri == null) {
                    //jfgrid.formula.functionRangeIndex = currSelection.rangeCount;
                    currSelection.selectAllChildren(obj.get(0));
                    currSelection.collapseToEnd();
                } else {
                    //obj = obj.find("span")[fri[0]];
                    //currSelection.selectAllChildren(obj);
                    //currSelection.collapse(obj, fri[1]);
                    this.setCaretPosition(obj.find("span").get(fri[0]), 0, fri[1]);
                }
                //currSelection.collapse(obj,jfgrid.formula.functionRangeIndex);
            } else if (document.selection) { //ie10 9 8 7 6 5
                //var range = document.selection.createRange();//创建选择对象
                //var range = document.body.createTextRange();
                jfgrid.formula.functionRangeIndex.moveToElementText(obj); //range定位到obj
                jfgrid.formula.functionRangeIndex.collapse(false); //光标移至最后
                jfgrid.formula.functionRangeIndex.select();
            }
        },
        functionInputHanddler: function($to, $input, kcode) {
            if(jfgrid.jfgridConfigsetting.editMode){//此模式下禁用公式栏
                return;
            }

            var $functionbox = $to,
                $editer = $input;
            var value1 = $editer.html(),
                value1txt = $editer.text();
            setTimeout(function() {
                var value = $editer.text(),
                    valuetxt = value;
                if (value.length > 0 && value.substr(0, 1) == "=" && kcode != 229) {
                    value = jfgrid.formula.functionHTMLGenerate(value);
                    value1 = jfgrid.formula.functionHTMLGenerate(value1txt);

                    if (window.getSelection) { // all browsers, except IE before version 9
                        var currSelection = window.getSelection();
                        if($(currSelection.anchorNode).is("div")){
                            var editorlen = $("#jfgrid-rich-text-editor span").length;
                            jfgrid.formula.functionRangeIndex = [editorlen-1, $("#jfgrid-rich-text-editor").find("span").eq(editorlen-1).text().length];
                        }
                        else{
                            jfgrid.formula.functionRangeIndex = [$(currSelection.anchorNode).parent().index(), currSelection.anchorOffset];
                        }
                    } 
                    else { // Internet Explorer before version 9
                        var textRange = document.selection.createRange();
                        jfgrid.formula.functionRangeIndex = textRange;
                    }

                    $editer.html(value);
                    jfgrid.formula.functionRange($editer, value, value1);
                    // if (jfgrid.formula.functionRangeIndex != null) {
                    //     jfgrid.formula.functionRange($("#jfgrid-functionbox-cell"), value, value1);
                    // }
                    // else{
                    //     jfgridRangeLast($("#jfgrid-functionbox-cell")[0]);
                    // }
                    jfgrid.formula.canceFunctionrangeSelected();
                    jfgrid.formula.createRangeHightlight();
                }
                
                jfgrid.formula.rangestart = false;
                jfgrid.formula.rangedrag_column_start = false;
                jfgrid.formula.rangedrag_row_start = false;

                $functionbox.html(value);

                jfgrid.formula.rangeHightlightselected($editer, kcode);
            }, 1);
        },
        functionHTMLGenerate: function(txt) {
            if (txt.length == 0 || txt.substr(0, 1) != "=") {
                return txt;
            }
            this.functionHTMLIndex = 0;
            return '<span dir="auto" class="jfgrid-formula-text-color">=</span>' + this.functionHTML(txt);
        },
        functionHTML: function(txt) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};
                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }
                jfgrid.formula.operatorjson = op;
            }
            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }
            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "",
                ispassby = true;
            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0,
                "braces":0
            }
            while (i < funcstack.length) {
                var s = funcstack[i];
                if (s == "(" && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    matchConfig.bracket += 1;
                    if (str.length > 0) {
                        function_str += '<span dir="auto" class="jfgrid-formula-text-func">' + str + '</span><span dir="auto" class="jfgrid-formula-text-lpar">(</span>';
                    } else {
                        function_str += '<span dir="auto" class="jfgrid-formula-text-lpar">(</span>';
                    }
                    str = "";
                } else if (s == ")" && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    matchConfig.bracket -= 1;
                    //if (matchConfig.bracket == 0) {
                    function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-rpar">)</span>';
                    str = "";
                }
                // else if (s == "'" && matchConfig.dquote == 0) {
                //     if (matchConfig.squote > 0) {
                //         function_str += str + "'</span>";
                //         if(str.length>0){
                //          function_str += '<span dir="auto" class="jfgrid-formula-text-color">' + str + "<span dir='auto' class='jfgrid-formula-text-color'>'</span>";
                //      }
                //      else{
                //          function_str += "<span dir='auto' class='jfgrid-formula-text-color'>'</span>";
                //      }
                //         matchConfig.squote -= 1;
                //         str = "";
                //     }
                //     else {
                //         matchConfig.squote += 1;
                //         str += "<span dir='auto' class='jfgrid-formula-text-color'>'</span>";
                //     }
                // }
                else if(s=="{" && matchConfig.dquote == 0){
                    str += '{';
                    matchConfig.braces += 1;
                }
                else if(s=="}" && matchConfig.dquote == 0){
                    str += '}';
                    matchConfig.braces -= 1;
                }
                else if (s == '"' && matchConfig.squote == 0) {
                    if (matchConfig.dquote > 0) {
                        if (str.length > 0) {
                            function_str += str + '"</span>';
                        } else {
                            function_str += '"</span>';
                        }
                        matchConfig.dquote -= 1;
                        str = "";
                    } else {
                        matchConfig.dquote += 1;
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-string">"';
                        } else {
                            function_str += '<span dir="auto" class="jfgrid-formula-text-string">"';
                        }
                        //if (i == funcstack.length - 1) {
                        //    function_str += "</span>";
                        //}
                        str = "";
                    }
                } else if (s == ',' && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    //matchConfig.comma += 1;
                    function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-comma">,</span>';
                    str = "";
                } else if (s == '&' && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    if (str.length > 0) {
                        function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-calc">' + '&' + '</span>';;
                        str = "";
                    } else {
                        function_str += '<span dir="auto" class="jfgrid-formula-text-calc">' + '&' + '</span>';
                    }
                }
                // else if (s == " " && matchConfig.dquote == 0){
                //  if(str.indexOf("</span>") == -1 && str.length>0){
                //      function_str += str + '</span>';
                //  }
                //  str = "<span dir='auto' class='jfgrid-formula-text-color'> ";
                //  if((i+1) < funcstack.length){
                //      while((i+1)<funcstack.length){
                //          if(funcstack[i+1]==" "){
                //              str += " ";
                //              i++;
                //          }
                //          else{
                //              break;
                //          }
                //      }
                //  }
                //  function_str += str + "</span>";
                // }
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    var s_next = "";
                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    var p = i-1, s_pre = null;;
                    if(p>=0){
                        do {
                            s_pre = funcstack[p--];
                        }
                        while (p>=0 && s_pre ==" ")
                    }

                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-calc">' + s + s_next + '</span>';
                            str = "";
                        } else {
                            function_str += '<span dir="auto" class="jfgrid-formula-text-calc">' + s + s_next + '</span>';
                        }
                        i++;
                    } 
                    else if(!(/[^0-9]/.test(s_next)) && s=="-" && (s_pre=="(" || s_pre == null || s_pre == "," || s_pre == " " || s_pre in jfgrid.formula.operatorjson ) ){
                        str += s;
                    }
                    else {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.functionHTML(str) + '<span dir="auto" class="jfgrid-formula-text-calc">' + s + '</span>';
                            str = "";
                        } else {
                            function_str += '<span dir="auto" class="jfgrid-formula-text-calc">' + s + '</span>';
                        }
                    }
                } else {
                    str += s;
                }
                if (i == funcstack.length - 1) {
                    //function_str += str;
                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        function_str += '<span class="jfgrid-formula-functionrange-cell" rangeindex="' + this.functionHTMLIndex + '" dir="auto" style="color:' + jfgrid.jfcolor[this.functionHTMLIndex] + ';">' + str + '</span>';
                        this.functionHTMLIndex++;
                    } else if (matchConfig.dquote > 0) {
                        function_str += str + '</span>';
                    } else if (str.indexOf("</span>") == -1 && str.length > 0) {
                        var regx = /{.*?}/;
                        if(regx.test($.trim(str))){
                            var arraytxt = regx.exec(str)[0];
                            var arraystart = str.search(regx);
                            var alltxt = "";
                            if(arraystart>0){
                                alltxt += '<span dir="auto" class="jfgrid-formula-text-color">' + str.substr(0, arraystart) + '</span>';

                            }
                            
                            alltxt += '<span dir="auto" style="color:#959a05" class="jfgrid-formula-text-array">' + arraytxt + '</span>';

                            if(arraystart+arraytxt.length<str.length){
                                alltxt += '<span dir="auto" class="jfgrid-formula-text-color">' + str.substr(arraystart+arraytxt.length, str.length) + '</span>';
                            }

                            function_str += alltxt;
                        }
                        else{
                            function_str += '<span dir="auto" class="jfgrid-formula-text-color">' + str + '</span>';
                        }
                        // if(!isNaN(str)){
                        //     function_str += '<span dir="auto" class="jfgrid-formula-text-color">' + str + '</span>';
                        // }
                        // else{
                        //     function_str += '<span dir="auto" class="jfgrid-formula-text-color">' + str + '</span>';  
                        // }
                    }
                }
                //console.log(i, str, function_str, s);
                i++;
            }
            //console.log(function_str);
            return function_str;
        },
        getfunctionParam: function(txt) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};
                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }
                jfgrid.formula.operatorjson = op;
            }
            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }
            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "";
            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0,
                "compare":0
            }

            //bracket 0为运算符括号、1为函数括号
            var fn = null, param = [], bracket = [];

            while (i < funcstack.length) {
                var s = funcstack[i];

                if (s == "(" && matchConfig.dquote == 0) {
                    if (str.length > 0 && bracket.length==0) {
                        fn = str.toUpperCase();
                        bracket.push(1);
                        str = "";
                    }
                    else if(bracket.length==0) {

                        //function_str += "(";
                        bracket.push(0);
                        str = "";
                    }
                    else{
                        bracket.push(0);
                        str += s;
                    }
                   
                } else if (s == ")" && matchConfig.dquote == 0) {
                    var bt = bracket.pop();
                    if(bracket.length==0){
                        //function_str += jfgrid.formula.functionParser(str) + ")";
                        param.push(str);
                        str = "";
                    }
                    else{
                        str += s;
                    }
                }
                else if (s == '"') {
                    str += '"';
                    if (matchConfig.dquote > 0) {
                        matchConfig.dquote -= 1;
                        str = "";
                    } else {
                        matchConfig.dquote += 1;
                    }
                } else if (s == ',' && matchConfig.dquote == 0) {
                    if(bracket.length<=1){
                        //function_str += jfgrid.formula.functionParser(str) + ",";
                        param.push(str);
                        str = "";
                    }
                    else{
                        str += ",";
                    }
                   
                }
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0) {
                    var s_next = "";
                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    var p = i-1, s_pre = null;;
                    if(p>=0){
                        do {
                            s_pre = funcstack[p--];
                        }
                        while (p>=0 && s_pre ==" ")
                    }

                    if(!(/[^0-9]/.test(s_next)) && s=="-" && (s_pre=="(" || s_pre == null || s_pre == "," || s_pre == " " || s_pre in jfgrid.formula.operatorjson ) ){
                        if (matchConfig.dquote == 0) {
                            str += $.trim(s);
                        } else {
                            str += s;
                        }
                    }
                    else{
                        function_str= "";
                        str = "";
                    }
                    
                } else {
                    if (matchConfig.dquote == 0) {
                        str += $.trim(s);
                    } else {
                        str += s;
                    }
                }
                i++;
            }
            // console.log({"fn":fn, "param":param});
            return {"fn":fn, "param":param};
        },
        functionParser1: function(txt) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};
                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }
                jfgrid.formula.operatorjson = op;
            }
            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }
            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "",
                ispassby = true;
            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0,
                "compare":0
            }
            while (i < funcstack.length) {
                var s = funcstack[i];
                if (s == "(" && matchConfig.dquote == 0) {
                    matchConfig.bracket += 1;
                    if (str.length > 0) {
                        function_str += "jfgrid_function." + str.toUpperCase() + ".f(";
                    } else {
                        function_str += "(";
                    }
                    str = "";
                } else if (s == ")" && matchConfig.dquote == 0) {
                    matchConfig.bracket -= 1;
                    //console.log(function_str, "#####",str);
                    function_str += jfgrid.formula.functionParser(str);
                    console.log(matchConfig.compare);
                    if(matchConfig.compare == 1){
                        function_str += '))';
                        matchConfig.compare = 0;
                    }
                    else{
                        function_str += ')';
                    }
                    //console.log(function_str, "#####",str);
                    str = "";
                }
                //else if (s == "'" && matchConfig.dquote==0) {
                //  if(matchConfig.squote>0){
                //      function_str += str + "'";
                //        matchConfig.squote -= 1;
                //        str = "";
                //  }
                //  else{
                //      matchConfig.squote += 1;
                //      str += "'";
                //  }
                //}
                else if (s == '"' && matchConfig.squote == 0) {
                    if (matchConfig.dquote > 0) {
                        function_str += str + '"';
                        matchConfig.dquote -= 1;
                        str = "";
                    } else {
                        matchConfig.dquote += 1;
                        str += '"';
                    }
                } else if (s == ',' && matchConfig.dquote == 0) {
                    //matchConfig.comma += 1;
                    //console.log(function_str, "#####",str);
                    function_str += jfgrid.formula.functionParser(str);
                    if(matchConfig.compare == 1){
                        function_str += '),';
                        matchConfig.compare = 0;
                    }
                    else{
                        function_str += ',';
                    }
                    //console.log(function_str, "#####",str);
                    str = "";
                } 
                // else if (s == '&' && matchConfig.dquote == 0) {
                //     if (str.length > 0) {
                //         function_str += jfgrid.formula.functionParser(str) + "+";
                //         str = "";
                //     } else {
                //         function_str += "+";
                //     }
                // } 
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0) {
                    var s_next = "";
                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }
                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if (str.length > 0) {
                            matchConfig.compare = 1;
                            function_str += "jfgrid_compareWith(" + jfgrid.formula.functionParser(str) + ",'" + s + s_next + "', ";
                            str = "";
                        } else {
                            function_str += s + s_next;
                        }
                        i++;
                    } else {
                        if (str.length > 0) {
                            matchConfig.compare = 1;
                            function_str += "jfgrid_compareWith(" + jfgrid.formula.functionParser(str) + ",'" + s + "', ";
                            str = "";
                        } else {
                            function_str += s;
                        }
                    }
                } else {
                    str += s;
                }
                if (i == funcstack.length - 1) {
                    //function_str += str;
                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        function_str += "jfgrid_getcelldata('" + $.trim(str) + "')";
                    } else {
                        function_str += $.trim(str);
                    }
                }
                //console.log(i, str, function_str, s);
                i++;
            }
            console.log(function_str);
            return function_str;
        },
        calPostfixExpression: function(cal){
            if(cal.length == 0){
                return "";
            }

            var stack = [];
            for(var i = cal.length - 1; i >= 0; i--){
                var c = cal[i];
                if(c in jfgrid.formula.operatorjson){
                    var s2 = stack.pop();
                    var s1 = stack.pop();

                    var str = "jfgrid_compareWith(" + s1 + ",'" + c + "', " + s2 + ")";

                    stack.push(str);
                }
                else{
                    stack.push(c);
                }
            }

            if(stack.length > 0){
                return stack[0];
            }
            else{
                return "";
            }    
        },
        checkBracketNum: function(fp){
            var bra_l = fp.match(/\(/g),
                bra_r = fp.match(/\)/g),
                //bra_tl_txt = fp.match(/".*?\(.*?"/g),
                //bra_tr_txt = fp.match(/".*?\).*?"/g);

                /*new runze*/
                bra_tl_txt = fp.match(/(['"])(?:(?!\1).)*?\1/g);
                bra_tr_txt = fp.match(/(['"])(?:(?!\1).)*?\1/g);


            var bra_l_len = 0, bra_r_len = 0;
            if (bra_l != null) {
                bra_l_len += bra_l.length;
            }
            if (bra_r != null) {
                bra_r_len += bra_r.length;
            }

            var bra_tl_len = 0, bra_tr_len = 0;
            if(bra_tl_txt!=null){
                for(var i=0;i<bra_tl_txt.length;i++){
                    var bra_tl = bra_tl_txt[i].match(/\(/g);
                    if (bra_tl != null) {
                        bra_tl_len += bra_tl.length;
                    }
                }
            }

            if(bra_tr_txt!=null){
                for(var i=0;i<bra_tr_txt.length;i++){
                    var bra_tr = bra_tr_txt[i].match(/\)/g);
                    if (bra_tr != null) {
                        bra_tr_len += bra_tr.length;
                    }
                }
            }

            bra_l_len -= bra_tl_len;
            bra_r_len -= bra_tr_len;

            if(bra_l_len != bra_r_len){
                return false;
            }
            else{
                return true;
            }
        },
        operatorPriority: {
            "^": 0,
            "%": 1,
            "*": 1,
            "/": 1,
            "+": 2,
            "-": 2
        },
        functionParser: function(txt) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};
                
                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }

                jfgrid.formula.operatorjson = op;
            }

            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }

            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "";

            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0,
                "compare": 0,
                "braces": 0
            }

            //=(sum(b1:c10)+10)*5-100

            //=MAX(B1:C10,10)*5-100

            // =(sum(max(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+count(B1:C10,10*5-100))*5-100

            //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)+COUNT(B1:C10,10*5-100)

            //=SUM(MAX(B1:C10,10)*5-100,((1+1)*2+5)/2,10)

            //=SUM(10,((1+1)*2+5)/2,10)

            //=SUM(MAX(B1:C10,10)*5-100)

            //bracket 0为运算符括号、1为函数括号
            var cal1 = [], cal2 = [], bracket = [];

            while (i < funcstack.length) {
                var s = funcstack[i];

                if (s == "(" && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    if (str.length > 0 && bracket.length == 0) {
                        function_str += "jfgrid_function." + str.toUpperCase() + ".f(";
                        bracket.push(1);
                        str = "";
                    }
                    else if(bracket.length == 0) {
                        function_str += "(";
                        bracket.push(0);
                        str = "";
                    }
                    else{
                        bracket.push(0);
                        str += s;
                    }
                } 
                else if (s == ")" && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    var bt = bracket.pop();

                    if(bracket.length == 0){
                        function_str += jfgrid.formula.functionParser(str) + ")";
                        str = "";
                    }
                    else{
                        str += s;
                    }
                }
                else if(s == "{" && matchConfig.dquote == 0){
                    str += '{';
                    matchConfig.braces += 1;
                }
                else if(s == "}" && matchConfig.dquote == 0){
                    str += '}';
                    matchConfig.braces -= 1;
                }
                else if (s == '"') {
                    str += '"';
                    
                    if (matchConfig.dquote > 0) {
                        matchConfig.dquote -= 1;
                    } 
                    else {
                        matchConfig.dquote += 1;
                    }
                } 
                else if (s == ',' && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    if(bracket.length <= 1){
                        function_str += jfgrid.formula.functionParser(str) + ",";
                        str = "";
                    }
                    else{
                        str += ",";
                    }
                }
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0 && matchConfig.braces == 0) {
                    var s_next = "";
                    var op = jfgrid.formula.operatorPriority;

                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if(bracket.length == 0){
                            if($.trim(str).length > 0){
                                cal2.unshift(jfgrid.formula.functionParser($.trim(str)));
                            }
                            else if($.trim(function_str).length > 0){
                                cal2.unshift($.trim(function_str));
                            }

                            if(cal1[0] in jfgrid.formula.operatorjson){
                                var stackCeilPri = op[cal1[0]];

                                while(cal1.length > 0 && stackCeilPri != null){
                                    cal2.unshift(cal1.shift());
                                    stackCeilPri = op[cal1[0]];
                                }
                            }

                            cal1.unshift(s+s_next);
                           
                            function_str= "";
                            str = "";
                        } 
                        else {
                            str += s + s_next;
                        }

                        i++;
                    } 
                    else {
                        if(bracket.length == 0){
                            if($.trim(str).length > 0){
                                cal2.unshift(jfgrid.formula.functionParser($.trim(str)));
                            }
                            else if($.trim(function_str).length > 0){
                                cal2.unshift($.trim(function_str));
                            }

                            if(cal1[0] in jfgrid.formula.operatorjson){
                                var stackCeilPri = op[cal1[0]];
                                stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;
                                
                                var sPri = op[s];
                                sPri = sPri == null ? 1000 : sPri;

                                while(cal1.length > 0 && sPri >= stackCeilPri){
                                    cal2.unshift(cal1.shift());

                                    stackCeilPri = op[cal1[0]];
                                    stackCeilPri = stackCeilPri == null ? 1000 : stackCeilPri;
                                }
                            }

                            cal1.unshift(s);

                            function_str= "";
                            str = "";
                        }
                        else{
                            str += s;
                        }
                    }
                } 
                else {
                    if (matchConfig.dquote == 0) {
                        str += $.trim(s);
                    } 
                    else {
                        str += s;
                    }
                }

                if (i == funcstack.length - 1) {
                    var endstr = "";

                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        endstr = "jfgrid_getcelldata('" + $.trim(str) + "')";
                    } 
                    else {
                        str = $.trim(str);
                        
                        var regx = /{.*?}/;
                        if(regx.test(str) && str.substr(0, 1) != '"' && str.substr(str.length - 1, 1) != '"'){
                            var arraytxt = regx.exec(str)[0];
                            var arraystart = str.search(regx);
                            var alltxt = "";
                            
                            if(arraystart > 0){
                                endstr += str.substr(0, arraystart);

                            }
                            
                            endstr += "jfgrid_getarraydata('" + arraytxt + "')";

                            if(arraystart + arraytxt.length < str.length){
                                endstr += str.substr(arraystart + arraytxt.length, str.length);
                            }
                        }
                        else{
                            endstr = str;
                        }
                    }

                    if(endstr.length > 0){
                        cal2.unshift(endstr);
                    }

                    if(cal1.length > 0){
                        if(function_str.length > 0){
                            cal2.unshift(function_str);
                            function_str = "";
                        }
                       
                        while(cal1.length > 0){
                            cal2.unshift(cal1.shift());
                        }     
                    }
 
                    if(cal2.length > 0){
                        function_str = jfgrid.formula.calPostfixExpression(cal2);
                    }
                    else{
                        function_str += endstr;
                    }
                }

                i++;
            }

            return function_str;
        },
        addFunctionGroup: function(r, c, func, index) {
            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }
            var jfgridfile = jfgrid.getjfgridfile();
            var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(index)];
            if (file.calcChain == null) {
                file.calcChain = [];
            }
            var cc = {
                "r": r,
                "c": c,
                "index": index,
                "func": func
            };
            file.calcChain.push(cc);
            jfgrid.server.saveParam("fc", index, JSON.stringify(cc), {
                "op": "add",
                "pos": file.calcChain.length - 1
            });
            jfgrid.setjfgridfile(jfgridfile);
        },
        getFunctionGroup: function(index) {
            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }
            var jfgridfile = jfgrid.getjfgridfile();
            var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(index)];
            if (file.calcChain == null) {
                return [];
            }
            return file.calcChain;
        },
        updateFunctionGroup: function(r, c, func, index) {
            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }
            var jfgridfile = jfgrid.getjfgridfile();
            var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(index)];
            var calcChain = file.calcChain;
            if (calcChain != null) {
                for (var i = 0; i < calcChain.length; i++) {
                    var calc = calcChain[i];
                    if (calc.r == r && calc.c == c && calc.index == index) {
                        calcChain[i].func = func;
                        jfgrid.server.saveParam("fc", index, JSON.stringify(calc), {
                            "op": "update",
                            "pos": i
                        });
                        break;
                    }
                }
            }
            jfgrid.setjfgridfile(jfgridfile);
        },
        insertUpdateFunctionGroup: function(r, c, func, index) {
            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }
            if (func == null) {
                this.delFunctionGroup(r, c, index);
                return;
            }
            var jfgridfile = jfgrid.getjfgridfile();
            var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(index)];
            var calcChain = file.calcChain;
            if (calcChain == null) {
                calcChain = [];
            }
            for (var i = 0; i < calcChain.length; i++) {
                var calc = calcChain[i];
                if (calc.r == r && calc.c == c && calc.index == index) {
                    calc.func = func;
                    jfgrid.server.saveParam("fc", index, JSON.stringify(calc), {
                        "op": "update",
                        "pos": i
                    });
                    return;
                }
            }
            var cc = {
                "r": r,
                "c": c,
                "index": index,
                "func": func
            };
            calcChain.push(cc);
            file.calcChain = calcChain;
            jfgrid.server.saveParam("fc", index, JSON.stringify(cc), {
                "op": "add",
                "pos": file.calcChain.length - 1
            });
            jfgrid.setjfgridfile(jfgridfile);
        },
        isFunctionRangeSave: false,
        isFunctionRange: function(txt, r, c) {
            if (jfgrid.formula.operatorjson == null) {
                var arr = jfgrid.formula.operator.split("|"),
                    op = {};

                for (var i = 0; i < arr.length; i++) {
                    op[arr[i].toString()] = 1;
                }

                jfgrid.formula.operatorjson = op;
            }

            if (txt.substr(0, 1) == "=") {
                txt = txt.substr(1);
            }

            var funcstack = txt.split("");
            //var i=0;i<funcstack.length;i++
            var i = 0,
                str = "",
                function_str = "",
                ispassby = true;

            var matchConfig = {
                "bracket": 0,
                "comma": 0,
                "squote": 0,
                "dquote": 0
            }

            var jfgridfile = jfgrid.getjfgridfile();
            var dynamicArray_compute = jfgridfile[jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex)]["dynamicArray_compute"] == null ? {} : jfgridfile[jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex)]["dynamicArray_compute"];

            while (i < funcstack.length) {
                var s = funcstack[i];

                if (s == "(" && matchConfig.dquote == 0) {
                    matchConfig.bracket += 1;
                    if (str.length > 0) {
                        function_str += "jfgrid_function." + str.toUpperCase() + ".f(";
                    } 
                    else {
                        function_str += "(";
                    }
                    str = "";
                } 
                else if (s == ")" && matchConfig.dquote == 0) {
                    matchConfig.bracket -= 1;
                    //if (matchConfig.bracket == 0) {
                    function_str += jfgrid.formula.isFunctionRange(str, r, c) + ")";
                    str = "";
                    //}
                } 
                else if (s == ',' && matchConfig.dquote == 0) {
                    //matchConfig.comma += 1;
                    function_str += jfgrid.formula.isFunctionRange(str, r, c) + ',';
                    str = "";
                } 
                else if (s in jfgrid.formula.operatorjson && matchConfig.dquote == 0) {
                    var s_next = "";

                    if ((i + 1) < funcstack.length) {
                        s_next = funcstack[i + 1];
                    }

                    if ((s + s_next) in jfgrid.formula.operatorjson) {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.isFunctionRange(str, r, c) + s + s_next;
                            str = "";
                        } 
                        else {
                            function_str += s + s_next;
                        }
                        i++;
                    } 
                    else {
                        if (str.length > 0) {
                            function_str += jfgrid.formula.isFunctionRange(str, r, c) + s;
                            str = "";
                        } else {
                            function_str += s;
                        }
                    }
                } 
                else {
                    str += s;
                }

                if (i == funcstack.length - 1) {
                    //function_str += str;
                    if (jfgrid.formula.iscelldata($.trim(str))) {
                        //function_str += "jfgrid_getcelldata('" + $.trim(str) + "')";
                        if (r != null && c != null) {
                            var range = this.getcellrange($.trim(str));
                            var row = range.row,
                                col = range.column;

                            if((r + "_" + c) in dynamicArray_compute){
                                var isd_range = false;

                                for(var d_r = row[0]; d_r <= row[1]; d_r++){
                                    for(var d_c = col[0]; d_c <= col[1]; d_c++){
                                        if((d_r + "_" + d_c) in dynamicArray_compute && dynamicArray_compute[d_r + "_" + d_c].r == r && dynamicArray_compute[d_r + "_" + d_c].c == c){
                                            isd_range = true;
                                        }
                                    }
                                }

                                if (isd_range) {
                                    this.isFunctionRangeSave = this.isFunctionRangeSave || true;
                                } 
                                else {
                                    this.isFunctionRangeSave = this.isFunctionRangeSave || false;
                                }
                            }
                            else{
                                if (r >= row[0] && r <= row[1] && c >= col[0] && c <= col[1]) {
                                    this.isFunctionRangeSave = this.isFunctionRangeSave || true;
                                } 
                                else {
                                    this.isFunctionRangeSave = this.isFunctionRangeSave || false;
                                }
                            }
                        } 
                        else {
                            var sheetlen = $.trim(str).split("!");
                            if (sheetlen.length > 1) {
                                this.isFunctionRangeSave = this.isFunctionRangeSave || true;
                            } else {
                                this.isFunctionRangeSave = this.isFunctionRangeSave || false;
                            }
                        }
                    }
                    //else {
                    //    function_str += $.trim(str);
                    //}
                }
                i++;
            }

            return function_str;
        },
        execvertex: {},
        execFunctionGroupData: null,
        execFunctionExist: null,
        execFunctionGroup: function(origin_r, origin_c, value, index, data) {
            if (data == null) {
                data = jfgrid.flowdata;
            }
            
            this.execFunctionGroupData = $.extend(true, [], data);
            
            if (value != null) {
                //此处setcellvalue 中this.execFunctionGroupData会保存想要更新的值，本函数结尾不要设为null,以备后续函数使用
                jfgrid.setcellvalue(origin_r, origin_c, this.execFunctionGroupData, value);
            }

            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }

            //{ "r": r, "c": c, "index": index, "func": func}
            var group = this.getFunctionGroup(index),
                vertex1 = {},
                stack = [],
                count = 0;

            this.execvertex = {};
            if (this.execFunctionExist == null) {
                var jfgridfile = jfgrid.getjfgridfile();

                for (var i = 0; i < group.length; i++) {
                    var item = group[i];

                    var cell = jfgridfile[jfgrid.sheetmanage.getSheetIndex(item["index"])].data[item.r][item.c];

                    if(cell != null && cell.f != null && cell.f == item.func[2]){
                        if(!(item instanceof Object)){
                            item = eval('('+ item +')');
                        }

                        item.color = "w";
                        item.parent = null;
                        item.chidren = {};
                        item.times = 0;

                        vertex1["r" + item.r.toString() + "c" + item.c.toString()] = item;
                        this.isFunctionRangeSave = false;

                        if (origin_r != null && origin_c != null) {
                            this.isFunctionRange(item.func[2], origin_r, origin_c);
                        } 
                        else {
                            this.isFunctionRange(item.func[2]);
                        }

                        if (this.isFunctionRangeSave) {
                            stack.push(item);
                            this.execvertex["r" + item.r.toString() + "c" + item.c.toString()] = item;
                            count++;
                        }
                        //var v = jfgrid.formula.execfunction(f);
                        //value = { "v": v[1], "f": v[2] };
                        //data[item.r][item.c] = value;
                    }
                }
            } 
            else {
                for (var x = 0; x < this.execFunctionExist.length; x++) {
                    var cell = this.execFunctionExist[x];

                    if ("r" + cell.r.toString() + "c" + cell.c.toString() in vertex1) {
                        continue;
                    }

                    for (var i = 0; i < group.length; i++) {
                        var item = group[i];

                        item.color = "w";
                        item.parent = null;
                        item.chidren = {};
                        item.times = 0;

                        vertex1["r" + item.r.toString() + "c" + item.c.toString()] = item;
                        this.isFunctionRangeSave = false;
                        this.isFunctionRange(item.func[2], cell.r, cell.c);
                        
                        if (this.isFunctionRangeSave) {
                            stack.push(item);
                            this.execvertex["r" + item.r.toString() + "c" + item.c.toString()] = item;
                            count++;
                        }
                    }
                }
            }
            
            var x = 0,
                x1 = 0;

            while (stack.length > 0) {
                var u = stack.shift();

                for (var name in vertex1) {
                    if (u.r == vertex1[name].r && u.c == vertex1[name].c) {
                        continue;
                    }

                    this.isFunctionRangeSave = false;
                    //this.isFunctionRange(u.func[2], vertex1[name].r, vertex1[name].c);
                    this.isFunctionRange(vertex1[name].func[2], u.r, u.c);

                    if (this.isFunctionRangeSave) {
                        var v = vertex1[name];

                        if (!(name in this.execvertex)) {
                            stack.push(v);
                            this.execvertex[name] = v;
                        }

                        count++;
                        this.execvertex[name].chidren["r" + u.r.toString() + "c" + u.c.toString()] = 1;
                    }
                }
            }

            this.groupValuesRefreshData = [];
            var i = 0;

            while (i < count) {
                for (var name in this.execvertex) {
                    var u = this.execvertex[name];
                    if (u.color == "w") {
                        this.functionDFS(u);
                    } 
                    else if (u.color == "b") {
                        i++;
                    }
                }
            }
            //保留this.execFunctionGroupData用于传输更新结果
            //this.execFunctionGroupData = null;
            this.execFunctionExist = null;
        },
        //深度优先算法，处理多级调用函数
        functionDFS: function(u) {
            u.color = "g";
            u.times += 1;

            for (var chd in u.chidren) {
                var v = this.execvertex[chd];
                if (v.color == "w") {
                    v.parent = "r" + u.r.toString() + "c" + u.c.toString();
                    this.functionDFS(v);
                }
            }

            u.color = "b";
            window.jfgrid_getcelldata_cache = null;

            var v = jfgrid.formula.execfunction(u.func[2], u.r, u.c);

            var value = this.execFunctionGroupData[u.r][u.c];
            if(value == null){
                value = {};
            }

            value.v = v[1];
            value.f = v[2];

            if(value.spl != null){
                window.jfgridCurrentRow = u.r;
                window.jfgridCurrentColumn = u.c;
                window.jfgridCurrentFunction = this.execFunctionGroupData[u.r][u.c].f;

                var fp = $.trim(jfgrid.formula.functionParser(this.execFunctionGroupData[u.r][u.c].f));
                var sparklines = eval(fp);
                value.spl = sparklines;
            }

            this.groupValuesRefreshData.push({
                "r": u.r,
                "c": u.c,
                "v": value,
                "i": jfgrid.currentSheetIndex
            });

            this.execFunctionGroupData[u.r][u.c] = value;
        },
        groupValuesRefreshData: [],
        groupValuesRefresh: function() {
            if(this.groupValuesRefreshData.length > 0){
                for (var i = 0; i < this.groupValuesRefreshData.length; i++) {
                    var item = this.groupValuesRefreshData[i];

                    if(item.i != jfgrid.currentSheetIndex){
                        continue;
                    }

                    jfgrid.setcellvalue(item.r, item.c, jfgrid.flowdata, item.v);
                    jfgrid.server.saveParam("v", jfgrid.currentSheetIndex, item.v, {
                        "r": item.r,
                        "c": item.c
                    });
                }

                jfgrid.editor.webWorkerFlowDataCache(jfgrid.flowdata);//worker存数据
            }
        },
        delFunctionGroup: function(r, c, index) {
            if (index == null) {
                index = jfgrid.currentSheetIndex;
            }

            var jfgridfile = jfgrid.getjfgridfile();
            var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(index)];
            
            var calcChain = file.calcChain;
            if (calcChain != null) {
                for (var i = 0; i < calcChain.length; i++) {
                    var calc = calcChain[i];
                    if (calc.r == r && calc.c == c && calc.index == index) {
                        calcChain.splice(i, 1);
                        jfgrid.server.saveParam("fc", index, null, {
                            "op": "del",
                            "pos": i
                        });
                        break;
                    }
                }
            }

            jfgrid.setjfgridfile(jfgridfile);
        },
        execfunction1: function(txt, r, c, isrefresh) {
            var fp = $.trim(this.functionParser(txt));
            var funcf = fp.match(/jfgrid_function/g),
                funcg = fp.match(/jfgrid_getcelldata/g),
                funcc = fp.match(/jfgrid_compareWith/g),
                funclen = 0;

            if (isrefresh == null) {
                isrefresh = false;
            }

            if (funcf != null) {
                funclen += funcf.length;
            }

            if (funcg != null) {
                funclen += funcg.length;
            }

            if (funcc != null) {
                funclen += funcc.length;
            }

            var quota1 = fp.match(/\(/g),
                quota2 = fp.match(/\)/g),
                quotalen = 0;

            if (quota1 != null) {
                quotalen += quota1.length;
            }

            if (quota2 != null) {
                quotalen += quota2.length;
            }
            //var funclen = fp.match(/jfgrid_function/g).length + fp.match(/jfgrid_getcelldata/g).length;
            //var quotalen = fp.match(/\(/g).length + fp.match(/\)/g).length;
            //if(fp.substr(0, 16)=="jfgrid_function." && (fp.substr(fp.length-1, 1)!=")" || funclen!=quotalen/2 )  ){
            //console.log("fp.substr(0, 18)",fp.substr(0, 18));
            if ((fp.substr(0, 16) == "jfgrid_function." || fp.substr(0, 18) == "jfgrid_compareWith") && funclen != quotalen / 2) {
                fp += ")";
                if(fp.substr(0, 16) == "jfgrid_function."){
                    txt += ")";
                }
                this.functionHTMLIndex = 0;
                $("#jfgrid-functionbox-cell").html('<span dir="auto" class="jfgrid-formula-text-color">=</span>' + this.functionHTML(txt));
            }

            if (!this.testFunction(txt, fp)) {
                jfgrid.tooltip.info("提示", "公式存在错误");
                return [false, this.error.n, txt];
            }

            var result = null;
            window.jfgridCurrentRow = r;
            window.jfgridCurrentColumn = c;
            window.jfgridCurrentFunction = txt;

            try {
                result = eval(fp);
            } 
            catch (e) {
                var err = e;
                //err错误提示处理
                console.log(e);
                err = jfgrid.formula.errorInfo(err);
                result = [jfgrid.formula.error.n, err];
            }

            if (result instanceof Array) {
                result = result[0];
                //错误处理
            }
            else if(result instanceof Object){
                result = result.data;
                if (result instanceof Array) {
                    result = result[0];
                }
            }

            window.jfgridCurrentRow = null;
            window.jfgridCurrentColumn = null;
            window.jfgridCurrentFunction = null;

            if (fp.substr(0, 19) == "jfgrid_getcelldata(") {
                if (result instanceof Array) {
                    result = result.join(",");
                } 
                else if (result instanceof Object) {
                    result = result.v;
                }
            }

            if (r != null && c != null) {
                //jfgrid.flowdata[r][c] = result;
                if (isrefresh) {
                    this.execFunctionGroup(r, c, result);
                }
                this.insertUpdateFunctionGroup(r, c, [true, result, txt]);
            }

            return [true, result, txt];
        },
        execfunction: function(txt, r, c, isrefresh, notInsertFunc) {
            if(txt.indexOf(this.error.r) > -1){
                return [false, this.error.r, txt];
            }

            if (!this.checkBracketNum(txt)) {
                txt += ")";
            }

            var fp = $.trim(this.functionParser(txt));
            
            if ((fp.substr(0, 16) == "jfgrid_function." || fp.substr(0, 18) == "jfgrid_compareWith") ) {
                this.functionHTMLIndex = 0;
                // $("#jfgrid-functionbox-cell").html('<span dir="auto" class="jfgrid-formula-text-color">=</span>' + this.functionHTML(txt));
            }

            if (!this.testFunction(txt, fp) || fp == "") {
                jfgrid.tooltip.info("提示", "公式存在错误");
                return [false, this.error.n, txt];
            }

            var result = null;
            window.jfgridCurrentRow = r;
            window.jfgridCurrentColumn = c;
            window.jfgridCurrentFunction = txt;

            var sparklines = null;

            try {
                if(fp.indexOf("jfgrid_getcelldata") > -1){
                    var funcg = fp.split("jfgrid_getcelldata('");

                    for(var i = 1; i < funcg.length; i++){
                        var funcgStr = funcg[i].split("')")[0];
                        var funcgRange = jfgrid.formula.getcellrange(funcgStr);

                        if(funcgRange.row[0] < 0 || funcgRange.column[0] < 0){
                            return [true, jfgrid.formula.error.r, txt];
                        }

                        if(funcgRange.sheetIndex == jfgrid.currentSheetIndex && r >= funcgRange.row[0] && r <= funcgRange.row[1] && c >= funcgRange.column[0] && c <= funcgRange.column[1]){
                            if(jfgrid.jfgridConfigsetting.editMode){
                                alert("公式不可引用其本身的单元格");
                            }
                            else{
                                jfgrid.tooltip.info("公式不可引用其本身的单元格，会导致计算结果不准确", "");
                                
                            }

                            return [false, 0, txt];
                        }
                    }
                }

                result = eval(fp);

                //加入sparklines的参数项目
                if(fp.indexOf("SPLINES") > -1){
                    sparklines = result;
                    result = "";
                }
            } 
            catch (e) {
                var err = e;
                //err错误提示处理
                console.log(e);
                err = jfgrid.formula.errorInfo(err);
                result = [jfgrid.formula.error.n, err];
            }

            //公式结果是对象，则表示只是选区。如果是单个单元格，则返回其值；如果是多个单元格，则返回 #VALUE!。
            if(jfgrid.getObjType(result) == "object" && result.startCell != null){
                if(jfgrid.getObjType(result.data) == "array"){
                    result = jfgrid.formula.error.v;
                }
                else{
                    if(result.data == null || jfgrid.func_methods.isRealNull(result.data.v)){
                        result = 0;
                    }
                    else{
                        result = result.data.v;
                    }
                }
            }

            //公式结果是数组，分错误值 和 动态数组 两种情况
            if(jfgrid.getObjType(result) == "array"){
                var isErr = false; 

                if(jfgrid.getObjType(result[0]) != "array" && result.length == 2){
                    isErr = jfgrid.func_methods.valueIsError(result[0]);
                }

                if(!isErr){
                    if(jfgrid.getObjType(result[0]) == "array" && result.length == 1 && result[0].length == 1){
                        result = result[0][0];
                    }
                    else{
                        var jfgridfile = jfgrid.getjfgridfile();
                        var file = jfgridfile[jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex)];
                        var dynamicArray = file["dynamicArray"] == null ? [] : file["dynamicArray"];
                        dynamicArray.push({"r": r, "c": c, "f": txt, "data": result});
                            
                        file["dynamicArray"] = dynamicArray;
                        jfgrid.setjfgridfile(jfgridfile);

                        result = "";
                    }
                }
                else{
                    result = result[0];
                }
            }

            window.jfgridCurrentRow = null;
            window.jfgridCurrentColumn = null;
            window.jfgridCurrentFunction = null;

            if (r != null && c != null) {
                if (isrefresh) {
                    this.execFunctionGroup(r, c, result);
                }

                if(!notInsertFunc){
                    this.insertUpdateFunctionGroup(r, c, [true, result, txt]);
                }
            }

            if(!!sparklines){
                return [true, result, txt, {type:"sparklines", data:sparklines}];
            }

            return [true, result, txt];
        },
        testFunction: function(txt, fp) {
            if (txt.substr(0, 1) == "=") {
                return true;
            } 
            else {
                return false;
            }
        },
        functionResizeData: {},
        functionResizeStatus: false,
        functionResizeTimeout: null,
        data_parm_index: 0  //选择公式后参数索引标记
    }

    //{"0":"数学","1":"统计","2":"查找","3":"兔表哥","4":"数据挖掘","5":"数据源","6":"日期","7":"过滤器","8":"财务","9":"工程计算","10":"逻辑","11":"运算符","12":"文本","13":"转换工具","14":"数组"}
    jfgrid.functionlist = [
        {
            'n': 'SUMIF',
            't': 0,
            'd': '对范围中符合指定条件的值求和。',
            'a': '对范围中符合指定条件的值求和。',
            'm': [2, 3],
            'p': [{
                'name': '范围',
                'detail': '要根据条件进行检测的范围。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '条件',
                'detail': '要应用于范围的模式或测试条件。\n\n如果范围包含的是要检测的文本，则条件必须为字符串。条件可以包含通配符，包括用于匹配单个字符的?或用于匹配零个或连续多个字符的*。要匹配问号星号本身，请在该字符前面加上波浪号(~)前缀（即~?和~*）。字符串条件必须用引号括起来。函数会检查范围中的每个单元格与条件是否相等或匹配（如果使用了通配符）。\n\n如果范围包含的是要检测的数字，则条件可以是字符串也可以是数字。如果给定的条件是一个数字，则检查范围中的每个单元格是否等于条件。另外，条件也可能是包含数字的字符串（也将对其进行相等检测），或者带有以下前缀的数字：=（检查是否相等）、>（检查范围单元格的值是否大于条件值）或<（检查范围单元格的值是否小于条件值）',
                'example': '">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '求和范围',
                'detail': '要求和的范围（如果与范围不同）。',
                'example': 'B1:B10',
                'require': 'o',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'TAN',
            't': 0,
            'd': '返回已知角度的正切值。',
            'a': '返回已知角度的正切值。',
            'm': [1, 1],
            'p': [{
                'name': '角度',
                'detail': '要求其正切值的角度，以弧度表示。',
                'example': '45*PI()/180',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TANH',
            't': 0,
            'd': '返回给定实数的双曲正切值。',
            'a': '返回给定实数的双曲正切值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其双曲正切值的实数。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CEILING',
            't': 0,
            'd': '将数值向上取整为最接近的指定因数的倍数。',
            'a': '将数值向上取整为最接近的指定因数的倍数。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '要向上舍入的数值。',
                'example': '23.25',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '因数',
                'detail': '要将值舍入到此数的整数倍。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ATAN',
            't': 0,
            'd': '返回数值的反正切值，以弧度表示。',
            'a': '返回数值的反正切值',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反正切值的数值。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ASINH',
            't': 0,
            'd': '返回数值的反双曲正弦值。',
            'a': '返回数值的反双曲正弦值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反双曲正弦值的数值。',
                'example': '0.9',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ABS',
            't': 0,
            'd': '返回数值的绝对值。',
            'a': '返回数值的绝对值。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要返回其绝对值的数。',
                'example': '-2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ACOS',
            't': 0,
            'd': '返回数值的反余弦值，以弧度表示。',
            'a': '返回数值的反余弦值',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反余弦值的数值。必须介于-1和1之间，包括两端值。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ACOSH',
            't': 0,
            'd': '返回数值的反双曲余弦值。',
            'a': '返回数值的反双曲余弦值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反双曲余弦值的数值。必须大于等于1。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MULTINOMIAL',
            't': 0,
            'd': '返回参数和的阶乘除以各参数阶乘的乘积后得到的值。',
            'a': '返回参数和的阶乘除以各参数阶乘的乘积后得到的值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '用于计算的第一项数值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2',
                'detail': '用于计算的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ATANH',
            't': 0,
            'd': '返回数值的反双曲正切值。',
            'a': '返回数值的反双曲正切值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反双曲正切值的数值。必须介于-1和1之间（不包括-1和1）。',
                'example': '0.9',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ATAN2',
            't': 0,
            'd': '以弧度为单位返回 x 轴与从原点 (0,0) 到指定坐标点 (`x`,`y`) 之间连线的夹角。',
            'a': '以弧度为单位返回 x 轴与从原点 (0,0) 到指定坐标点 (`x`,`y`) 之间连线的夹角。',
            'm': [2, 2],
            'p': [{
                'name': 'x',
                'detail': '要计算其与x轴夹角大小的线段的终点x坐标。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'y',
                'detail': '要计算其与x轴夹角大小的线段的终点y坐标。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUNTBLANK',
            't': 1,
            'd': '返回给定范围内的空单元格数。',
            'a': '返回给定范围内的空单元格数。',
            'm': [1, 1],
            'p': [{
                'name': '范围',
                'detail': '要统计空白单元格数量的范围。',
                'example': 'A2:C100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'COSH',
            't': 0,
            'd': '返回给定实数的双曲余弦值。',
            'a': '返回给定实数的双曲余弦值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其双曲余弦值的实数值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'INT',
            't': 0,
            'd': '将数值向下取整为小于或等于该数的最接近的整数。',
            'a': '将数值向下取整为小于或等于该数的最接近的整数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要向下取整为最接近的整数的数值。',
                'example': '99.44',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ISEVEN',
            't': 0,
            'd': '检查所提供的数值是否为偶数。',
            'a': '检查所提供的数值是否为偶数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要验证其是否为偶数的数值。\n\n如果值为偶数或指向包含偶数的单元格的引用，ISEVEN将返回TRUE，否则返回FALSE。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ISODD',
            't': 0,
            'd': '检查所提供的数值是否为奇数。',
            'a': '检查所提供的数值是否为奇数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要验证其是否为奇数的数值。\n\n如果值为奇数或指向包含奇数的单元格，ISODD将返回TRUE，否则返回FALSE。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LCM',
            't': 0,
            'd': '返回一个或多个整数的最小公倍数。',
            'a': '返回一个或多个整数的最小公倍数。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '要在求最小公倍数数的计算中检查其因数的第一项数值或范围。',
                'example': 'A2:A5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2',
                'detail': '[可选] - 在求最小公倍数时要考虑其因数的其他数值或范围。',
                'example': '3',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LN',
            't': 0,
            'd': '返回数值以 e（欧拉数）为底的对数。',
            'a': '返回数值以 e（欧拉数）为底的对数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要以 e 为底数计算其对数的值。\n\n值必须为正数。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LOG',
            't': 0,
            'd': '根据指定底数返回数字的对数。',
            'a': '根据指定底数返回数字的对数。',
            'm': [1, 2],
            'p': [{
                'name': '值',
                'detail': '想要计算其对数的正实数。',
                'example': '128',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '底数',
                'detail': '[可选] - 对数的底数。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LOG10',
            't': 0,
            'd': '返回数值以10为底的对数。',
            'a': '返回数值以10为底的对数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其以10为底的对数的数值。\n\n值必须为正值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MOD',
            't': 0,
            'd': '返回两数相除的余数, 结果的符号与除数相同。',
            'a': '返回两数相除的余数。',
            'm': [2, 2],
            'p': [{
                'name': '被除数',
                'detail': '要将其相除以得到余数的数值。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '除数',
                'detail': '用于除其他数的数值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MROUND',
            't': 0,
            'd': '将数值取整为另一整数最接近的整数倍。',
            'a': '将数值取整为另一整数最接近的整数倍。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '要取整为另一整数最接近的整数倍的数值。',
                'example': '21',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '因数',
                'detail': '值将取此因数的整数倍。',
                'example': '14',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ODD',
            't': 0,
            'd': '将数值向上取整为最接近的奇整数。',
            'a': '将数值向上取整为最接近的奇整数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要向上取整的数值，取整值为大于此值的最接近的奇数。\n\n如果值为负数，则将其取整为绝对值大于该值的相邻负奇数。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUMSQ',
            't': 0,
            'd': '返回一组数值和/或单元格的平方总和。',
            'a': '返回一组数值和/或单元格的平方总和。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '要将其平方相加的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 要将其平方与值1的平方相加的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'COMBIN',
            't': 0,
            'd': '给定集合中的对象总数和要选择的对象数量，返回共有多少种不同选择方式。',
            'a': '给定集合中的对象总数和要选择的对象数量',
            'm': [2, 2],
            'p': [{
                'name': 'n',
                'detail': '要从中进行选择的对象集合的大小。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'k',
                'detail': '要选择的对象数量。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUM',
            't': 0,
            'd': '返回一组数值和/或单元格的总和。',
            'a': '返回一组数值和/或单元格的总和。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '要相加的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2',
                'detail': '[可选] - 要相加的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'SUBTOTAL',
            't': 0,
            'd': '使用指定的汇总函数，返回一系列纵向单元格的分类汇总。',
            'a': '使用指定的汇总函数',
            'm': [2, 256],
            'p': [{
                'name': '函数代码',
                'detail': '用于计算分类汇总的函数。\n\n1代表AVERAGE\n\n2代表COUNT\n\n3代表COUNTA\n\n4代表MAX\n\n5代表MIN\n\n6代表PRODUCT\n\n7代表STDEV\n\n8代表STDEVP\n\n9代表SUM\n\n10代表VAR\n\n11代表VARP\n\n通过在这些2位代码前附加10（对于1位代码）或1（对于2位代码），可以将隐藏值忽略。例如，102代表忽略隐藏单元格的COUNT，而110则代表忽略隐藏值的VAR。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '范围1',
                'detail': '要计算分类汇总的第一个范围。',
                'example': 'A2:A5',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '范围2',
                'detail': '[可选] - 要计算分类汇总的其他范围。',
                'example': 'B2:B8',
                'require': 'o',
                'repeat': 'y',
                'type': 'range'
            }]
        }, {
            'n': 'ASIN',
            't': 0,
            'd': '返回数值的反正弦值，以弧度表示。',
            'a': '返回数值的反正弦值',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其反正弦值的数值。必须介于-1和1之间，包括两端值。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUNTIF',
            't': 1,
            'd': '返回范围内满足某个条件的单元格的数量。',
            'a': '返回范围内满足某个条件的单元格的数量。',
            'm': [2, 2],
            'p': [{
                'name': '范围',
                'detail': '要根据条件进行检测的范围。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '条件',
                'detail': '要应用于范围的模式或测试条件。\n\n如果范围包含的是要检测的文本，则条件必须为字符串。条件可以包含通配符，包括用于匹配单个字符的?或用于匹配零个或连续多个字符的*。要匹配问号星号本身，请在该字符前面加上波浪号(~)前缀（即~?和~*）。字符串条件必须用引号括起来。函数会检查范围中的每个单元格与条件是否相等或匹配（如果使用了通配符）。\n\n如果范围包含的是要检测的数字，则条件可以是字符串也可以是数字。如果给定的条件是一个数字，则检查范围中的每个单元格是否等于条件。另外，条件也可能是包含数字的字符串（也将对其进行相等检测），或者带有以下前缀的数字：=、>、>=、<或<=，这些条件将分别用于检查范围中的单元格是否等于、大于、大于等于、小于、小于等于条件值。',
                'example': '">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RADIANS',
            't': 0,
            'd': '将以度表示的角度值转换为弧度。',
            'a': '将以度表示的角度值转换为弧度。',
            'm': [1, 1],
            'p': [{
                'name': '角度',
                'detail': '要从度转换为弧度的角度。',
                'example': '180',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'RAND',
            't': 0,
            'd': '返回一个介于0和1之间（包括0但不包括1）的随机数。',
            'a': '返回一个介于0和1之间（包括0但不包括1）的随机数。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'COUNTUNIQUE',
            't': 0,
            'd': '计算一列指定值和范围中不重复数值的个数。',
            'a': '计算一列指定值和范围中不重复数值的个数。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '要检查其是否唯一的第一个值或范围。',
                'example': 'A1:C100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2',
                'detail': '[可选] - 要检查是否唯一的其他值或范围。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DEGREES',
            't': 0,
            'd': '将以弧度表示的角度值转换为度。',
            'a': '将以弧度表示的角度值转换为度。',
            'm': [1, 1],
            'p': [{
                'name': '角度',
                'detail': '要从弧度转换为度的角度。',
                'example': 'PI()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ERFC',
            't': 9,
            'd': '返回数值的互补高斯误差函数。',
            'a': '返回数值的互补高斯误差函数。',
            'm': [1, 1],
            'p': [{
                'name': 'z',
                'detail': '要为其计算互补高斯误差函数的数值。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'EVEN',
            't': 0,
            'd': '将数值向上取整为最接近的偶整数。',
            'a': '将数值向上取整为最接近的偶整数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要向上取整的数值，取整值为大于此值的最接近的偶数。\n\n如果值为负数，则将其取整为绝对值大于该值的相邻负偶数。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'EXP',
            't': 0,
            'd': '返回欧拉数 e (~2.718) 的指定次幂。',
            'a': '返回欧拉数 e (~2.718) 的指定次幂。',
            'm': [1, 1],
            'p': [{
                'name': '指数',
                'detail': '指定e的自乘幂次值。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FACT',
            't': 0,
            'd': '返回数值的阶乘。',
            'a': '返回数值的阶乘。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算并返回其阶乘的数字或对数字（所在单元格）的引用。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FACTDOUBLE',
            't': 0,
            'd': '返回数值的“双阶乘”。',
            'a': '返回数值的“双阶乘”。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算并返回其双阶乘的数字或对数字（所在单元格）的引用。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PI',
            't': 0,
            'd': '返回带有14位小数的 PI 值。',
            'a': '返回带有14位小数的 PI 值。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'FLOOR',
            't': 0,
            'd': '将数值向下取整为指定因数的最接近的整数倍。',
            'a': '将数值向下取整为指定因数的最接近的整数倍。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '要向下舍入为因数的最接近整数倍的数值。',
                'example': '23.25',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '因数',
                'detail': '要将值舍入到此数的整数倍。\n\n因数不得为0。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'GCD',
            't': 0,
            'd': '返回一个或多个整数的最大公约数。',
            'a': '返回一个或多个整数的最大公约数。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '要在查找最大公约数的计算中检查其因数的第一项数值或范围。',
                'example': 'A2:A5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2',
                'detail': '[可选] - 在求最大公约数时要考虑其因数的其他数值或范围。',
                'example': '96',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RANDBETWEEN',
            't': 0,
            'd': '返回介于两个整数之间（包括这两个整数）的随机数。',
            'a': '返回介于两个整数之间（包括这两个整数）的随机数。',
            'm': [2, 2],
            'p': [{
                'name': '下界',
                'detail': '随机值范围的下界。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '上界',
                'detail': '随机值范围的上界。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ROUND',
            't': 0,
            'd': '将数字四舍五入到指定的位数。',
            'a': '将数字四舍五入到指定的位数。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '要四舍五入的数字。',
                'example': '99.44',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '位数',
                'detail': '要进行四舍五入运算的位数。\n\n位数可以取负值，在这种情况下会将值的小数点左侧部分舍入到指定的位数。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ROUNDDOWN',
            't': 0,
            'd': '朝着零的方向将数字进行向下舍入。',
            'a': '朝着零的方向将数字进行向下舍入。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '需要向下舍入的任意实数。',
                'example': '99.44',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '位数',
                'detail': '要通过舍入达到的小数位数。\n\n位数可以取负值，在这种情况下会将值的小数点左侧部分舍入到指定的位数。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ROUNDUP',
            't': 0,
            'd': '朝着远离 0（零）的方向将数字进行向上舍入。',
            'a': '朝着远离 0（零）的方向将数字进行向上舍入。',
            'm': [2, 2],
            'p': [{
                'name': '值',
                'detail': '要将其舍入为位数位数字的值，始终向上舍入。',
                'example': '99.44',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '位数',
                'detail': '要通过舍入达到的小数位数。\n\n位数可以取负值，在这种情况下会将值的小数点左侧部分舍入到指定的位数。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SERIESSUM',
            't': 0,
            'd': '给定参数 x、n、m 和 a，返回幂级数的和 a1xn + a2x(n+m) + ... + aix(n+(i-1)m)，其中 i 为范围 a 中的项数。',
            'a': '给定参数 x、n、m 和 a',
            'm': [4, 4],
            'p': [{
                'name': 'x',
                'detail': '幂级数的输入值。随相应的近似类型而变，有可能为角度、指数或其他一些值。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'n',
                'detail': '在幂级数中x的初始自乘幂次。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'm',
                'detail': 'x的幂次中的附加增量。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'a',
                'detail': '包含幂级数系数的数组或范围。',
                'example': '{FACT(0)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SIGN',
            't': 0,
            'd': '给定输入数值，如果为负返回-1；如果为正返回1；如果为零则返回0。',
            'a': '给定输入数值',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要返回其符号的数值。',
                'example': '-42',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SIN',
            't': 0,
            'd': '给定角度（以弧度表示），返回其正弦值。',
            'a': '给定角度（以弧度表示）',
            'm': [1, 1],
            'p': [{
                'name': '角度',
                'detail': '要返回其正弦值的角度，以弧度表示。',
                'example': 'PI()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SINH',
            't': 0,
            'd': '返回给定实数的双曲正弦值。',
            'a': '返回给定实数的双曲正弦值。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其双曲正弦值的实数值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SQRT',
            't': 0,
            'd': '返回一个正数的正平方根。',
            'a': '返回一个正数的正平方根。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要计算其正平方根的数值。\n\n值必须为正数；如果为负，SQRT 将返回 #NUM! 错误。',
                'example': '9',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SQRTPI',
            't': 0,
            'd': '返回 PI 与给定正数乘积的正平方根。',
            'a': '返回 PI 与给定正数乘积的正平方根。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '要将其与 PI 相乘并返回该乘积的平方根的数值\n\n值必须为正数；如果为负数，SQRTPI 将返回 #NUM! 错误。',
                'example': '9',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'GAMMALN',
            't': 1,
            'd': '返回指定伽玛函数的以 e（欧拉数）为底的对数。',
            'a': '返回指定伽玛函数的以 e（欧拉数）为底的对数。',
            'm': [1, 1],
            'p': [{
                'name': '值',
                'detail': '伽玛函数的输入值。返回的将是伽玛 (值) 的自然对数。\n\n值必须为正数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COS',
            't': 0,
            'd': '返回给定角度的余弦值（角度以弧度表示）。',
            'a': '返回给定角度的余弦值（角度以弧度表示）。',
            'm': [1, 1],
            'p': [{
                'name': '角度',
                'detail': '要取其余弦值的角度，以弧度表示。',
                'example': 'PI()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TRUNC',
            't': 0,
            'd': '截除指定有效位之外的部分，取数据的指定有效位。',
            'a': '截除指定有效位之外的部分',
            'm': [1, 2],
            'p': [{
                'name': '值',
                'detail': '要截取的数据。',
                'example': '3.141592654',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '位数',
                'detail': '[可选 - 默认值为0] - 小数点右侧要保留的有效位数。\n\n如果位数大于值中的有效位数，则将“值”原样返回。\n\n位数可以取负值，在这种情况下会将小数点左侧指定位数的值更改为零。小数点右侧的所有位数都会被舍弃。如果值的所有位都被更改为零，则TRUNC会返回0。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'QUOTIENT',
            't': 0,
            'd': '返回以一个数除以另一个数所得的结果，不包含余数。',
            'a': '返回以一个数除以另一个数所得的结果',
            'm': [2, 2],
            'p': [{
                'name': '被除数',
                'detail': '要被除的数值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '除数',
                'detail': '用于除其他数的数值。\n\n除数不得为0。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'POWER',
            't': 0,
            'd': '返回数值的指定次幂。',
            'a': '返回数值的指定次幂。',
            'm': [2, 2],
            'p': [{
                'name': '底数',
                'detail': '要计算其指数次幂的数值。\n\n如果底数为负，则指数必须为整数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '指数',
                'detail': '指定底数的自乘幂次值。',
                'example': '0.5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUMIFS',
            't': 0,
            'd': '根据多项条件返回范围之和。',
            'a': '根据多项条件返回范围之和。',
            'm': [3, 257],
            'p': [{
                'name': '求和范围',
                'detail': '要对其求和的范围。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '条件范围1',
                'detail': '要在哪个范围内检查条件1。',
                'example': ' B1:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '条件1',
                'detail': '要应用于条件范围1的模式或测试条件。',
                'example': ' ">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '条件范围2, 条件2...',
                'detail': '[ 可选 ] - 要检查的其他范围和条件。',
                'example': ' C1:C10',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'COUNTIFS',
            't': 1,
            'd': '根据多项条件返回范围中的单元格数量。',
            'a': '根据多项条件返回范围中的单元格数量。',
            'm': [2, 256],
            'p': [{
                'name': '条件范围1',
                'detail': '要在哪个范围内检查条件1。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '条件1',
                'detail': '要应用于条件范围1的模式或测试条件。',
                'example': ' ">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '条件范围2, 条件2...',
                'detail': '[ 可选 ] - 要检查的其他范围和条件，可重复。',
                'example': ' B1:B10',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'PRODUCT',
            't': 0,
            'd': '返回将一组数相乘所得的结果。',
            'a': '返回将一组数相乘所得的结果。',
            'm': [1, 255],
            'p': [{
                'name': '乘数1',
                'detail': '用于计算乘积的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '乘数2 ... 乘数30',
                'detail': '[可选] - 要相乘的其他数值。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'HARMEAN',
            't': 1,
            'd': '计算数据集的调和平均值。',
            'a': '计算数据集的调和平均值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'HYPGEOMDIST',
            't': 1,
            'd': '返回超几何分布。 如果已知样本量、总体成功次数和总体大小，则 HYPGEOM.DIST 返回样本取得已知成功次数的概率。',
            'a': '返回超几何分布。',
            'm': [5, 5],
            'p': [{
                'name': 'Sample_s',
                'detail': '样本中成功的次数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'Number_sample',
                'detail': '样本量。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'Population_s',
                'detail': '总体中成功的次数。',
                'example': '20',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'Number_pop',
                'detail': '总体大小。',
                'example': '40',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '决定函数形式的逻辑值。\n\n如果 cumulative 为 TRUE()，则 HYPGEOM.DIST 返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'TRUE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'INTERCEPT',
            't': 1,
            'd': '计算数据集的线性回归方程直线与 Y 轴的相交点 (x=0) 的 y 值。',
            'a': '计算数据集的线性回归方程直线与 Y 轴的相交点 (x=0) 的 y 值。',
            'm': [2, 2],
            'p': [{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'KURT',
            't': 1,
            'd': '计算数据集的峭度，该指标指示数据集（分布）的形态，尤其是该形态的陡峭程度。',
            'a': '计算数据集的峭度',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '数据集中的第一个值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LARGE',
            't': 1,
            'd': '返回数据集中第 n 个最大元素，n 由用户指定。',
            'a': '返回数据集中第 n 个最大元素',
            'm': [2, 2],
            'p': [{
                'name': '数据',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'n',
                'detail': '要返回的元素的排行位置（从大到小顺序）。\n\n例如，将n设为4将使LARGE返回数据中排名第4的最大元素。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'STDEVA',
            't': 1,
            'd': '基于样本计算标准偏差，将文本取值为0。',
            'a': '基于样本计算标准偏差',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2,…',
                'detail': '[可选] - 样本中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'STDEVP',
            't': 1,
            'd': '基于样本总体计算标准偏差。',
            'a': '基于样本总体计算标准偏差。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '数据集中的第一个值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'GEOMEAN',
            't': 1,
            'd': '计算数据集的几何平均值。',
            'a': '计算数据集的几何平均值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RANK_EQ',
            't': 1,
            'd': '返回指定值在数据集中的排名。如果相同的值在数据集中存在多项，则返回其中的最高排名。',
            'a': '返回指定值在数据集中的排名。如果相同的值在数据集中存在多项，则返回其中的最高排名。',
            'm': [2, 3],
            'p': [{
                'name': 'number',
                'detail': '要确定其排名的值。',
                'example': 'A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'ref',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A1:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'order',
                'detail': '[可选 - 默认为按降序 (FALSE()) ] - 要按升序还是按降序考虑“data”中的值。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RANK_AVG',
            't': 1,
            'd': '返回指定值在数据集中的排名。如果相同的值在数据集中存在多项，则返回这些项排名的平均值。',
            'a': '返回指定值在数据集中的排名。如果相同的值在数据集中存在多项，则返回这些项排名的平均值。',
            'm': [2, 3],
            'p': [{
                'name': 'number',
                'detail': '要确定其排名的值。',
                'example': 'A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'ref',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A1:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'order',
                'detail': '[可选 - 默认为按降序 (FALSE()) ] - 要按升序还是按降序考虑“data”中的值。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'PERCENTRANK_EXC',
            't': 1,
            'd': '以百分数形式返回指定值在给定数据集中的百分比排名（介于0和1之间，不包括两端值）。',
            'a': '以百分数形式返回指定值在给定数据集中的百分比排名（介于0和1之间，不包括两端值）。',
            'm': [2, 3],
            'p': [{
                'name': 'data',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A1:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'x',
                'detail': '要确定其百分比排位的值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'significance',
                'detail': '[可选 - 默认值为 3] - 要在计算中使用的有效位数。',
                'example': '4',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PERCENTRANK_INC',
            't': 1,
            'd': '以百分比形式返回指定值在给定数据集中的百分比排名（介于0和1之间，包括两端值）。',
            'a': '以百分比形式返回指定值在给定数据集中的百分比排名（介于0和1之间，包括两端值）。',
            'm': [2, 3],
            'p': [{
                'name': 'data',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A1:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'x',
                'detail': '要确定其百分比排位的值。',
                'example': ' A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'significance',
                'detail': '[可选 - 默认值为 3] - 要在计算中使用的有效位数。',
                'example': '4',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FORECAST',
            't': 1,
            'd': '基于数据集的线性回归，计算指定 x 的预期 y 值。',
            'a': '基于数据集的线性回归',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': 'x轴上用于预测的值。',
                'example': 'A1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FISHERINV',
            't': 1,
            'd': '返回指定数值的 Fisher 逆变换。',
            'a': '返回指定数值的 Fisher 逆变换。',
            'm': [1, 1],
            'p': [{
                'name': 'y',
                'detail': '要计算其Fisher逆变换的数值。',
                'example': '0.962',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FISHER',
            't': 1,
            'd': '返回指定数值的 Fisher 变换。',
            'a': '返回指定数值的 Fisher 变换。',
            'm': [1, 1],
            'p': [{
                'name': 'x',
                'detail': '要计算其Fisher变换的数值。',
                'example': '0.962',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MODE_SNGL',
            't': 1,
            'd': '返回数据集中出现次数最多的值。',
            'a': '返回数据集中出现次数最多的值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算模式时要检查的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计算模式时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'WEIBULL_DIST',
            't': 1,
            'd': '给定形状和尺度，返回韦伯分布函数（或韦伯累积分布函数）的值。',
            'a': '给定形状和尺度',
            'm': [4, 4],
            'p': [{
                'name': 'x',
                'detail': 'WEIBULL 分布函数的输入值。',
                'example': '2.4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'alpha',
                'detail': 'Weibull 分布函数的形状参数。\n\nalpha 值必须大于 0。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'beta',
                'detail': 'Weibull 分布函数的尺度参数。\n\nbeta 值必须大于 0。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': 'TRUE() 表示使用累积分布函数，FALSE() 则表示使用概率密度函数。',
                'example': 'TRUE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'COUNT',
            't': 1,
            'd': '返回数据集中数值的个数。',
            'a': '返回数据集中数值的个数。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计数时要检查的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计数时要检查的其他值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'COUNTA',
            't': 1,
            'd': '返回数据集中值的数量。',
            'a': '返回数据集中值的数量。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计数时要检查的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计数时要检查的其他值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'AVEDEV',
            't': 1,
            'd': '计算数据与数据集均值之间的偏差大小的平均值。',
            'a': '计算数据与数据集均值之间的偏差大小的平均值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 样本中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'AVERAGE',
            't': 1,
            'd': '返回数据集的算术平均值，对文本忽略不计。',
            'a': '返回数据集的算术平均值',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算平均值时用到的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计算平均值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'AVERAGEA',
            't': 1,
            'd': '返回数据集的算术平均值。',
            'a': '返回数据集的算术平均值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算平均值时用到的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计算平均值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'BINOM_DIST',
            't': 1,
            'd': '返回一元二项式分布的概率。',
            'a': '返回一元二项式分布的概率。',
            'm': [4, 4],
            'p': [{
                'name': 'number_s',
                'detail': '试验的成功次数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'trials',
                'detail': '独立检验的次数。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'probability_s',
                'detail': '任一给定检验的成功概率。',
                'example': '0.005',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '是否使用二项式累积分布。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'BINOM_INV',
            't': 1,
            'd': '计算累积二项式分布大于或等于指定条件的最小值。',
            'a': '计算累积二项式分布大于或等于指定条件的最小值。',
            'm': [3, 3],
            'p': [{
                'name': 'trials',
                'detail': '贝努利试验次数。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'probability_s',
                'detail': '任一次给定检验的成功概率。',
                'example': '0.005',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'alpha',
                'detail': '期望的临界概率。',
                'example': '0.8',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CONFIDENCE_NORM',
            't': 1,
            'd': '计算正态分布的置信区间的一半宽度。',
            'a': '计算正态分布的置信区间的一半宽度。',
            'm': [3, 3],
            'p': [{
                'name': 'alpha',
                'detail': '用来计算置信水平的显著性水平。\n\n置信水平等于 100*(1 - alpha)%，亦即，如果 alpha 为 0.05，则置信水平为 95%。',
                'example': '0.05',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': '数据区域的总体标准偏差。',
                'example': '1.6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'size',
                'detail': '样本总量的大小。',
                'example': '250',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CORREL',
            't': 1,
            'd': '计算给定数据集的皮尔逊积矩相关系数 r。',
            'a': '计算给定数据集的皮尔逊积矩相关系数 r。',
            'm': [2, 2],
            'p': [{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COVARIANCE_P',
            't': 1,
            'd': '计算数据集的总体协方差。',
            'a': '计算数据集的总体协方差。',
            'm': [2, 2],
            'p': [{
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COVARIANCE_S',
            't': 1,
            'd': '计算数据集的样本协方差。',
            'a': '计算数据集的样本协方差。',
            'm': [2, 2],
            'p': [{
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DEVSQ',
            't': 1,
            'd': '基于样本计算其偏差的平方和。',
            'a': '基于样本计算其偏差的平方和。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 样本中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'EXPON_DIST',
            't': 1,
            'd': '返回带有指定 Lambda 和指定值的指数分布函数的值。',
            'a': '返回带有指定 Lambda 和指定值的指数分布函数的值。',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': '指数分布函数的输入值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'lambda',
                'detail': '用于指定指数分布函数的 lambda 值。',
                'example': '0.5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '是否使用指数累积分布。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'AVERAGEIF',
            't': 1,
            'd': '根据条件返回范围的平均值。',
            'a': '根据条件返回范围的平均值。',
            'm': [2, 3],
            'p': [{
                'name': 'criteria_range',
                'detail': '要对其检查 criterion 的范围。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criterion',
                'detail': '要应用于 criteria_range 的模式或测试条件。\n\n等于："文本" 或 1 或 "=文本" 或 "=1"\n\n大于：">1"\n\n大于等于：">=1"\n\n小于："<1"\n\n小于等于："<=1"\n\n不等于："<>1"或"<>文本"',
                'example': '">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'average_range',
                'detail': '[可选] - 要计算平均值的范围。如果未提供此参数，则改用 criteria_range 来计算平均值。',
                'example': 'B1:B10',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'AVERAGEIFS',
            't': 1,
            'd': '根据多项条件返回范围的平均值。',
            'a': '根据多项条件返回范围的平均值。',
            'm': [2, 255],
            'p': [{
                'name': 'average_range',
                'detail': '要计算平均值的范围。',
                'example': 'A1:A10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria_range1',
                'detail': '要对其检查 criterion1 的范围。',
                'example': ' B1:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criterion1',
                'detail': '要应用于 criteria_range1 的模式或测试条件。',
                'example': ' ">20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria_range2, criterion2, ...',
                'detail': '[可选] - 要检查的其他范围和条件。',
                'example': ' C1:C10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'PERMUT',
            't': 1,
            'd': '返回可从数字对象中选择的给定数目对象的排列数。',
            'a': '返回可从数字对象中选择的给定数目对象的排列数。',
            'm': [2, 2],
            'p': [{
                'name': 'number',
                'detail': '表示对象个数的整数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'number_chosen',
                'detail': '表示每个排列中对象个数的整数。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TRIMMEAN',
            't': 1,
            'd': '在排除数据集高低两端的部分数据之后计算所得的均值。',
            'a': '在排除数据集高低两端的部分数据之后计算所得的均值。',
            'm': [2, 2],
            'p': [{
                'name': '数据',
                'detail': '包含相关数据集的数组或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': '排除比例',
                'detail': '要从数据集的极值部分排除的数据占数据集的比例。\n\n排除比例必须大于等于0且小于1。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PERCENTILE_EXC',
            't': 1,
            'd': '返回数组的 K 百分点值，K 介于 0 到 1 之间，不含 0 与 1。',
            'a': '返回数组的 K 百分点值，K 介于 0 到 1 之间，不含 0 与 1。',
            'm': [2, 2],
            'p': [{
                'name': 'array',
                'detail': '定义相对位置的数组或数据区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'k',
                'detail': '0 到 1 之间的百分点值，不包含 0 和 1。',
                'example': '0.25',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PERCENTILE_INC',
            't': 1,
            'd': '返回数组的 K 百分点值，K 介于 0 到 1 之间，包含 0 与 1。',
            'a': '返回数组的 K 百分点值，K 介于 0 到 1 之间，包含 0 与 1。',
            'm': [2, 2],
            'p': [{
                'name': 'array',
                'detail': '定义相对位置的数组或数据区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'k',
                'detail': '0 到 1 之间的百分点值，包含 0 和 1。',
                'example': '0.25',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PEARSON',
            't': 1,
            'd': '返回皮尔生(Pearson)乘积矩相关系数 r。',
            'a': '返回皮尔生(Pearson)乘积矩相关系数 r。',
            'm': [2, 2],
            'p': [{
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NORM_S_INV',
            't': 1,
            'd': '返回标准正态累积分布函数的反函数值。 该分布的平均值为 0，标准偏差为 1。',
            'a': '返回标准正态累积分布函数的反函数值。 该分布的平均值为 0，标准偏差为 1。',
            'm': [1, 1],
            'p': [{
                'name': 'probability',
                'detail': '对应于正态分布的概率。',
                'example': '0.75',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NORM_S_DIST',
            't': 1,
            'd': '返回标准正态分布函数（该分布的平均值为 0，标准偏差为 1）。',
            'a': '返回标准正态分布函数（该分布的平均值为 0，标准偏差为 1）。',
            'm': [2, 2],
            'p': [{
                'name': 'z',
                'detail': '需要计算其分布的数值。',
                'example': '2.4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '决定函数形式的逻辑值。\n\n如果为 TRUE()，则返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NORM_INV',
            't': 1,
            'd': '返回指定平均值和标准偏差的正态累积分布函数的反函数值。',
            'a': '返回指定平均值和标准偏差的正态累积分布函数的反函数值。',
            'm': [3, 3],
            'p': [{
                'name': 'probability',
                'detail': '对应于正态分布的概率。',
                'example': '0.75',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': '分布的算术平均值。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': '分布的标准偏差。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NORM_DIST',
            't': 1,
            'd': '返回指定平均值和标准偏差的正态分布函数。',
            'a': '返回指定平均值和标准偏差的正态分布函数。',
            'm': [4, 4],
            'p': [{
                'name': 'x',
                'detail': '需要计算其分布的数值。',
                'example': '2.4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': '分布的算术平均值。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': '分布的标准偏差。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '决定函数形式的逻辑值。\n\n如果为 TRUE()，则返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NEGBINOM_DIST',
            't': 1,
            'd': '返回负二项式分布。',
            'a': '返回负二项式分布。',
            'm': [4, 4],
            'p': [{
                'name': 'number_f',
                'detail': '要模拟的失败次数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'number_s',
                'detail': '要模拟的成功次数。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'probability_s',
                'detail': '任一次给定检验的成功概率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '决定函数形式的逻辑值。\n\n如果为 TRUE()，则返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'MINA',
            't': 1,
            'd': '返回数据集中的最小数值。',
            'a': '返回数据集中的最小数值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算最小值时所用的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2',
                'detail': '[可选] - 在计算最小值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MIN',
            't': 1,
            'd': '返回数值数据集中的最小值。',
            'a': '返回数值数据集中的最小值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算最小值时所用的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2',
                'detail': '[可选] - 在计算最小值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MEDIAN',
            't': 1,
            'd': '返回数值数据集中的中值。',
            'a': '返回数值数据集中的中值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算中值时所用的第一个数值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2',
                'detail': '[可选] - 在计算中值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MAXA',
            't': 1,
            'd': '返回数据集中的最大数值。',
            'a': '返回数据集中的最大数值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算最大值时所用的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 在计算最大值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MAX',
            't': 1,
            'd': '返回数值数据集中的最大值。',
            'a': '返回数值数据集中的最大值。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '计算最大值时所用的第一个值或范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2',
                'detail': '[可选] - 在计算最大值时要考虑的其他数值或范围。',
                'example': 'B2:B100',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LOGNORM_INV',
            't': 1,
            'd': '返回 x 的对数累积分布函数的反函数值。',
            'a': '返回 x 的对数累积分布函数的反函数值。',
            'm': [3, 3],
            'p': [{
                'name': 'probability',
                'detail': '与对数分布相关的概率，介于 0 与 1 之间（不含 0 与 1）。',
                'example': '0.4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': 'ln(x) 的平均值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': 'ln(x) 的标准偏差，正数。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LOGNORM_DIST',
            't': 1,
            'd': '返回 x 的对数分布函数。',
            'a': '返回 x 的对数分布函数。',
            'm': [4, 4],
            'p': [{
                'name': 'x',
                'detail': '用来计算函数的值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': 'ln(x) 的平均值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': 'ln(x) 的标准偏差，正数。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '决定函数形式的逻辑值。\n\n如果为 TRUE()，则返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'Z_TEST',
            't': 1,
            'd': '返回 z 检验的单尾 P 值。',
            'a': '返回 z 检验的单尾 P 值。',
            'm': [2, 3],
            'p': [{
                'name': 'array',
                'detail': '用来检验 x 的数组或数据区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'x',
                'detail': '要测试的值。',
                'example': 'B2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'sigma',
                'detail': '[可选] - 总体（已知）标准偏差。 如果省略，则使用样本标准偏差。',
                'example': '3',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PROB',
            't': 1,
            'd': '返回区域中的数值落在指定区间内的概率。',
            'a': '返回区域中的数值落在指定区间内的概率。',
            'm': [3, 4],
            'p': [{
                'name': 'x_range',
                'detail': '具有各自相应概率值的 x 数值区域。',
                'example': 'A3:A6',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'prob_range',
                'detail': '与 x_range 中的值相关联的一组概率值。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'lower_limit',
                'detail': '要计算其概率的数值下界。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'upper_limit',
                'detail': '[可选 - 默认值为下界] - 要计算其概率的可选数值上界。\n\n如果省略上界，PROB则计算随机选取相应值的次数恰好等于下界的概率。',
                'example': '4',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'QUARTILE_EXC',
            't': 1,
            'd': '基于 0 到 1 之间（不包括 0 和 1）的百分点值返回数据集的四分位数。',
            'a': '基于 0 到 1 之间（不包括 0 和 1）的百分点值返回数据集的四分位数。',
            'm': [2, 2],
            'p': [{
                'name': 'array',
                'detail': '要求得四分位数值的数组或数字型单元格区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'quart',
                'detail': '要返回第几个四分位值。\n\n1返回数据中最靠近第一个四分位值的值（25%标记）。\n\n2返回数据中最接近中值的值（50%标记）。\n\n3返回数据中最接近第三个四分位值的值（75%标记）。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'QUARTILE_INC',
            't': 1,
            'd': '根据 0 到 1 之间的百分点值（包含 0 和 1）返回数据集的四分位数。',
            'a': '根据 0 到 1 之间的百分点值（包含 0 和 1）返回数据集的四分位数。',
            'm': [2, 2],
            'p': [{
                'name': 'array',
                'detail': '要求得四分位数值的数组或数字型单元格区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'quart',
                'detail': '要返回第几个四分位值。\n\n0返回数据中的最小值（0%标记）。\n\n1返回数据中最靠近第一个四分位值的值（25%标记）。\n\n2返回数据中最接近中值的值（50%标记）。\n\n3返回数据中最接近第三个四分位值的值（75%标记）。\n\n4返回数据中的最大值（100%标记）。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'POISSON_DIST',
            't': 1,
            'd': '返回泊松分布。',
            'a': '返回泊松分布。',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': '事件数。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': '期望值。非负数',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '一逻辑值，确定所返回的概率分布的形式。\n\n如果为 TRUE()，则返回发生的随机事件数在零（含零）和 x（含 x）之间的累积泊松概率；\n\n如果为 FALSE()，则返回发生的事件数正好是 x 的泊松概率密度函数。',
                'example': 'FALSE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RSQ',
            't': 1,
            'd': '返回皮尔生(Pearson)乘积矩相关系数 r 的平方。',
            'a': '返回皮尔生(Pearson)乘积矩相关系数 r 的平方。',
            'm': [2, 2],
            'p': [{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'T_DIST',
            't': 1,
            'd': '返回学生的左尾 t 分布。',
            'a': '返回学生的左尾 t 分布。',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': 'T-分布函数的输入。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom',
                'detail': '自由度数值。',
                'example': '30',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'tails',
                'detail': '决定函数形式的逻辑值。\n\n如果 cumulative 为 TRUE()，则 HYPGEOM.DIST 返回累积分布函数；\n\n如果为 FALSE()，则返回概率密度函数。',
                'example': 'TRUE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'T_DIST_2T',
            't': 1,
            'd': '返回学生的双尾 t 分布。',
            'a': '返回学生的双尾 t 分布。',
            'm': [2, 2],
            'p': [{
                'name': 'x',
                'detail': 'T-分布函数的输入。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom',
                'detail': '自由度数值。',
                'example': '30',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'T_DIST_RT',
            't': 1,
            'd': '返回学生的右尾 t 分布。',
            'a': '返回学生的右尾 t 分布。',
            'm': [2, 2],
            'p': [{
                'name': 'x',
                'detail': 'T-分布函数的输入。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom',
                'detail': '自由度数值。',
                'example': '30',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'T_INV',
            't': 1,
            'd': '返回学生的 t 分布的左尾反函数。',
            'a': '返回学生的 t 分布的左尾反函数。',
            'm': [2, 2],
            'p': [{
                'name': 'probability',
                'detail': '与学生的 t 分布相关的概率。\n\n必须大于 0 且小于 1。',
                'example': '0.35',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'deg_freedom',
                'detail': '自由度数值。\n\n如果所提供的参数不是整数，将截取其整数部分。\n\n必须大于等于 1。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'T_INV_2T',
            't': 1,
            'd': '返回学生 t 分布的双尾反函数。',
            'a': '返回学生 t 分布的双尾反函数。',
            'm': [2, 2],
            'p': [{
                'name': 'probability',
                'detail': '与学生的 t 分布相关的概率。\n\n必须大于 0 且小于1。',
                'example': '0.35',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'deg_freedom',
                'detail': '自由度数值。\n\n如果所提供的参数不是整数，将截取其整数部分。\n\n必须大于等于 1。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'T_TEST',
            't': 1,
            'd': '返回与t-检验相关的概率。用于判断两个样本是否可能是出自平均值相同的两个样本总体。',
            'a': '返回与t-检验相关的概率。用于判断两个样本是否可能是出自平均值相同的两个样本总体。',
            'm': [4, 4],
            'p': [{
                'name': 'array1',
                'detail': '将用于 t 检验的第一个数据样本或第一组单元格。',
                'example': 'A1:A4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array2',
                'detail': '将用于 t 检验的第二个数据样本或第二组单元格。',
                'example': 'B1:B4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'tails',
                'detail': '指定分布的尾数。\n\n如果为 1：使用单尾分布。\n\n如果为 2：使用双尾分布。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '指定 t 检验的类型。\n\n如果为 1：执行配对检验。\n\n如果为 2：执行双样本等方差（同方差）检验。\n\n如果为3：执行双样本不等方差（异方差）检验。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'F_DIST',
            't': 1,
            'd': '给定输入值 x，计算两个数据集的左尾 F 概率分布（差异程度）。此分布也称为 Fisher-Snedecor 分布或 Snedecor F 分布。',
            'a': '给定输入值 x',
            'm': [4, 4],
            'p': [{
                'name': 'x',
                'detail': '用来计算函数的值。',
                'example': '15.35',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom1',
                'detail': '分子自由度。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom2',
                'detail': '分母自由度。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cumulative',
                'detail': '用于确定函数形式的逻辑值。默认值为 FALSE。\n\n如果为 TRUE()：F.DIST 将返回累积分布函数值。\n\n如果为 FALSE()：F.DIST 将返回概率密度函数值。',
                'example': 'TRUE()',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'F_DIST_RT',
            't': 1,
            'd': '给定输入x，计算两个数据集的右尾F概率分布（差异程度）。 此分布也称为Fisher-Snedecor分布或Snedecor F分布。',
            'a': '给定输入x',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': '用来计算函数的值。',
                'example': '15.35',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom1',
                'detail': '分子自由度。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'degrees_freedom2',
                'detail': '分母自由度。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'VAR_P',
            't': 1,
            'd': '基于样本总体计算方差。',
            'a': '基于样本总体计算方差。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '数据集中的第一个值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, …',
                'detail': '[可选] - 数据集中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'VAR_S',
            't': 1,
            'd': '基于样本计算方差。',
            'a': '基于样本计算方差。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, …',
                'detail': '[可选] - 样本中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'VARA',
            't': 1,
            'd': '基于样本计算方差，将文本取值为0。',
            'a': '基于样本计算方差',
            'm': [1, 255],
            'p': [{
                'name': 'value1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value2, ...',
                'detail': '[可选] - 样本中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'VARPA',
            't': 1,
            'd': '基于样本总体计算方差，将文本取值为0。',
            'a': '基于样本总体计算方差',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '样本中的第一项值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他数值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'STEYX',
            't': 1,
            'd': '返回通过线性回归法预测每个 x 的 y 值时所产生的标准误差。',
            'a': '返回通过线性回归法预测每个 x 的 y 值时所产生的标准误差。',
            'm': [2, 2],
            'p': [{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'STANDARDIZE',
            't': 1,
            'd': '给定分布的均值和标准偏差，计算一个随机变量正态化的相应值。',
            'a': '给定分布的均值和标准偏差，计算一个随机变量正态化的相应值。',
            'm': [3, 3],
            'p': [{
                'name': 'x',
                'detail': '要正态化的随机变量值。',
                'example': '96',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'mean',
                'detail': '分布的均值。',
                'example': '80',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'standard_dev',
                'detail': '分布的标准偏差。',
                'example': '6.7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SMALL',
            't': 1,
            'd': '返回数据集中的第 k 个最小值。',
            'a': '返回数据集中的第 k 个最小值。',
            'm': [2, 2],
            'p': [{
                'name': 'array',
                'detail': '需要找到第 k 个最小值的数组或数值数据区域。',
                'example': 'A2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'k',
                'detail': '要返回的数据在数组或数据区域里的位置（从小到大）。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SLOPE',
            't': 1,
            'd': '计算通过数据集的线性回归得到的直线的斜率。',
            'a': '计算通过数据集的线性回归得到的直线的斜率。',
            'm': [2, 2],
            'p': [{
                'name': '数据_y',
                'detail': '代表因变量数据数组或矩阵的范围。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '数据_x',
                'detail': '代表自变量数据数组或矩阵的范围。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SKEW',
            't': 1,
            'd': '返回分布的偏斜度。 偏斜度表明分布相对于平均值的不对称程度。 正偏斜度表明分布的不对称尾部趋向于更多正值。 负偏斜度表明分布的不对称尾部趋向于更多负值。',
            'a': '返回分布的偏斜度。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '数据集中的第一个值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'SKEW_P',
            't': 1,
            'd': '返回基于样本总体的分布不对称度：表明分布相对于平均值的不对称程度。',
            'a': '返回基于样本总体的分布不对称度：表明分布相对于平均值的不对称程度。',
            'm': [1, 255],
            'p': [{
                'name': '值1',
                'detail': '数据集中的第一个值或范围。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '值2, ...',
                'detail': '[可选] - 数据集中包含的其他值或范围。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'VLOOKUP',
            't': 2,
            'd': '纵向查找。在范围的第一列中自上而下搜索某个键值，并返回所找到的行中指定单元格的值。',
            'a': '纵向查找。在范围的第一列中自上而下搜索某个键值',
            'm': [3, 4],
            'p': [{
                'name': '搜索键值',
                'detail': '要搜索的值，如 42、"Cats" 或 I24。',
                'example': '10003',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '范围',
                'detail': '要进行搜索的范围。VLOOKUP 将在该范围的第一列中搜索搜索键值中指定的键值。',
                'example': 'A2:B26',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '索引',
                'detail': '要返回的值的列索引，范围中的第一列编号为 1。\n\n如果索引不是介于 1 和范围中的列数之间，将返回 #VALUE! 。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '已排序',
                'detail': '[默认值为 TRUE() ] - 指示要搜索的列（指定范围的第一列）是否已排序。大多数情况下，建议设为 FALSE()。\n\n建议将已排序设为 FALSE。如果设为 FALSE，将返回完全匹配项。如果存在多个匹配值，将返回找到的第一个值对应的单元格的内容，如果找不到匹配值，则返回 #N/A。\n\n如果将已排序设为 TRUE 或省略，将返回（小于或等于搜索键值的）最接近的匹配项。如果搜索的列中所有的值均大于搜索键值，则返回 #N/A。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'HLOOKUP',
            't': 2,
            'd': '横向查找。在范围的第一行中搜索某个键值，并返回所找到的列中指定单元格的值。',
            'a': '横向查找。在范围的第一行中搜索某个键值',
            'm': [3, 4],
            'p': [{
                'name': '搜索键值',
                'detail': '要搜索的值。例如，42、"Cats"或I24。',
                'example': '10003',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '范围',
                'detail': '要进行搜索的范围。将在该范围的第一行中搜索在搜索键值中指定的键值。',
                'example': 'A2:Z6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '索引',
                'detail': '要返回的值的行索引，范围中的第一行编号为1。\n\n如果索引不是介于1和范围中的行数之间，将返回#VALUE!。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '已排序',
                'detail': '[可选 - 默认值为TRUE()] - 指示要搜索的行（指定范围的第一行）是否已排序。\n\n如果将已排序设为TRUE或省略，将返回最接近的匹配值（小于或等于搜索键值）。如果在搜索的行中所有的值均大于搜索键值，则返回#N/A。\n\n如果将已排序设为TRUE或将其省略，而范围的首行并非处于已排序状态，则返回值可能会是错误的。\n\n如果将已排序设为FALSE，则仅返回完全匹配。如果存在多个匹配值，将返回与找到的第一个值对应的单元格的内容，如果找不到匹配值则返回#N/A。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LOOKUP',
            't': 2,
            'd': '在行或列中查找相应键，并将相应单元格的值返回到与搜索行或列所在位置相同的结果范围中。',
            'a': '在行或列中查找相应键',
            'm': [2, 3],
            'p': [{
                'name': '搜索键值',
                'detail': '要在行或列中搜索的值。例如，42、"Cats" 或 I24。',
                'example': '10003',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '搜索范围 | 搜索结果数组',
                'detail': '使用 LOOKUP 的一种方法是给定单行或单列形式的搜索范围进行搜索查找，这种方式要用到另一个参数结果范围。另一种方式是将这两个参数合并为一个搜索结果数组，其中第一行或第一列用于搜索，并将返回值放在该数组的最后一行或最后一列中。',
                'example': 'A1:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '结果范围',
                'detail': '[ 可选 ] - 用于存放返回结果的范围。返回值对应于在搜索范围中找到搜索键值的位置。此范围必须仅为单行或单列，而如果您使用的是搜索结果数组方式，则不应提供此参数。',
                'example': 'B1:B100',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ADDRESS',
            't': 2,
            'd': '返回字符串形式的单元格引用。',
            'a': '返回字符串形式的单元格引用。',
            'm': [2, 5],
            'p': [{
                'name': 'row_num',
                'detail': '一个数值，指定要在单元格引用中使用的行号。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'column_num',
                'detail': '一个数值，指定要在单元格引用中使用的列号（而非名称）。A列的编号为1。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'abs_num',
                'detail': '[可选 - 默认值为1] - 一个数值，指定要返回的引用类型。\n\n1 表示行列均采用绝对值（例如$A$1）；\n\n2 表示采用绝对行号，相对列标（例如A$1）；\n\n3 表示采用相对行号，绝对列标（例如$A1）；\n\n4 表示行列均采用相对值（例如A1）。',
                'example': '4',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'A1',
                'detail': '[可选 - 默认值为TRUE()] - 一个布尔值，指示采用A1标记形式(TRUE)还是R1C1标记形式(FALSE)。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'sheet_text',
                'detail': '[可选 - 默认缺省] - 用于指定地址所指向的工作表名称。',
                'example': '"Sheet2"',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'INDIRECT',
            't': 2,
            'd': '返回以字符串指定的单元格引用。',
            'a': '返回以字符串指定的单元格引用。',
            'm': [1, 2],
            'p': [{
                'name': 'ref_text',
                'detail': '以带引号的字符串形式提供的单元格引用。',
                'example': '"Sheet2!"&B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'A1',
                'detail': '[可选 - 默认值为TRUE()] - 一个布尔值，指示采用A1标记形式(TRUE)还是R1C1标记形式(FALSE)。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ROW',
            't': 2,
            'd': '返回指定单元格的行号',
            'a': '返回指定单元格的行号',
            'm': [0, 1],
            'p': [{
                'name': 'reference',
                'detail': '[可选 - 默认为此公式所在的单元格] - 要返回其行号的单元格。\n\n如果单元格引用指向的范围其宽度大于一个单元格，而此公式不是用作数组公式的，这时会仅返回单元格引用中首行的编号值。',
                'example': 'A9',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ROWS',
            't': 2,
            'd': '返回指定数组或范围中的行数。',
            'a': '返回指定数组或范围中的行数。',
            'm': [1, 1],
            'p': [{
                'name': 'array',
                'detail': '要返回其行数的范围。',
                'example': 'A9:A62',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COLUMN',
            't': 2,
            'd': '按照 `A=1` 的规则返回指定单元格的列号。',
            'a': '按照 `A=1` 的规则返回指定单元格的列号。',
            'm': [0, 1],
            'p': [{
                'name': 'reference',
                'detail': '[可选 - 默认为包含此公式的单元格] - 要返回其列号的单元格。A列对应的编号为1。\n\n如果单元格引用是宽度超过一个单元格的范围，而此公式不是作为数组公式来使用的，因此将返回单元格引用中的第一列的位置。',
                'example': 'A9',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'COLUMNS',
            't': 2,
            'd': '返回指定数组或范围中的列数。',
            'a': '返回指定数组或范围中的列数。',
            'm': [1, 1],
            'p': [{
                'name': 'array',
                'detail': '要返回其列数的范围。',
                'example': 'A9:W62',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'OFFSET',
            't': 2,
            'd': '给定某范围的起始单元格引用以及该范围涵盖的行列数量，返回该范围的引用。',
            'a': '给定某范围的起始单元格引用以及该范围涵盖的行列数量，返回该范围的引用。',
            'm': [3, 5],
            'p': [{
                'name': 'reference',
                'detail': '用于计算行列偏移量的起点。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'rows',
                'detail': '要偏移的行数。\n\n行偏移量必须是整数，但也可以是负数。如果提供的参数带有小数，小数部分将被截去。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'cols',
                'detail': '要偏移的列数。\n\n列偏移量必须是整数，但也可以是负数。如果提供的参数带有小数，小数部分将被截去。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'height',
                'detail': '[可选] - 要从偏移目标开始返回的范围的高度。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'width',
                'detail': '[可选] - 要从偏移目标开始返回的范围的宽度。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MATCH',
            't': 2,
            'd': '在单元格中搜索指定项，然后返回该项在单元格区域中的相对位置。',
            'a': '在单元格中搜索指定项，然后返回该项在单元格区域中的相对位置。',
            'm': [2, 3],
            'p': [{
                'name': 'lookup_value',
                'detail': '要在 lookup_array 中匹配的值。',
                'example': '"Sunday"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'lookup_array',
                'detail': '要搜索的单元格区域。\n\n如果所用的范围的高度和宽度均大于1，MATCH将返回#N/A!。',
                'example': 'A2:A9',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'match_type',
                'detail': '[可选 - 默认值为1] - 要采用的搜索方式。\n\n1为默认类型，此时MATCH会假设范围已按升序排序，并返回小于等于搜索键值的最大值。\n\n0表示完全匹配，在范围未排序的情况下需要使用此方式。\n\n-1让MATCH假设范围是按降序排序的，并返回大于等于搜索键值的最小值。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'INDEX',
            't': 2,
            'd': '返回表格或中的元素值，此元素由行号和列号的索引值给定。',
            'a': '返回表格或中的元素值，此元素由行号和列号的索引值给定。',
            'm': [3, 3],
            'p': [{
                'name': 'array',
                'detail': '单元格区域或数组常量。',
                'example': 'A1:C20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'row_num',
                'detail': '选择数组中的某行，函数从该行返回数值。',
                'example': '5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'column_num',
                'detail': '选择数组中的某列，函数从该列返回数值。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'GETPIVOTDATA',
            't': 2,
            'd': '从与指定行和列标题对应的数据透视表中提取汇总值。',
            'a': '从与指定行和列标题对应的数据透视表中提取汇总值。',
            'm': [2, 254],
            'p': [{
                'name': 'data_field',
                'detail': '您想从数据透视表中获取其数据的值名称。\n值名称必须括在引号中或是指向包含相关文本的任何单元格的引用。\n如果有多个值字段，则必须使用数据透视表中显示的确切名称（如“销售总额”）。',
                'example': '"SUM of number of units"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'pivot_table',
                'detail': '目标数据透视表中的任何单元格的引用（推荐位于顶角的单元格）。',
                'example': "'Pivot table'!A1",
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'field1',
                'detail': '[可选] - 源数据集（不是数据透视表）中列的名称。',
                'example': '"division"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }, {
                'name': 'item1',
                'detail': '[可选] - 数据透视表中显示的与您要检索的字段名称 1 相对应的行或列的名称。',
                'example': '"east"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'CHOOSE',
            't': 2,
            'd': '基于索引返回选项列表中的元素。',
            'a': '基于索引返回选项列表中的元素。',
            'm': [2, 255],
            'p': [{
                'name': 'index_num',
                'detail': '指定要返回哪一项。\n\n如果索引为零、负值或大于提供的选择数量，将返回#VALUE!错误。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value1',
                'detail': '一项可能的返回值。必须提供。可以是单元格引用或单独的值。',
                'example': '"A"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '[可选] - 其他可以选择的值。选择',
                'example': '"B"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'HYPERLINK',
            't': 2,
            'd': '在单元格内创建一个超链接。',
            'a': '在单元格内创建一个超链接。',
            'p': [{
                'name': '网址',
                'detail': '以引号括住的链接位置的完整网址，或对包含这种网址的单元格的引用。\n\n仅允许某些链接类型。其中包括：http://、https://、mailto:、aim:、ftp://、gopher://、telnet://和news://，明确禁用使用其他协议。如果指定的是其他协议，将会在单元格中显示链接标签，但该标签不会以链接形式呈现。\n\n如果未指定协议，则假设使用http://，并将其作为网址的前缀。',
                'example': '"http://www.google.com/"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '链接标签',
                'detail': '[可选 - 默认为网址] - 要在单元格中作为链接显示的文本（用引号括起来的），或者指向包含这种标签的单元格的引用。\n\n如果链接标签是指向某个空单元格的引用，如果网址有效，就将其作为链接显示，否则作为纯文本显示。\n\n如果链接标签为空字符串常量("")，所在单元格显示的内容将为空白，但通过点击该单元格或转入该单元格仍然可以访问链接。',
                'example': '"Google"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TIME',
            't': 6,
            'd': '将给定的小时、分钟和秒转换为时间。',
            'a': '将给定的小时、分钟和秒转换为时间。',
            'm': [3, 3],
            'p': [{
                'name': '小时',
                'detail': '0（零）到 32767 之间的数字，代表小时。\n\n任何大于 23 的值都会除以 24，余数将作为小时值。',
                'example': '11',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '分钟',
                'detail': '0（零）到 32767 之间的数字，代表分钟。\n\n任何大于 59 的值将转换为小时和分钟。',
                'example': '40',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': '秒',
                'detail': '0（零）到 32767 之间的数字，代表秒。\n\n任何大于 59 的值将转换为小时、分钟和秒。',
                'example': '59',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TIMEVALUE',
            't': 6,
            'd': '按一天24小时返回该时间的分数表示。',
            'a': '按一天24小时返回该时间的分数表示。',
            'm': [1, 1],
            'p': [{
                'name': 'time_text',
                'detail': '用于表示时间的字符串。',
                'example': '"2:15 PM"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'EOMONTH',
            't': 6,
            'd': '返回某个月份最后一天的序列号，该月份在另一个日期之前或之后的数个月（月数由参数指定）。',
            'a': '返回某个月份最后一天的序列号',
            'm': [2, 2],
            'p': [{
                'name': 'start_date',
                'detail': '用于计算结果的参照日期。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'months',
                'detail': '用于计算的起始日期之前（负）或之后（正）的月数。返回的是计算所得月份的最后那天。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'EDATE',
            't': 6,
            'd': '返回表示某个日期的序列号，该日期在另一个日期的数月之前/之后。',
            'a': '返回表示某个日期的序列号',
            'm': [2, 2],
            'p': [{
                'name': 'start_date',
                'detail': '用于计算结果的参照日期。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'months',
                'detail': '用于计算的起始日期之前（负）或之后（正）的月数。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SECOND',
            't': 6,
            'd': '返回时间值的秒数。 秒数是 0（零）到 59 范围内的整数。',
            'a': '返回时间值的秒数。 秒数是 0（零）到 59 范围内的整数。',
            'm': [1, 1],
            'p': [{
                'name': '时间',
                'detail': '用于计算秒钟部分的时间。必须为以下值之一：指向包含日期/时间值的单元格的引用、返回日期/时间的函数或者数字。',
                'example': 'TIME(11',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'MINUTE',
            't': 6,
            'd': '以数字格式返回特定时间的分钟部分。',
            'a': '以数字格式返回特定时间的分钟部分。',
            'm': [1, 1],
            'p': [{
                'name': '时间',
                'detail': '用于计算分钟部分的时间。必须为以下值之一：指向包含日期/时间值的单元格的引用、返回日期/时间的函数或者数字。',
                'example': 'TIME(11',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'HOUR',
            't': 6,
            'd': '以数字格式返回特定时间的小时部分。',
            'a': '以数字格式返回特定时间的小时部分。',
            'm': [1, 1],
            'p': [{
                'name': '时间',
                'detail': '用于计算小时部分的时间。必须为以下值之一：指向包含日期/时间值的单元格的引用、返回日期/时间的函数或者数字。',
                'example': 'TIME(11',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NOW',
            't': 6,
            'd': '以日期值格式返回当前日期和时间。',
            'a': '以日期值格式返回当前日期和时间。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'NETWORKDAYS',
            't': 6,
            'd': '返回所提供的两个日期之间的净工作日天数。',
            'a': '返回所提供的两个日期之间的净工作日天数。',
            'm': [2, 3],
            'p': [{
                'name': 'start_date',
                'detail': '用于计算净工作日天数的时间段开始日期。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'end_date',
                'detail': '用于计算净工作日天数的时间段结束日期。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'holidays',
                'detail': '[可选] - 一个范围或数组常量，其中包含作为节假日的日期序号。\n\n在节假日数组中提供的值必须是日期序号值（例如由N所返回的值）或日期值（例如由DATE、DATEVALUE或TO_DATE返回的值）。由范围指定的值应该是标准的日期值或日期序数值。',
                'example': '16)',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NETWORKDAYS_INTL',
            't': 6,
            'd': '返回给定的两个日期之间的净工作日天数（排除指定的周末和节假日）。',
            'a': '返回给定的两个日期之间的净工作日天数（排除指定的周末和节假日）。',
            'm': [2, 4],
            'p': [{
                'name': 'start_date',
                'detail': '用于计算净工作日天数的时间段开始日期。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'end_date',
                'detail': '用于计算净工作日天数的时间段结束日期。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'weekend',
                'detail': '[可选 - 默认值为1] - 用于表示哪些天为周末的数字或字符串。\n字符串方式：可以使用由0和1组成的字符串来指定周末，串中的第一个数字字符代表周一，最后一个则代表周日。零表示这一天是工作日，1表示这一天为周末。例如，“0000011”表示将周六和周日作为周末。\n数字方式：这种方式不使用上述字符串形式，而是使用一个数字。1 =周六/周日为周末，2 =周日/周一为周末，依此类推则7 =周五/周六。11 =周日为唯一周末，12 =周一为唯一周末，依此类推则17 =周六为唯一周末。',
                'example': '16)',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'holidays',
                'detail': '[ 可选 ] - 这是一个范围或数组常量，其中包含作为节假日的日期。\n在节假日数组内提供的值必须为日期序数值（例如N的返回值）或日期值（例如DATE、DATEVALUE或TO_DATE的返回值）。由范围指定的值应该是标准的日期值或日期序数值。',
                'example': 'DATE(1969',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISOWEEKNUM',
            't': 6,
            'd': '返回给定日期在全年中的 ISO 周数。',
            'a': '返回给定日期在全年中的 ISO 周数。',
            'm': [1, 1],
            'p': [{
                'name': 'date',
                'detail': '用于日期和时间计算的日期-时间代码。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'WEEKNUM',
            't': 6,
            'd': '返回特定日期的周数。',
            'a': '返回特定日期的周数。',
            'm': [1, 2],
            'p': [{
                'name': 'serial_number',
                'detail': '要确定其位于第几周的日期，必须是对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'return_type',
                'detail': '[可选 - 默认值为 1 ] - 代表一周起始日的数字，系统也使用该数字来确定一年的第一周（1=周日，2=周一）。',
                'example': '7',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'WEEKDAY',
            't': 6,
            'd': '返回一个数字，对应于给定日期所在的星期几。',
            'a': '返回一个数字，对应于给定日期所在的星期几。',
            'm': [1, 2],
            'p': [{
                'name': 'serial_number',
                'detail': '要为其确定星期几的日期。必须是对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'return_type',
                'detail': '[可选 - 默认值为 1] - 以数字指示使用哪种编号顺序来表示星期几。默认情况下，按星期日 (= 1) 开始计算。\n\n如果类型为 1，则星期值将从星期日开始算起，并且星期日的值为 1，因此星期六的值就是 7。\n\n如果类型为 2，则星期值将从星期一开始算起，并且星期一的值为 1，因此星期日的值就是 7。\n\n如果类型为 3，则星期值将从星期一算起，并且星期一的值为 0，因此星期日的值就是 6。',
                'example': '7',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DAY',
            't': 6,
            'd': '以数字格式返回特定日期所在的当月几号。',
            'a': '以数字格式返回特定日期所在的当月几号。',
            'm': [1, 1],
            'p': [{
                'name': 'serial_number',
                'detail': '要从中提取具体几号的日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DAYS',
            't': 6,
            'd': '返回两个日期之间的天数。',
            'a': '返回两个日期之间的天数。',
            'm': [2, 2],
            'p': [{
                'name': 'end_date',
                'detail': '计算中要使用的结束日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': '2011-3-15',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_date',
                'detail': '计算中要使用的开始日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': '2011-2-1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DAYS360',
            't': 6,
            'd': '按照每年360天，返回两个日期之间的差（用于计算利息）。',
            'a': '按照每年360天，返回两个日期之间的差（用于计算利息）。',
            'm': [2, 3],
            'p': [{
                'name': 'start_date',
                'detail': '计算中要使用的开始日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'end_date',
                'detail': '计算中要使用的结束日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'method',
                'detail': '[可选 - 默认为FALSE()] - 指示要使用哪种天数计算方法。\n\nFALSE - 采用美国 (NASD) 方法时，如果起始日期为某月的最后一天，为便于计算，会将起始日期的当月几号更改为30。此外，如果结束日期是所在月份的最后一天，而且起始日期在其所在月的30号之前，则将结束日期更改为结束日期之后那个月的第一天，否则将结束日期更改为该月的30号。\n\nTRUE - 采用欧洲方法时，会将所有日期在31号的起始日期或结束日期更改为当月的30号。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DATE',
            't': 6,
            'd': '将提供的年、月、日转换为日期。',
            'a': '将提供的年、月、日转换为日期。',
            'm': [3, 3],
            'p': [{
                'name': 'year',
                'detail': '日期的年份部分，包含一到四位数字。\n\n介于 0（零）到 1899 之间，会将该值与 1900 相加来计算年份；\n\n介于 1900 到 9999 之间，将使用该数值作为年份；\n\n小于 0 或大于等于 10000，返回 错误值 #NUM!。',
                'example': '1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'month',
                'detail': '日期的月份部分，一个正整数或负整数。\n\n如果 month 大于 12，则 month 会将该月份数与指定年中的第一个月相加。\n\n如果 month 小于 1，month 则从指定年份的一月份开始递减该月份数，然后再加上 1 个月。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'day',
                'detail': '日期的日部分，一个正整数或负整数。\n\n如果 day 大于月中指定的天数，则 day 会将天数与该月中的第一天相加。\n\n如果 day 小于 1，则 day 从指定月份的第一天开始递减该天数，然后再加上 1 天。',
                'example': '20',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DATEVALUE',
            't': 6,
            'd': '将提供的日期字符串转换为日期的序列号。',
            'a': '将提供的日期字符串转换为日期的序列号。',
            'm': [1, 1],
            'p': [{
                'name': 'date_text',
                'detail': '表示日期的字符串。',
                'example': '"1969-7-20"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DATEDIF',
            't': 6,
            'd': '计算两个日期之间的天数、月数或年数。',
            'a': '计算两个日期之间的天数、月数或年数。',
            'm': [3, 3],
            'p': [{
                'name': '起始日期',
                'detail': '计算中要使用的开始日期。必须是对包含DATE值的单元格的引用、返回DATE类型的函数或数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '结束日期',
                'detail': '计算中要使用的结束日期。必须是对包含DATE值的单元格的引用、返回DATE类型的函数或数字。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '单位',
                'detail': '时间单位的缩写文字。例如 "M" 代表月。有效值包括："Y"、"M"、"D"、"MD"、"YM" 和 "YD"。\n\n"Y"：返回起始日期和结束日期之间的整年数。\n\n"M"：返回起始日期和结束日期之间的整月数。\n\n"D"：返回起始日期和结束日期之间的天数。\n\n"MD"：返回起始日期和结束日期之间的天数（不计整月数）。\n\n"YM"：返回起始日期和结束日期之间的整月数（不计整年数）。\n\n"YD"：返回起始日期和结束日期之间的天数（假设起始日期和结束日期的间隔不超过一年）。',
                'example': '16)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'WORKDAY',
            't': 6,
            'd': '指定工作日天数，计算结束日期。',
            'a': '指定工作日天数，计算结束日期。',
            'm': [2, 3],
            'p': [{
                'name': 'start_date',
                'detail': '计算的开始日期。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'days',
                'detail': 'start_date 之前或之后不含周末及节假日的天数。\n\n为正值将生成未来日期；\n\n为负值生成过去日期。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'holidays',
                'detail': '[可选] - 一个范围或数组常量，其中包含作为节假日的日期序号。\n\n在节假日数组中提供的值必须是日期序号值（例如由N所返回的值）或日期值（例如由DATE、DATEVALUE或TO_DATE返回的值）。由范围指定的值应该是标准的日期值或日期序数值。',
                'example': '16)',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'WORKDAY_INTL',
            't': 6,
            'd': '返回指定的若干个工作日之前或之后的日期的序列号（使用自定义周末参数）。 ',
            'a': '返回指定的若干个工作日之前或之后的日期的序列号（使用自定义周末参数）。 ',
            'm': [2, 4],
            'p': [{
                'name': 'start_date',
                'detail': '开始日期（将被截尾取整）。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'days',
                'detail': 'start_date 之前或之后的工作日的天数。\n\n正值表示未来日期；\n\n负值表示过去日期；\n\n零值表示开始日期。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'weekend',
                'detail': '[可选 - 默认值为1] - 用于表示哪些天为周末的数字或字符串。\n字符串方式：可以使用由0和1组成的字符串来指定周末，串中的第一个数字字符代表周一，最后一个则代表周日。零表示这一天是工作日，1表示这一天为周末。例如，“0000011”表示将周六和周日作为周末。\n数字方式：这种方式不使用上述字符串形式，而是使用一个数字。1 =周六/周日为周末，2 =周日/周一为周末，依此类推则7 =周五/周六。11 =周日为唯一周末，12 =周一为唯一周末，依此类推则17 =周六为唯一周末。',
                'example': '16)',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'holidays',
                'detail': '[ 可选 ] - 这是一个范围或数组常量，其中包含作为节假日的日期。\n在节假日数组内提供的值必须为日期序数值（例如N的返回值）或日期值（例如DATE、DATEVALUE或TO_DATE的返回值）。由范围指定的值应该是标准的日期值或日期序数值。',
                'example': 'DATE(1969',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'YEAR',
            't': 6,
            'd': '返回对应于某个日期的年份。 Year 作为 1900 - 9999 之间的整数返回。',
            'a': '返回对应于某个日期的年份。 Year 作为 1900 - 9999 之间的整数返回。',
            'm': [1, 1],
            'p': [{
                'name': 'serial_number',
                'detail': '用于计算年份的日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'YEARFRAC',
            't': 6,
            'd': '返回 start_date 和 end_date 之间的天数占全年天数的百分比。',
            'a': '返回 start_date 和 end_date 之间的天数占全年天数的百分比。',
            'm': [2, 3],
            'p': [{
                'name': 'start_date',
                'detail': '计算中要使用的开始日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'end_date',
                'detail': '计算中要使用的结束日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': '7',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 要使用的日计数基准类型。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '16)',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TODAY',
            't': 6,
            'd': '以日期值格式返回当前日期。',
            'a': '以日期值格式返回当前日期。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'MONTH',
            't': 6,
            'd': '返回日期（以序列数表示）中的月份。 月份是介于 1（一月）到 12（十二月）之间的整数。',
            'a': '返回日期（以序列数表示）中的月份。 月份是介于 1（一月）到 12（十二月）之间的整数。',
            'm': [1, 1],
            'p': [{
                'name': 'serial_number',
                'detail': '要从中提取月份的日期。必须是以下一种：对包含日期的单元格的引用、返回日期类型的函数或者数字。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'EFFECT',
            't': 8,
            'd': '根据名义利率及每年的复利计息期数来计算实际年利率。',
            'a': '根据名义利率及每年的复利计息期数来计算实际年利率。',
            'm': [2, 2],
            'p': [{
                'name': 'nominal_rate',
                'detail': '每年的名义利率。',
                'example': '0.99',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'npery',
                'detail': '每年的复利计算期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DOLLAR',
            't': 12,
            'd': '将数字格式设置为与语言区域相对应的货币格式。',
            'a': '将数字格式设置为与语言区域相对应的货币格式。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要设置格式的值。',
                'example': '1.2351',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'decimals',
                'detail': '[可选 - 默认值为 2] - 要显示的小数位数。\n\n如果这是负数，则将数字四舍五入到小数点左侧。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DOLLARDE',
            't': 8,
            'd': '将以整数部分和分数部分转换为以小数部分表示的金额数字',
            'a': '将以整数部分和分数部分转换为以小数部分表示的金额数字',
            'm': [2, 2],
            'p': [{
                'name': 'fractional_dollar',
                'detail': '以整数部份和分数部分表示的数字，用小数点隔开。',
                'example': '100.10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fraction',
                'detail': '用作分数中的分母的整数。',
                'example': '32',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DOLLARFR',
            't': 8,
            'd': '将小数转换为分数表示的金额数字。',
            'a': '将小数转换为分数表示的金额数字。',
            'm': [2, 2],
            'p': [{
                'name': 'decimal_dollar',
                'detail': '小数。',
                'example': '100.125',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fraction',
                'detail': '用作分数中的分母的整数。',
                'example': '32',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DB',
            't': 8,
            'd': '使用固定余额递减法，返回指定期间内某项固定资产的折旧值。',
            'a': '使用固定余额递减法，返回指定期间内某项固定资产的折旧值。',
            'm': [4, 5],
            'p': [{
                'name': 'cost',
                'detail': '资产原值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'salvage',
                'detail': '折旧末尾时的值（有时也称为资产残值）。',
                'example': '50',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'life',
                'detail': '资产的折旧期数（有时也称作资产的使用寿命）。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'period',
                'detail': '在使用期限内要计算折旧的折旧期。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'month',
                'detail': '[可选 - 默认值为12] - 折旧第一年中的月数。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DDB',
            't': 8,
            'd': '用双倍余额递减法，返回指定期间内某项固定资产的折旧值。',
            'a': '用双倍余额递减法，返回指定期间内某项固定资产的折旧值。',
            'm': [4, 5],
            'p': [{
                'name': 'cost',
                'detail': '资产原值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'salvage',
                'detail': '折旧末尾时的值（有时也称为资产残值）。',
                'example': '50',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'life',
                'detail': '资产的折旧期数（有时也称作资产的使用寿命）。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'period',
                'detail': '在使用期限内要计算折旧的折旧期。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'factor',
                'detail': '[可选 - 默认值为2] - 折旧的递减系数。',
                'example': '2.25',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'RATE',
            't': 8,
            'd': '返回年金每期的利率。',
            'a': '返回年金每期的利率。',
            'm': [3, 6],
            'p': [{
                'name': 'nper',
                'detail': '年金的付款总期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pmt',
                'detail': '每期的付款金额，在年金周期内不能更改。',
                'example': '-100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值即一系列未来付款当前值的总和。',
                'example': '400',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选 - 默认值为0] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'guess',
                'detail': '[可选 - 默认值为0.1] - 预期利率。',
                'example': '0.1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CUMPRINC',
            't': 8,
            'd': '基于等额分期付款和固定利率，计算投资在多个付款期内的累计本金偿还额。',
            'a': '基于等额分期付款和固定利率，计算投资在多个付款期内的累计本金偿还额。',
            'm': [6, 6],
            'p': [{
                'name': 'rate',
                'detail': '利率。',
                'example': '0.12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '总付款期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '年金的现值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'start_period',
                'detail': '开始累计计算的付款期序号。\n\n首期必须大于等于1。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'end_period',
                'detail': '结束累计计算的付款期序号。\n\n末期必须大于首期。',
                'example': '5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPNUM',
            't': 8,
            'd': '返回在结算日和到期日之间的付息次数，向上舍入到最近的整数。',
            'a': '返回在结算日和到期日之间的付息次数，向上舍入到最近的整数。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。到期日是有价证券有效期截止时的日期。',
                'example': '02',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SYD',
            't': 8,
            'd': '返回在指定期间内资产按年限总和折旧法计算的折旧。',
            'a': '返回在指定期间内资产按年限总和折旧法计算的折旧。',
            'm': [4, 4],
            'p': [{
                'name': 'cost',
                'detail': '资产原值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'salvage',
                'detail': '折旧末尾时的值（有时也称为资产残值）。',
                'example': '50',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'life',
                'detail': '资产的折旧期数（有时也称作资产的使用寿命）。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'period',
                'detail': '在使用期限内要计算折旧的折旧期。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TBILLEQ',
            't': 8,
            'd': '基于贴现率计算美国政府短期债券的等效年化收益率。',
            'a': '基于贴现率计算美国政府短期债券的等效年化收益率。',
            'm': [3, 3],
            'p': [{
                'name': 'settlement',
                'detail': '债券的结算日期，此日期为债券发行后交付给买家的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '债券的到期或结束日期，届时可将其以面值或票面价值赎回。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'discount',
                'detail': '债券购买时的贴现率。',
                'example': '2)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TBILLYIELD',
            't': 8,
            'd': '基于价格计算美国政府短期债券的收益率。',
            'a': '基于价格计算美国政府短期债券的收益率。',
            'm': [3, 3],
            'p': [{
                'name': 'settlement',
                'detail': '债券的结算日期，此日期为债券发行后交付给买家的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '债券的到期或结束日期，届时可将其以面值或票面价值赎回。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'pr',
                'detail': '债券的购买价格。',
                'example': '95',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TBILLPRICE',
            't': 8,
            'd': '基于贴现率计算美国政府短期债券的价格。',
            'a': '基于贴现率计算美国政府短期债券的价格。',
            'm': [3, 3],
            'p': [{
                'name': 'settlement',
                'detail': '债券的结算日期，此日期为债券发行后交付给买家的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '债券的到期或结束日期，届时可将其以面值或票面价值赎回。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'discount',
                'detail': '债券购买时的贴现率。',
                'example': '0.09',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PV',
            't': 8,
            'd': '基于等额分期付款和固定利率，计算年金投资的现值。',
            'a': '基于等额分期付款和固定利率，计算年金投资的现值。',
            'm': [3, 5],
            'p': [{
                'name': 'rate',
                'detail': '各期利率。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '年金的付款总期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pmt',
                'detail': '每期的付款金额，在年金周期内不能更改。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': 'D2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ACCRINT',
            't': 8,
            'd': '返回定期付息证券的应计利息。',
            'a': '返回定期付息证券的应计利息。',
            'm': [6, 8],
            'p': [{
                'name': 'issue',
                'detail': '有价证券的发行日。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'first_interest',
                'detail': '有价证券的首次计息日。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'rate',
                'detail': '有价证券的年息票利率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'par',
                'detail': '证券的票面值。',
                'example': '10000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示““欧洲30/360”方法” - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'calc_method',
                'detail': '[可选 - 默认为TRUE()] - 一个逻辑值，指定当结算日期晚于首次计息日期时用于计算总应计利息的方法。\n\n如果值为 TRUE，则返回从发行日到结算日的总应计利息。\n\n如果值为 FALSE，则返回从首次计息日到结算日的应计利息。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ACCRINTM',
            't': 8,
            'd': '返回在到期日支付利息的有价证券的应计利息。',
            'a': '返回在到期日支付利息的有价证券的应计利息。',
            'm': [4, 5],
            'p': [{
                'name': 'issue',
                'detail': '有价证券的发行日。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'settlement',
                'detail': '有价证券的到期日。',
                'example': 'DATE(1969',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'rate',
                'detail': '有价证券的年息票利率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'par',
                'detail': '证券的票面值。',
                'example': '1000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPDAYBS',
            't': 8,
            'd': '返回从付息期开始到结算日的天数。',
            'a': '返回从付息期开始到结算日的天数。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPDAYS',
            't': 8,
            'd': '返回结算日所在的付息期的天数。',
            'a': '返回结算日所在的付息期的天数。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPDAYSNC',
            't': 8,
            'd': '返回从结算日到下一票息支付日之间的天数。',
            'a': '返回从结算日到下一票息支付日之间的天数。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPNCD',
            't': 8,
            'd': '计算结算日之后的下一票息或利息派发日期。',
            'a': '计算结算日之后的下一票息或利息派发日期。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '01)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': 'DATE(2019',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COUPPCD',
            't': 8,
            'd': '计算结算日之前的最后一个票息或利息支付日。',
            'a': '计算结算日之前的最后一个票息或利息支付日。',
            'm': [3, 4],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '01)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': 'DATE(2019',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FV',
            't': 8,
            'd': '基于等额分期付款和固定利率，计算年金投资的未来价值。',
            'a': '基于等额分期付款和固定利率，计算年金投资的未来价值。',
            'm': [3, 5],
            'p': [{
                'name': 'rate',
                'detail': '各期利率。',
                'example': '0.12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '年金的付款总期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pmt',
                'detail': '各期所应支付的金额，在整个年金期间保持不变。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '[可选 - 默认值为 0 ] - 现值，或一系列未来付款的当前值的累积和。',
                'example': '400',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为 0 ] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FVSCHEDULE',
            't': 8,
            'd': '返回应用一系列复利率计算的初始本金的未来值。',
            'a': '返回应用一系列复利率计算的初始本金的未来值。',
            'm': [2, 2],
            'p': [{
                'name': 'principal',
                'detail': '现值。',
                'example': '10000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'schedule',
                'detail': '用于计算本金复利的一组利率。\n\n利率表必须是范围或数组，其中包含要用于计算复利的一组利率。这些利率值应该以十进制小数形式表示，或者使用UNARY_PERCENT以百分比形式表示，即表示为0.09或UNARY_PERCENT(9)，而不要表示为9。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'YIELD',
            't': 8,
            'd': '返回定期支付利息的债券的收益率。',
            'a': '返回定期支付利息的债券的收益率。',
            'm': [6, 7],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'rate',
                'detail': '有价证券的年息票利率。',
                'example': '0.057',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pr',
                'detail': '有价证券的价格。',
                'example': '95',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '有价证券的清偿价值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'YIELDDISC',
            't': 8,
            'd': '基于价格计算折价发行的（不带息）债券的年收益率。',
            'a': '基于价格计算折价发行的（不带息）债券的年收益率。',
            'm': [4, 5],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'pr',
                'detail': '有价证券的价格。',
                'example': '95',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '有价证券的清偿价值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NOMINAL',
            't': 8,
            'd': '基于给定的实际利率和年复利期数，返回名义年利率。',
            'a': '基于给定的实际利率和年复利期数，返回名义年利率。',
            'm': [2, 2],
            'p': [{
                'name': 'effect_rate',
                'detail': '每年的实际利率。',
                'example': '0.85',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'npery',
                'detail': '每年的复利期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'XIRR',
            't': 8,
            'd': '返回一组不一定定期发生的现金流的内部收益率。',
            'a': '返回一组不一定定期发生的现金流的内部收益率。',
            'm': [2, 3],
            'p': [{
                'name': 'values',
                'detail': '其中含有投资相关收益或支出的数组或范围。\n\n现金流数额中必须至少包含一项负的和一项正的现金流金额才能计算回报率。',
                'example': 'B2:B25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'dates',
                'detail': '与现金流数额参数中的现金流对应的日期数组或范围。',
                'example': 'C2:C25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'guess',
                'detail': '[可选 - 默认值为0.1] - 对内部回报率的估算值。',
                'example': '250',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MIRR',
            't': 8,
            'd': '返回一系列定期现金流的修改后内部收益率。',
            'a': '返回一系列定期现金流的修改后内部收益率。',
            'm': [3, 3],
            'p': [{
                'name': 'values',
                'detail': '其中含有投资相关收益或支出的数组或范围。\n\n现金流数额中必须至少包含一项负的和一项正的现金流金额才能计算回报率。',
                'example': 'A2:A25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'finance_rate',
                'detail': '现金流中使用的资金支付的利率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'reinvest_rate',
                'detail': '将现金流再投资的收益率。',
                'example': '0.12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'IRR',
            't': 8,
            'd': '返回由值中的数字表示的一系列现金流的内部收益率。 ',
            'a': '返回由值中的数字表示的一系列现金流的内部收益率。 ',
            'm': [1, 2],
            'p': [{
                'name': 'values',
                'detail': '其中含有投资相关收益或支出的数组或范围。\n\n现金流数额中必须至少包含一项负的和一项正的现金流金额才能计算回报率。',
                'example': 'A2:A25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'guess',
                'detail': '[可选 - 默认为 0.1] - 内部收益率的估值。',
                'example': '200',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NPV',
            't': 8,
            'd': '使用贴现率和一系列未来支出（负值）和收益（正值）来计算一项投资的净现值。',
            'a': '使用贴现率和一系列未来支出（负值）和收益（正值）来计算一项投资的净现值。',
            'm': [2, 255],
            'p': [{
                'name': 'rate',
                'detail': '某一期间的贴现率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value1',
                'detail': '第一笔支出（负值）和收益（正值）。',
                'example': '200',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2, ...',
                'detail': '[可选] - 其他支出（负值）和收益（正值）。',
                'example': '250',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'XNPV',
            't': 8,
            'd': '返回一组现金流的净现值，这些现金流不一定定期发生。',
            'a': '返回一组现金流的净现值，这些现金流不一定定期发生。',
            'm': [3, 3],
            'p': [{
                'name': 'rate',
                'detail': '应用于现金流的贴现率。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'values',
                'detail': '与 dates 中的支付时间相对应的一系列现金流。',
                'example': 'B2:B25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'dates',
                'detail': '与现金流支付相对应的支付日期表。',
                'example': 'C2:C25',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'CUMIPMT',
            't': 8,
            'd': '基于等额分期付款和固定利率，计算投资在一系列付款期内的累计利息。',
            'a': '基于等额分期付款和固定利率，计算投资在一系列付款期内的累计利息。',
            'm': [6, 6],
            'p': [{
                'name': 'rate',
                'detail': '利息率。',
                'example': '0.12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '总付款期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'start_period',
                'detail': '开始累计计算的付款期序号。\n\n首期必须大于等于1。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'end_period',
                'detail': '结束累计计算的付款期序号。\n\n末期必须大于首期。',
                'example': '5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '0',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PMT',
            't': 8,
            'd': '用于根据固定付款额和固定利率计算贷款的付款额。',
            'a': '用于根据固定付款额和固定利率计算贷款的付款额。',
            'm': [3, 5],
            'p': [{
                'name': 'rate',
                'detail': '贷款利率。',
                'example': '0.08',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '该项贷款的付款总数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值，或一系列未来付款额现在所值的总额，也叫本金。',
                'example': ' 100000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选 - 默认值为 0] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': 'D2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为 0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'IPMT',
            't': 8,
            'd': '基于固定利率及等额分期付款方式，返回给定期数内对投资的利息偿还额。',
            'a': '基于固定利率及等额分期付款方式，返回给定期数内对投资的利息偿还额。',
            'm': [4, 6],
            'p': [{
                'name': 'rate',
                'detail': '各期利率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'per',
                'detail': '用于计算其利息数额的期数，必须在 1 到 nper 之间。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '年金的付款总期数。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值，或一系列未来付款的当前值的累积和。',
                'example': '80000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选 - 默认值为 0] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': 'E2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为 0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PPMT',
            't': 8,
            'd': '返回根据定期固定付款和固定利率而定的投资在已知期间内的本金偿付额。',
            'a': '返回根据定期固定付款和固定利率而定的投资在已知期间内的本金偿付额。',
            'm': [4, 6],
            'p': [{
                'name': 'rate',
                'detail': '各期利率。',
                'example': '0.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'per',
                'detail': '指定期数，该值必须在 1 到 nper 范围内。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'nper',
                'detail': '年金的付款总期数。',
                'example': '3*12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值即一系列未来付款当前值的总和。',
                'example': '100000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选 - 默认值为 0] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为 0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'INTRATE',
            't': 8,
            'd': '返回完全投资型证券的利率。',
            'a': '返回完全投资型证券的利率。',
            'm': [4, 5],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'investment',
                'detail': '有价证券的投资额。',
                'example': '100000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '有价证券到期时的兑换值。',
                'example': '101200',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PRICE',
            't': 8,
            'd': '返回定期付息的面值 ￥100 的有价证券的价格。',
            'a': '返回定期付息的面值 ￥100 的有价证券的价格。',
            'm': [6, 7],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'rate',
                'detail': '有价证券的年息票利率。',
                'example': '0.057',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'yld',
                'detail': '有价证券的年收益率。',
                'example': '0.065',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '面值 ￥100 的有价证券的清偿价值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PRICEDISC',
            't': 8,
            'd': '返回折价发行的面值 ￥100 的有价证券的价格。',
            'a': '返回折价发行的面值 ￥100 的有价证券的价格。',
            'm': [4, 5],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'discount',
                'detail': '有价证券的贴现率。',
                'example': '0.0525',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '面值 ￥100 的有价证券的清偿价值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'PRICEMAT',
            't': 8,
            'd': '返回到期付息的面值 ￥100 的有价证券的价格。',
            'a': '返回到期付息的面值 ￥100 的有价证券的价格。',
            'm': [5, 6],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'issue',
                'detail': '有价证券的发行日。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'rate',
                'detail': '有价证券在发行日的利率。',
                'example': '0.061',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'yld',
                'detail': '有价证券的年收益率。',
                'example': '0.061',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'RECEIVED',
            't': 8,
            'd': '返回一次性付息的有价证券到期收回的金额。',
            'a': '返回一次性付息的有价证券到期收回的金额。',
            'm': [4, 5],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'investment',
                'detail': '有价证券的投资额。',
                'example': '10000000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'discount',
                'detail': '有价证券的贴现率。',
                'example': '0.0575',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '12',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DISC',
            't': 8,
            'd': '返回有价证券的贴现率。',
            'a': '返回有价证券的贴现率。',
            'm': [4, 5],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'pr',
                'detail': '有价证券的价格（按面值为 ￥100 计算）。',
                'example': '97.975',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'redemption',
                'detail': '面值 ￥100 的有价证券的清偿价值。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '12',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'NPER',
            't': 8,
            'd': '基于固定利率及等额分期付款方式，返回某项投资的总期数。',
            'a': '基于固定利率及等额分期付款方式，返回某项投资的总期数。',
            'm': [3, 5],
            'p': [{
                'name': 'rate',
                'detail': '各期利率。',
                'example': '0.12',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pmt',
                'detail': '各期所应支付的金额，在整个年金期间保持不变。',
                'example': '500',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'pv',
                'detail': '现值，或一系列未来付款的当前值的累积和。',
                'example': '40000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'fv',
                'detail': '[可选 - 默认值为0] - 未来值，或在最后一次付款后希望得到的现金余额。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'type',
                'detail': '[可选 - 默认值为0] - 指定各期的付款时间是在期初还是期末。\n\n0 表示期末；\n\n1 表示期初。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SLN',
            't': 8,
            'd': '返回一个期间内的资产的直线折旧。',
            'a': '返回一个期间内的资产的直线折旧。',
            'm': [3, 3],
            'p': [{
                'name': 'cost',
                'detail': '资产原值。',
                'example': '300000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'salvage',
                'detail': '折旧末尾时的值（有时也称为资产残值）。',
                'example': '75000',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'life',
                'detail': '资产的折旧期数（有时也称作资产的使用寿命）。',
                'example': '10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DURATION',
            't': 8,
            'd': '返回假设面值 ￥100 的定期付息有价证券的修正期限。',
            'a': '返回假设面值 ￥100 的定期付息有价证券的修正期限。',
            'm': [5, 6],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'coupon',
                'detail': '有价证券的年息票利率。',
                'example': '0.08',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'yld',
                'detail': '有价证券的年收益率。',
                'example': '0.09',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MDURATION',
            't': 8,
            'd': '返回假设面值 ￥100 的有价证券的 Macauley 修正期限。',
            'a': '返回假设面值 ￥100 的有价证券的 Macauley 修正期限。',
            'm': [5, 6],
            'p': [{
                'name': 'settlement',
                'detail': '有价证券的结算日。 有价证券结算日是在发行日之后，有价证券卖给购买者的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'maturity',
                'detail': '有价证券的到期日。 到期日是有价证券有效期截止时的日期。',
                'example': 'DATE(2010',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'coupon',
                'detail': '有价证券的年息票利率。',
                'example': '0.08',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'yld',
                'detail': '有价证券的年收益率。',
                'example': '0.09',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'frequency',
                'detail': '年付息次数。\n\n如果按年支付，frequency = 1；\n\n按半年期支付，frequency = 2；\n\n按季支付，frequency = 4。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'basis',
                'detail': '[可选 - 默认为0] - 指示要使用哪种天数计算方法。\n\n0表示“美国(NASD) 30/360”方法 - 此方法按照美国全国证券交易商协会标准，假设每月30天、每年360天，并对所输入的月末日期进行具体调整。\n\n1表示“实际/实际”方法 - 此方法计算基于指定日期之间的实际天数和所涉及的年份中的实际天数进行计算。此方法用于美国长期债券，也是在非财经用途方面使用最多的方法。\n\n2表示“实际/360”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为360天。\n\n3表示“实际/365”方法 - 此方法基于指定日期之间的实际天数进行计算，但假定每年为365天。\n\n4表示“欧洲30/360”方法 - 类似于0，此方法基于每月30天、每年360天进行计算，但按照欧洲金融惯例对月末日期进行调整。',
                'example': '0',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'BIN2DEC',
            't': 9,
            'd': '将二进制数转换为十进制数。',
            'a': '将二进制数转换为十进制数。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '要转换为十进制数的带符号的10位二进制数值（以字符串形式提供）。\n\n带符号的二进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n对于此函数，最大的正数输入值为0111111111，最小的负数输入值为1000000000。\n\n如果所提供的带符号的二进制数是有效的二进制数，会自动将其转换为相应的字符串输入。例如，BIN2DEC(100)和BIN2DEC("100")得出的结果相同，均为4。',
                'example': '101',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'BIN2HEX',
            't': 9,
            'd': '将二进制数转换为十六进制数。',
            'a': '将二进制数转换为十六进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的十六进制数的带符号的10位二进制数值（以字符串形式提供）。\n\n带符号的二进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n对于此函数，最大的正数输入值为0111111111，最小的负数输入值为1000000000。\n\n如果所提供的带符号的二进制数是有效的二进制数，会自动将其转换为相应的字符串输入。例如，BIN2HEX(11111)和BIN2HEX("11111")得出 的结果相同，均为1F。',
                'example': '101',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。例如，BIN2HEX("11111",8)所得的结果值为0000001F。\n\n如果带符号的二进制数的最高位为1，则忽略此值；即当提供的带符号的二进制数大于等于1000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'BIN2OCT',
            't': 9,
            'd': '将二进制数转换为八进制数。',
            'a': '将二进制数转换为八进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的八进制数的带符号的10位二进制数值（以字符串形式提供）。\n\n带符号的二进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n对于此函数，最大的正数输入值为0111111111，最小的负数输入值为1000000000。\n\n如果所提供的带符号的二进制数是有效的二进制数，会自动将其转换为相应的字符串输入。例如，BIN2OCT(11111)和BIN2OCT("11111")得出的结果相同，均为37。',
                'example': '101',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。例如，BIN2OCT("11111")得到的结果值为00000037。\n\n如果带符号的二进制数的最高位为1，则忽略此值；即当提供的带符号的二进制数大于等于1000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DEC2BIN',
            't': 9,
            'd': '将十进制数转换为二进制数。',
            'a': '将十进制数转换为二进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的二进制数的十进制数值（以字符串形式提供）。\n\n对于此函数，最大的正数输入值为511，最小的负数输入值为-512。\n\n如果所提供的十进制数是有效的十进制数，会自动将其转换为相应的字符串输入。例如，DEC2BIN(199)和DEC2BIN("199")得出的结果相同，均为11000111。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果十进制数为负数，则忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DEC2HEX',
            't': 9,
            'd': '将十进制数转换为十六进制数。',
            'a': '将十进制数转换为十六进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的十六进制数的十进制数值（以字符串形式提供）。\n\n此函数可接受的最大正数值为549755813887，最小负数值为-549755814888。\n\n如果所提供的十进制数是有效的十进制数，会自动将其转换为相应的字符串输入。例如，DEC2HEX(100)和DEC2HEX("100")得出的结果相同，均为64。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果十进制数为负数，则忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DEC2OCT',
            't': 9,
            'd': '将十进制数转换为八进制数。',
            'a': '将十进制数转换为八进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的八进制数的十进制数值（以字符串形式提供）。\n\n此函数可接受的最大正数值为536870911，最小负数值为-53687092。\n\n如果所提供的十进制数是有效的十进制数，会自动将其转换为相应的字符串输入。例如，DEC2OCT(199)和DEC2OCT("199")得出的结果相同，均为307。',
                'example': '100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果十进制数为负数，则忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'HEX2BIN',
            't': 9,
            'd': '将十六进制数转换为二进制数。',
            'a': '将十六进制数转换为二进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的二进制数的带符号的40位十六进制数值（以字符串形式提供）。\n\n带符号的十六进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为1FF，最小负数值为FFFFFFFE00。\n\n如果所提供的带符号的十六进制数是有效的十六进制数，函数会自动将其转换为相应的字符串输入。例如，HEX2BIN(199)和HEX2BIN("199")得出的结果相同，均为110011001。',
                'example': '"f3"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果带符号的十六进制数的最高位为1，则忽略此值；即当提供的带符号的十六进制数大于等于8000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'HEX2DEC',
            't': 9,
            'd': '将十六进制数转换为十进制数。',
            'a': '将十六进制数转换为十进制数。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '要转换为十进制数的带符号的40位十六进制数值（以字符串形式提供）。\n\n带符号的十六进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为7fffffffff，最小负数值为8000000000。\n\n如果所提供的带符号的十六进制数是有效的十六进制数，函数会自动将其转换为相应的字符串输入。例如，HEX2DEC(199)和HEX2DEC("199")得出的结果相同，均为409。',
                'example': '"f3"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'HEX2OCT',
            't': 9,
            'd': '将十六进制数转换为八进制数。',
            'a': '将十六进制数转换为八进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的八进制数的带符号的40位十六进制数值（以字符串形式提供）。\n\n带符号的十六进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为1FFFFFFF，最小负数值为FFE0000000。\n\n如果所提供的带符号的十六进制数是有效的十六进制数，函数会自动将其转换为相应的字符串输入。例如，HEX2OCT(199)和HEX2OCT("199")得出的结果相同，均为631。',
                'example': '"f3"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果带符号的十六进制数的最高位为1，则忽略此值；即当给定的带符号的十六进制数大于等于8000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'OCT2BIN',
            't': 9,
            'd': '将八进制数转换为二进制数。',
            'a': '将八进制数转换为二进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的二进制数的带符号的30位八进制数值（以字符串形式提供）。\n\n带符号的八进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为777，最小负数值为7777777000。\n\n如果所提供的带符号的八进制数是有效的八进制数，函数会自动将其转换为相应的字符串输入。例如，OCT2BIN(177)和OCT2BIN("177")得出的结果相同，均为1111111。',
                'example': '37',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果带符号的八进制数的最高位为1，则忽略此值；即当给定的带符号的八进制数大于等于4000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'OCT2DEC',
            't': 9,
            'd': '将八进制数转换为十进制数。',
            'a': '将八进制数转换为十进制数。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '要转换为十进制数的带符号的30位八进制数值（以字符串形式提供）。\n\n带符号的ba进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为3777777777，最小负数值为4000000000。\n\n如果所提供的带符号的八进制数是有效的八进制数，函数会自动将其转换为相应的字符串输入。例如，OCT2DEC(177)和OCT2DEC("177")得出的结果相同，均为127。',
                'example': '37',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'OCT2HEX',
            't': 9,
            'd': '将八进制数转换为十六进制数。',
            'a': '将八进制数转换为十六进制数。',
            'm': [1, 2],
            'p': [{
                'name': 'number',
                'detail': '要转换为带符号的十六进制数的带符号的30位八进制数值（以字符串形式提供）。\n\n带符号的ba进制数的最高位是符号位；也就是说，负数是以二的补码形式表示的。\n\n此函数可接受的最大正数值为3777777777，最小负数值为4000000000。\n\n如果所提供的带符号的八进制数是有效的八进制数，函数会自动将其转换为相应的字符串输入。例如，OCT2HEX(177)和OCT2HEX("177")得出的结果相同，均为7F。',
                'example': '37',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'places',
                'detail': '[ 可选 ] - 结果中要确保的有效位数。\n\n如果设置的有效位数大于结果中的有效位数，则在结果的左侧填充0，使总有效位数达到有效位数。\n\n如果带符号的八进制数的最高位为1，则忽略此值；即当给定的带符号的八进制数大于等于4000000000时忽略此值。',
                'example': '8',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'COMPLEX',
            't': 9,
            'd': '将实系数及虚系数转换为 x+yi 或 x+yj 形式的复数。',
            'a': '将实系数及虚系数转换为 x+yi 或 x+yj 形式的复数。',
            'm': [2, 3],
            'p': [{
                'name': 'real_num',
                'detail': '复数的实系数。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'i_num',
                'detail': '复数的虚系数。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'suffix',
                'detail': '[可选 - 默认为 "i"] - 复数中虚系数的后缀。',
                'example': '"j"',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangestring'
            }]
        }, {
            'n': 'IMREAL',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的复数的实系数。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的复数的实系数。',
            'm': [1, 1],
            'p': [{
                'name': 'inumber',
                'detail': '需要计算其实系数的复数。',
                'example': '"4+5i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMAGINARY',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的复数的虚系数。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的复数的虚系数。',
            'm': [1, 1],
            'p': [{
                'name': 'inumber',
                'detail': '需要计算其虚系数的复数。',
                'example': '"4+5i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMCONJUGATE',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的复数的共轭复数。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的复数的共轭复数。',
            'm': [1, 1],
            'p': [{
                'name': 'inumber',
                'detail': '需要计算其共轭数的复数。',
                'example': '"3+4i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMABS',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的复数的绝对值（模）。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的复数的绝对值（模）。',
            'm': [1, 1],
            'p': [{
                'name': 'inumber',
                'detail': '要计算其绝对值的复数。',
                'example': '"3+4i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'DELTA',
            't': 9,
            'd': '检验两个值是否相等。 如果 number1=number2，则返回 1；否则返回 0。',
            'a': '检验两个值是否相等。 如果 number1=number2，则返回 1；否则返回 0。',
            'm': [1, 2],
            'p': [{
                'name': 'number1',
                'detail': '第一个数字。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'number2',
                'detail': '[可选 - 默认为 0] - 第二个数字。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'IMSUM',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的和。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的和。',
            'm': [1, 255],
            'p': [{
                'name': 'inumber1',
                'detail': '要相加的第一个复数',
                'example': '"3+4i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'inumber2, …',
                'detail': '[可选] - 要与值1 相加的其他复数',
                'example': '"5-3i"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMSUB',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的两个复数的差。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的两个复数的差。',
            'm': [2, 2],
            'p': [{
                'name': 'inumber1',
                'detail': '从（复）数中减去 inumber2。',
                'example': '"6+5i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'inumber2',
                'detail': '从 inumber1 中减（复）数。',
                'example': '"2+3i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMPRODUCT',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的乘积。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的 1 至 255 个复数的乘积。',
            'm': [1, 255],
            'p': [{
                'name': 'inumber1',
                'detail': '用于计算乘积的第一个复数',
                'example': '"3+4i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'inumber2, …',
                'detail': '[可选] - 要相乘的其他复数。',
                'example': '"5-3i"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IMDIV',
            't': 9,
            'd': '返回以 x+yi 或 x+yj 文本格式表示的两个复数的商。',
            'a': '返回以 x+yi 或 x+yj 文本格式表示的两个复数的商。',
            'm': [2, 2],
            'p': [{
                'name': 'inumber1',
                'detail': '复数分子或被除数。',
                'example': '"11+16i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'inumber2',
                'detail': '复数分母或除数。',
                'example': '"3+2i"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NOT',
            't': 10,
            'd': '返回某个逻辑值的相反值 - “NOT(TRUE())”将返回 FALSE；“NOT(FALSE())”将返回 TRUE。',
            'a': '返回某个逻辑值的相反值 - “NOT(TRUE())”将返回 FALSE；“NOT(FALSE())”将返回 TRUE。',
            'm': [1, 1],
            'p': [{
                'name': 'logical',
                'detail': '计算结果为 TRUE 或 FALSE 的任何值或表达式。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TRUE',
            't': 10,
            'd': '返回逻辑值 TRUE。',
            'a': '返回逻辑值 TRUE。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'FALSE',
            't': 10,
            'd': '返回逻辑值 FALSE。',
            'a': '返回逻辑值 FALSE。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'AND',
            't': 10,
            'd': '所有参数的计算结果为 TRUE 时，返回 TRUE；只要有一个参数的计算结果为 FALSE，即返回 FALSE。',
            'a': '所有参数的计算结果为 TRUE 时，返回 TRUE；只要有一个参数的计算结果为 FALSE，即返回 FALSE。',
            'm': [1, 255],
            'p': [{
                'name': 'logical1',
                'detail': '要测试的第一个条件，其计算结果可以为 TRUE 或 FALSE。',
                'example': 'A2 = "foo"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'logical2,...',
                'detail': '[可选] - 要测试的其他条件，其计算结果可以为 TRUE 或 FALSE，最多可包含 255 个条件。',
                'example': 'A3 = "bar"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IFERROR',
            't': 10,
            'd': '如果第一个参数不是错误值，就返回第一个参数；否则，返回第二个参数。',
            'a': '如果第一个参数不是错误值',
            'm': [2, 2],
            'p': [{
                'name': 'value',
                'detail': '检查是否存在错误的参数。',
                'example': 'A1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value_if_error',
                'detail': '公式的计算结果错误时返回的值。 计算以下错误类型：#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME? 或 #NULL!。',
                'example': '"Error in cell A1"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'IF',
            't': 10,
            'd': '当逻辑表达式的值为 TRUE 时返回一个值，而当其为 FALSE 时返回另一个值。',
            'a': '当逻辑表达式的值为 TRUE 时返回一个值，而当其为 FALSE 时返回另一个值。',
            'm': [2, 3],
            'p': [{
                'name': 'logical_test',
                'detail': '一个表达式或对包含表达式的单元格的引用，该表达式代表某种逻辑值（即TRUE或FALSE）。',
                'example': 'A2 = "foo"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value_if_true',
                'detail': '当逻辑表达式为TRUE时的返回值。',
                'example': '"A2 is foo"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value_if_false',
                'detail': '[可选 - 默认为空白] - 当逻辑表达式等于FALSE时的函数返回值。',
                'example': '"A2 was false"',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'OR',
            't': 10,
            'd': '只要有一个参数的计算结果为 TRUE 时，返回 TRUE；所有参数的计算结果为 FALSE，即返回 FALSE。',
            'a': '只要有一个参数的计算结果为 TRUE 时，返回 TRUE；所有参数的计算结果为 FALSE，即返回 FALSE。',
            'm': [1, 255],
            'p': [{
                'name': 'logical1',
                'detail': '要测试的第一个条件，其计算结果可以为 TRUE 或 FALSE。',
                'example': 'A2 = "foo"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': '逻辑表达式2',
                'detail': '[可选] - 其他表达式或对包含表达式的单元格的引用，这些表达式代表某种逻辑值（即TRUE或FALSE）或者可以强制转换为逻辑值。',
                'example': ' A3 = "bar"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'NE',
            't': 11,
            'd': '如果指定的值不相等，则返回“TRUE”；否则返回“FALSE”。相当于“<>”运算符。',
            'a': '如果指定的值不相等，则返回“TRUE”；否则返回“FALSE”。相当于“<>”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '第一个值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '要检查是否与 value1 不相等的值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'EQ',
            't': 11,
            'd': '如果指定的值相等，则返回“TRUE”；否则返回“FALSE”。相当于“=”运算符。',
            'a': '如果指定的值相等，则返回“TRUE”；否则返回“FALSE”。相当于“=”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '第一个值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '要检查是否与 value1 相等的值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'GT',
            't': 11,
            'd': '如果第一个参数严格大于第二个，则返回 TRUE；否则返回 FALSE。相当于“>”运算符。',
            'a': '如果第一个参数严格大于第二个，则返回 TRUE；否则返回 FALSE。相当于“>”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '要测试其是否大于 value2 的值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '第二个值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'GTE',
            't': 11,
            'd': '如果第一个参数大于或等于第二个，则返回 TRUE；否则返回 FALSE。相当于“>=”运算符。',
            'a': '如果第一个参数大于或等于第二个，则返回 TRUE；否则返回 FALSE。相当于“>=”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '要测试其是否大于等于 value2 的值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '第二个值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LT',
            't': 11,
            'd': '如果第一个参数严格小于第二个，则返回 TRUE；否则返回 FALSE。相当于“<”运算符。',
            'a': '如果第一个参数严格小于第二个，则返回 TRUE；否则返回 FALSE。相当于“<”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '要测试其是否小于 value2 的值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '第二个值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LTE',
            't': 11,
            'd': '如果第一个参数小于或等于第二个，则返回 TRUE；否则返回 FALSE。相当于“<=”运算符。',
            'a': '如果第一个参数小于或等于第二个，则返回 TRUE；否则返回 FALSE。相当于“<=”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '要测试其是否小于等于 value2 的值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '第二个值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ADD',
            't': 11,
            'd': '返回两个数值之和。相当于 `+` 运算符。',
            'a': '返回两个数值之和。相当于 `+` 运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '第一个加数。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value2',
                'detail': '第二个加数。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MINUS',
            't': 11,
            'd': '返回两个数值之差。相当于“-”运算符。',
            'a': '返回两个数值之差。相当于“-”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '被减数，即要对其计减的数值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value2',
                'detail': '减数，即要从 value1 中减除的数值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MULTIPLY',
            't': 11,
            'd': '返回两个数的乘积。相当于“*”运算符。',
            'a': '返回两个数的乘积。相当于“*”运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '第一个乘数。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value2',
                'detail': '第二个乘数。',
                'example': 'B2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DIVIDE',
            't': 11,
            'd': '返回两个参数相除所得的结果。相当于 `/` 运算符。',
            'a': '返回两个参数相除所得的结果。相当于 `/` 运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': '要被除的数值。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'value2',
                'detail': '用于除其他数的数值。\n\n除数不得为0。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CONCAT',
            't': 11,
            'd': '返回两个值的串联。相当于 `&` 运算符。',
            'a': '返回两个值的串联。相当于 `&` 运算符。',
            'm': [2, 2],
            'p': [{
                'name': 'value1',
                'detail': 'value2 将附于其后的值。',
                'example': '"de"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'value2',
                'detail': '要附于 value1 之后的值。',
                'example': '"mystify"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'UNARY_PERCENT',
            't': 11,
            'd': '返回按百分比解释的数值。例如，“UNARY_PERCENT(100)”等于1。',
            'a': '返回按百分比解释的数值。例如，“UNARY_PERCENT(100)”等于1。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '要作为百分比解释的数值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CONCATENATE',
            't': 12,
            'd': '将两个或多个文本字符串联接为一个字符串。',
            'a': '将两个或多个文本字符串联接为一个字符串。',
            'm': [1, 255],
            'p': [{
                'name': 'text1',
                'detail': '初始字符串。',
                'example': '"Super"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'text2 ...',
                'detail': '[可选] - 要按顺序连接在一起的其他字符串。',
                'example': '"calla"',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'CODE',
            't': 12,
            'd': '返回所提供的字符串中首字符的 Unicode 映射值。',
            'a': '返回所提供的字符串中首字符的 Unicode 映射值。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要返回其首字符的Unicode映射值的字符串。',
                'example': '"a"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'CHAR',
            't': 12,
            'd': '按照当前 Unicode 编码表，将数字转换为对应的字符。',
            'a': '按照当前 Unicode 编码表，将数字转换为对应的字符。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '介于 1 到 255 之间的数字。',
                'example': '97',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ARABIC',
            't': 12,
            'd': '将罗马数字转换为阿拉伯数字。',
            'a': '将罗马数字转换为阿拉伯数字。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要转换格式的罗马数字',
                'example': '"XIV"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ROMAN',
            't': 12,
            'd': '将数字格式设置为罗马数字形式。',
            'a': '将数字格式设置为罗马数字形式。',
            'm': [1, 1],
            'p': [{
                'name': 'number',
                'detail': '要设置格式的数字，介于1到3999之间（包括这两个数字）。',
                'example': '499',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'REGEXEXTRACT',
            't': 12,
            'd': '按照正则表达式提取匹配的子串。',
            'a': '按照正则表达式提取匹配的子串。',
            'm': [2, 2],
            'p': [{
                'name': 'text',
                'detail': '输入文本。',
                'example': '"Needle in a haystack"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'regular_expression',
                'detail': '此函数将返回文本中符合此表达式的第一个子串。',
                'example': '".e{2}dle"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'REGEXMATCH',
            't': 12,
            'd': '判断一段文本是否与正则表达式相匹配。',
            'a': '判断一段文本是否与正则表达式相匹配。',
            'm': [2, 2],
            'p': [{
                'name': 'text',
                'detail': '要用正则表达式测试的文本。',
                'example': '"Spreadsheets"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'regular_expression',
                'detail': '用来测试文本的正则表达式。',
                'example': '"S.r"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'REGEXREPLACE',
            't': 12,
            'd': '使用正则表达式将文本字符串中的一部分替换为其他文本字符串。',
            'a': '使用正则表达式将文本字符串中的一部分替换为其他文本字符串。',
            'm': [3, 3],
            'p': [{
                'name': 'text',
                'detail': '要对其局部进行替换操作的文本。',
                'example': '"Spreadsheets"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'regular_expression',
                'detail': '正则表达式。 text 中所有匹配的实例都将被替换。',
                'example': '"S.*d"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'replacement',
                'detail': '要插入到原有文本中的文本。',
                'example': '"Bed"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'T',
            't': 12,
            'd': '返回文本格式的字符串参数。',
            'a': '返回文本格式的字符串参数。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为文本的参数。\n\n如果值为文本，T将返回值本身。\n\n如果值为指向包含文本的单元格的引用，T将返回值中的内容。\n\n如果值为错误值或包含错误值的单元格，T将返回该错误值。\n\n对于所有其他情况，T将返回空串。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'FIXED',
            't': 12,
            'd': '以固定的小数位数设置数字的格式。',
            'a': '以固定的小数位数设置数字的格式。',
            'm': [1, 3],
            'p': [{
                'name': 'number',
                'detail': '要进行舍入并转换为文本的数字。',
                'example': '3.141592653',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'decimals',
                'detail': '[可选 - 默认值为2] - 结果中要显示的小数位数。\n\n如果数值的有效位数小于小数位数，将以零填充。如果数值的有效位数大于小数位数，则将其舍入到所需的小数位数而不是将其截断。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'no_commas',
                'detail': '[可选 - 默认值为FALSE()] - 一个逻辑值，如果为 TRUE()，则会禁止 FIXED 在返回的文本中包含逗号。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'FIND',
            't': 12,
            'd': '返回字符串在文本中首次出现的位置（区分大小写）。',
            'a': '返回字符串在文本中首次出现的位置（区分大小写）。',
            'm': [2, 3],
            'p': [{
                'name': 'find_text',
                'detail': '要在要搜索的文本中查找的字符串。',
                'example': '"n"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'within_text',
                'detail': '要在其中搜索搜索字符串的首次出现位置的文本。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_num',
                'detail': '[可选 - 默认值为1] - 要在要搜索的文本中开始搜索的字符位置。',
                'example': '14',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'FINDB',
            't': 12,
            'd': '返回某个字符串在文本中首次出现的位置（每个双字节字符占两个位置）。',
            'a': '返回某个字符串在文本中首次出现的位置（每个双字节字符占两个位置）。',
            'm': [2, 3],
            'p': [{
                'name': 'find_text',
                'detail': '要在要搜索的文本中查找的字符串。',
                'example': '"新"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'within_text',
                'detail': '要在其中搜索搜索字符串的首次出现位置的文本。',
                'example': '"农历新年"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_num',
                'detail': '[可选 - 默认值为 1] - 要在要搜索的文本中开始搜索的字符位置。',
                'example': '2',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'JOIN',
            't': 12,
            'd': '将一个或多个使用指定定界符的一维数组的元素连接到一起。',
            'a': '将一个或多个使用指定定界符的一维数组的元素连接到一起。',
            'm': [2, 255],
            'p': [{
                'name': 'separator',
                'detail': '置于相互连接的值之间的字符或字符串。\n\n定界符可以为空，例如JOIN(,{1,2,3})。',
                'example': '" and-a "',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'array1',
                'detail': '要使用定界符连接的一个或多个值。',
                'example': '{1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'array2, ...',
                'detail': '[可选] - 要使用定界符连接的其他值或数组。',
                'example': '2',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LEFT',
            't': 12,
            'd': '从文本字符串的第一个字符开始返回指定个数的字符。',
            'a': '从文本字符串的第一个字符开始返回指定个数的字符。',
            'm': [1, 2],
            'p': [{
                'name': 'text',
                'detail': '包含要提取的字符的文本字符串。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'num_chars',
                'detail': '[可选 - 默认值为1] - 指定要由 LEFT 提取的字符的数量。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'RIGHT',
            't': 12,
            'd': '根据所指定的字符数返回文本字符串中最后一个或多个字符。',
            'a': '根据所指定的字符数返回文本字符串中最后一个或多个字符。',
            'm': [1, 2],
            'p': [{
                'name': 'text',
                'detail': '包含要提取的字符的文本字符串。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'num_chars',
                'detail': '[可选 - 默认值为1] - 指定要由 RIGHT 提取的字符的数量。',
                'example': '2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MID',
            't': 12,
            'd': '返回文本字符串中从指定位置开始的特定数目的字符。',
            'a': '返回文本字符串中从指定位置开始的特定数目的字符。',
            'm': [3, 3],
            'p': [{
                'name': 'text',
                'detail': '包含要提取的字符的文本字符串。',
                'example': '"get this"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_num',
                'detail': '要从字符串中开始提取的位置。字符串中第一个字符的索引为1。',
                'example': '5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'num_chars',
                'detail': '指定要由 MID 提取的字符的数量。\n\n如果提取的字符数尚不足提取长度个字符时就到达了字符串尾部，则MID返回从开始位置到字符串尾部的字符。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'LEN',
            't': 12,
            'd': '返回给定字符串的长度。',
            'a': '返回给定字符串的长度。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要返回其长度的字符串。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LENB',
            't': 12,
            'd': '返回文本中所包含的字符数。与双字节字符集(DBCS)一起使用。',
            'a': '返回文本中所包含的字符数。与双字节字符集(DBCS)一起使用。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要返回其字节数的字符串。（一个汉字为两个字节数）',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LOWER',
            't': 12,
            'd': '将指定字符串中的字母转换为小写。',
            'a': '将指定字符串中的字母转换为小写。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要转换为小写的字符串。',
                'example': '"LOREM IPSUM"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'UPPER',
            't': 12,
            'd': '将指定字符串中的字母转换为大写。',
            'a': '将指定字符串中的字母转换为大写。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要转换为大写的字符串。',
                'example': '"lorem ipsum"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'EXACT',
            't': 12,
            'd': '比较两个字符串是否相同。',
            'a': '比较两个字符串是否相同。',
            'm': [2, 2],
            'p': [{
                'name': 'text1',
                'detail': '要比较的第一个字符串。',
                'example': 'A1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'text2',
                'detail': '要比较的第二个字符串。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'REPLACE',
            't': 12,
            'd': '将文本字符串的一部分替换为其他文本字符串。',
            'a': '将文本字符串的一部分替换为其他文本字符串。',
            'm': [4, 4],
            'p': [{
                'name': 'old_text',
                'detail': '要对其局部进行替换操作的文本。',
                'example': '"Spreadsheets"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_num',
                'detail': '开始进行替换操作的位置（文本开头位置为 1）。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'num_chars',
                'detail': '要在文本中替换的字符个数。',
                'example': '6',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'new_text',
                'detail': '要插入到原有文本中的文本。',
                'example': '"Bed"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'REPT',
            't': 12,
            'd': '返回指定文本的多次重复。',
            'a': '返回指定文本的多次重复。',
            'm': [2, 2],
            'p': [{
                'name': 'text',
                'detail': '要重复的字符或字符串。',
                'example': '"ha"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'number_times',
                'detail': '要重复的文本要在返回值中出现的次数。\n\n最大重复次数为100。即使重复次数大于100，REPT也仅将相应文本重复100次。',
                'example': '4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SEARCH',
            't': 12,
            'd': '返回字符串在文本中首次出现的位置（不区分大小写）。',
            'a': '返回字符串在文本中首次出现的位置（不区分大小写）。',
            'm': [2, 3],
            'p': [{
                'name': 'find_text',
                'detail': '要在要搜索的文本中查找的字符串。',
                'example': '"n"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'within_text',
                'detail': '要在其中搜索搜索字符串的首次出现位置的文本。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'start_num',
                'detail': '[ 可选 - 默认值为1 ] - 要在要搜索的文本中开始搜索的字符位置。',
                'example': '14',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUBSTITUTE',
            't': 12,
            'd': '在文本字符串中用 new_text 替换 old_text。',
            'a': '在文本字符串中用 new_text 替换 old_text。',
            'm': [3, 4],
            'p': [{
                'name': 'text',
                'detail': '需要替换其中字符的文本，或对含有文本（需要替换其中字符）的单元格的引用。',
                'example': '"search for it"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'old_text',
                'detail': '需要替换的文本。',
                'example': '"search for"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'new_text',
                'detail': '用于替换 old_text 的文本。',
                'example': '"Google"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'instance_num',
                'detail': '[ 可选 ] - 指定要用 new_text 替换 old_text 的事件。 如果指定了 instance_num，则只有满足要求的 old_text 被替换。 否则，文本中出现的所有 old_text 都会更改为 new_text。',
                'example': '3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'CLEAN',
            't': 12,
            'd': '移除文本中的不可打印 ASCII 字符后将其返回。',
            'a': '移除文本中的不可打印 ASCII 字符后将其返回。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要移除其中不可打印字符的文本。',
                'example': '"AF"&CHAR(31)',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TEXT',
            't': 12,
            'd': '按照指定格式将数字转换为文本。',
            'a': '按照指定格式将数字转换为文本。',
            'm': [2, 2],
            'p': [{
                'name': 'value',
                'detail': '要设置格式的数字、日期或时间。',
                'example': '1.23',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'format_text',
                'detail': '以括号括起来的模式串，将按该模式设置数字的格式。\n\n0表示在数值位数少于格式指定的位数时必定以零填充。例如，TEXT(12.3,"000.00")将返回012.30。当数值的小数位数超过模式指定的小数位数时，四舍五入为指定的小数位数。例如，TEXT(12.305,"00.00")将返回12.31。\n\n#类似于0，但并不是在小数点的两侧都以零填充。例如，TEXT(12.3,"###.##")将返回12.3。',
                'example': '"$0.00"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TRIM',
            't': 12,
            'd': '删除指定字符串前后的空格。',
            'a': '删除指定字符串前后的空格。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要修剪的字符串或指向包含该字符串的单元格的引用。',
                'example': '" lorem ipsum"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'VALUE',
            't': 12,
            'd': '将可识别的任何日期、时间或数字格式的字符串转换为数字。',
            'a': '将可识别的任何日期、时间或数字格式的字符串转换为数字。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '包含要转换的值的字符串。',
                'example': '"123"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'PROPER',
            't': 12,
            'd': '将指定字符串中每个单词的首字母转为大写。',
            'a': '将指定字符串中每个单词的首字母转为大写。',
            'm': [1, 1],
            'p': [{
                'name': 'text',
                'detail': '要转换的文本，其中每个单词的首字母都将转为大写，所有其他字母则转为小写。',
                'example': '"united states"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'CONVERT',
            't': 13,
            'd': '将数字从一种度量系统转换为另一种度量系统。',
            'a': '将数字从一种度量系统转换为另一种度量系统。',
            'm': [3, 3],
            'p': [{
                'name': 'number',
                'detail': '是以 from_unit 为单位的需要进行转换的数值。',
                'example': '5.1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'from_unit',
                'detail': '是数值的单位。',
                'example': '"g"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'to_unit',
                'detail': '是结果的单位。',
                'example': '"kg"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'SUMX2MY2',
            't': 14,
            'd': '返回两数组中对应数值的平方差之和。',
            'a': '返回两数组中对应数值的平方差之和。',
            'm': [2, 2],
            'p': [{
                'name': 'array_x',
                'detail': '第一个数组或数值区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array_y',
                'detail': '第二个数组或数值区域。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUMX2PY2',
            't': 14,
            'd': '返回两数组中对应数值的平方和之和。',
            'a': '返回两数组中对应数值的平方和之和。',
            'm': [2, 2],
            'p': [{
                'name': 'array_x',
                'detail': '第一个数组或数值区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array_y',
                'detail': '第二个数组或数值区域。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUMXMY2',
            't': 14,
            'd': '返回两数组中对应数值之差的平方和。',
            'a': '返回两数组中对应数值之差的平方和。',
            'm': [2, 2],
            'p': [{
                'name': 'array_x',
                'detail': '第一个数组或数值区域。',
                'example': 'A2:A100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array_y',
                'detail': '第二个数组或数值区域。',
                'example': 'B2:B100',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TRANSPOSE',
            't': 14,
            'd': '将数组或单元格范围的行列转置。',
            'a': '将数组或单元格范围的行列转置。',
            'm': [1, 1],
            'p': [{
                'name': 'array',
                'detail': '要将其行列互换的数组或范围。',
                'example': '{1,2}',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'TREND',
            't': 14,
            'd': '返回线性趋势值。',
            'a': '返回线性趋势值。',
            'm': [1, 4],
            'p': [{
                'name': 'known_y',
                'detail': '关系表达式 y = mx + b 中已知的 y 值集合。\n\n如果 known_y 为二维数组或范围，则 known_x 的维数必须与之相同，或者省略此参数。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'B2:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'known_x',
                'detail': '[可选 - 默认该数组为{1,2,3,...},其大小与 known_y 相同] - 关系表达式 y = mx + b 中已知的可选 x 值集合。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'A2:A10',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'new_x',
                'detail': '[可选 - 默认与 known_x 相同] -  需要函数 TREND 返回对应 y 值的新 x 值。',
                'example': 'A11:A13',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'const',
                'detail': '[可选 - 默认值为TRUE()] - 一个逻辑值，用于指定是否将常量 b 强制设为 0。\n\nTRUE() 表示 b 将按正常计算；\n\nFALSE() 表示 b 将被设为 0（零），m 将被调整以使 y = mx。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'FREQUENCY',
            't': 14,
            'd': '计算数值在某个区域内的出现频率，然后返回一个垂直数组。',
            'a': '计算数值在某个区域内的出现频率，然后返回一个垂直数组。',
            'm': [2, 2],
            'p': [{
                'name': 'data_array',
                'detail': '要对其频率进行计数的一组数值或对这组数值的引用。',
                'example': 'A2:A40',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'bins_array',
                'detail': '要将 data_array 中的值插入到的间隔数组或对间隔的引用。\n\n为清晰起见，应将类别排序，但如果未排序，FREQUENCY会在内部对这些指定的值进行排序并返回正确结果。',
                'example': 'B2:B5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'GROWTH',
            't': 14,
            'd': '使用现有数据计算预测的指数等比。',
            'a': '使用现有数据计算预测的指数等比。',
            'm': [1, 4],
            'p': [{
                'name': 'known_y',
                'detail': '关系表达式 y = b*m^x 中已知的 y 值集合。\n\n如果已知数据_y为二维数组或范围，则已知数据_x的维数必须与之相同，或者省略此参数。\n\n如果已知数据_y为一维数组或范围，已知数据_x则可代表二维数组或范围中的多个自变量。也就是说，如果已知数据_y为单行，则将已知数据_x中的每行解释为各自独立的值，类似情况也适用于已知数据_y为单列的情况。',
                'example': 'B2:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'known_x',
                'detail': '[可选 - 默认该数组为{1,2,3,...},其大小与 known_y 相同] - 关系表达式 y = b*m^x 中已知的可选 x 值集合。\n\n如果已知数据_y为一维数组或范围，已知数据_x则可代表二维数组或范围中的多个自变量。也就是说，如果已知数据_y为单行，则将已知数据_x中的每行解释为各自独立的值，类似情况也适用于已知数据_y为单列的情况。',
                'example': 'A2:A10',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'new_x',
                'detail': '[可选 - 默认与 known_x 相同] - 需要函数 GROWTH 返回对应 y 值的新 x 值。',
                'example': 'A11:A13',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'const',
                'detail': '[可选 - 默认值为TRUE()] -一个逻辑值，用于指定是否将常量 b 强制设为 1。\n\nTRUE() 表示 b 将按正常计算；\n\nFALSE() 表示 b 将被设为 1，m 将被调整以使 y = m^x。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LINEST',
            't': 14,
            'd': '可通过使用最小二乘法计算与现有数据最佳拟合的直线，来计算某直线的统计值，然后返回描述此直线的数组。',
            'a': '可通过使用最小二乘法计算与现有数据最佳拟合的直线，来计算某直线的统计值，然后返回描述此直线的数组。',
            'm': [1, 4],
            'p': [{
                'name': 'known_y',
                'detail': '关系表达式 y = mx + b 中已知的 y 值集合。\n\n如果 known_y 为二维数组或范围，则 known_x 的维数必须与之相同，或者省略此参数。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'B2:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'known_x',
                'detail': '[可选 - 默认该数组为{1,2,3,...},其大小与 known_y 相同] - 关系表达式 y = mx + b 中已知的可选 x 值集合。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'A2:A10',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'const',
                'detail': '[可选 - 默认值为TRUE()] - 一个逻辑值，用于指定是否将常量 b 强制设为 0。\n\nTRUE() 表示 b 将按正常计算；\n\nFALSE() 表示 b 将被设为 0（零），m 将被调整以使 y = mx。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'stats',
                'detail': '[可选 - 默认值为FALSE()] - 一个逻辑值，用于指定是否返回附加回归统计值。\n\n如果详细为TRUE，除了对应于每个自变量的一组线性系数和y截距之外，LINEST还返回以下信息：\n\n每项系数和截距的标准误差、\n\n限定系数（介于0和1之间，1表示完全相关）、\n\n因变量值的标准误差、\n\nF统计或F观测值，指示所观测到的因变量和自变量变量之间的关系是随机的还是线性的、\n\n自由度，用于在参照表中查找F统计值以估算可信度、\n\n回归平方和，以及\n\n残差平方和。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'LOGEST',
            't': 14,
            'd': '在回归分析中，计算最符合数据的指数回归拟合曲线，并返回描述该曲线的数值数组。',
            'a': '在回归分析中，计算最符合数据的指数回归拟合曲线，并返回描述该曲线的数值数组。',
            'm': [1, 4],
            'p': [{
                'name': 'known_y',
                'detail': '关系表达式 y = mx + b 中已知的 y 值集合。\n\n如果 known_y 为二维数组或范围，则 known_x 的维数必须与之相同，或者省略此参数。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'B2:B10',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'known_x',
                'detail': '[可选 - 默认该数组为{1,2,3,...},其大小与 known_y 相同] - 关系表达式 y = mx + b 中已知的可选 x 值集合。\n\n如果 known_y 为一维数组或范围，known_x 则可代表二维数组或范围中的多个自变量。也就是说，如果 known_y 为单行，则将 known_x 中的每行解释为各自独立的值，类似情况也适用于 known_y 为单列的情况。',
                'example': 'A2:A10',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'const',
                'detail': '[可选 - 默认值为TRUE()] - 一个逻辑值，用于指定是否将常量 b 强制设为 0。\n\nTRUE() 表示 b 将按正常计算；\n\nFALSE() 表示 b 将被设为 0（零），m 将被调整以使 y = mx。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'stats',
                'detail': '[可选 - 默认值为FALSE()] - 一个逻辑值，用于指定是否返回附加回归统计值。\n\n如果详细为TRUE，则除了为每个自变量和系数 b 返回一组指数值之外，LOGEST 还将返回以下数据：\n\n每项指数和系数的标准误差、\n\n限定系数（介于 0 和 1 之间，1 表示完全相关）、\n\n因变量值的标准误差、\n\nF 统计或 F 观测值，指示所观测到的因变量和自变量之间的关系是随机的还是指数的、\n\n自由度 - 用于在参照表中查找 F 统计值以估算可信度、\n\n回归平方和，以及\n\n残差平方和。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'MDETERM',
            't': 14,
            'd': '返回一个数组的矩阵行列式的值。',
            'a': '返回一个数组的矩阵行列式的值。',
            'm': [1, 1],
            'p': [{
                'name': 'array',
                'detail': '行数和列数相等的数值数组。',
                'example': 'A1:D4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MINVERSE',
            't': 14,
            'd': '返回数组中存储的矩阵的逆矩阵。',
            'a': '返回数组中存储的矩阵的逆矩阵。',
            'm': [1, 1],
            'p': [{
                'name': 'array',
                'detail': '行数和列数相等的数值数组。',
                'example': 'A1:D4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'MMULT',
            't': 14,
            'd': '返回两个数组的矩阵乘积。结果矩阵的行数与 array1 的行数相同，矩阵的列数与 array2 的列数相同。',
            'a': '返回两个数组的矩阵乘积。结果矩阵的行数与 array1 的行数相同，矩阵的列数与 array2 的列数相同。',
            'm': [2, 2],
            'p': [{
                'name': 'array1',
                'detail': '要进行矩阵乘法运算的第一个矩阵数组。\n\narray1 列数必须与 array2 的行数相同',
                'example': 'A1:B3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array2',
                'detail': '要进行矩阵乘法运算的第二个矩阵数组。\n\narray2 的行数必须与 array1 列数相同',
                'example': 'C1:F2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SUMPRODUCT',
            't': 14,
            'd': '在给定的几组数组中，将数组间对应的元素相乘，并返回乘积之和。',
            'a': '在给定的几组数组中，将数组间对应的元素相乘，并返回乘积之和。',
            'm': [1, 255],
            'p': [{
                'name': 'array1',
                'detail': '其相应元素需要进行相乘并求和的第一个数组参数。',
                'example': 'A2:C5',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }, {
                'name': 'array2',
                'detail': '[可选] - 其相应元素需要进行相乘并求和的其它数组参数。',
                'example': 'D2:F5',
                'require': 'o',
                'repeat': 'y',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'ISFORMULA',
            't': 15,
            'd': '检查公式是否位于引用的单元格中。',
            'a': '检查公式是否位于引用的单元格中。',
            'm': [1, 1],
            'p': [{
                'name': 'cell',
                'detail': '要检查是否存在公式的单元格。\n\n如果 cell 为包含公式的单元格，则 ISFORMULA 将返回 TRUE。如果 cell 为相应单元格范围，则当该范围内的首个单元格包含公式时，系统会返回 TRUE。如果是任何其他值，系统都将返回 FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'CELL',
            't': 15,
            'd': '返回有关单元格的格式、位置或内容的信息。',
            'a': '返回有关单元格的格式、位置或内容的信息。',
            'm': [2, 2],
            'p': [{
                'name': 'info_type',
                'detail': '一个文本值，指定要返回的单元格信息的类型。',
                'example': '"type"',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'reference',
                'detail': '需要其相关信息的单元格。',
                'example': 'C2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'NA',
            't': 15,
            'd': '返回错误值 #N/A。',
            'a': '返回错误值 #N/A。',
            'm': [0, 0],
            'p': []
        }, {
            'n': 'ERROR_TYPE',
            't': 15,
            'd': '返回与其他单元格中的错误值相对应的数字。',
            'a': '返回与其他单元格中的错误值相对应的数字。',
            'm': [1, 1],
            'p': [{
                'name': 'error_val',
                'detail': '用于查找错误号的单元格，虽然您也可以直接提供错误值。',
                'example': 'A3',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISBLANK',
            't': 15,
            'd': '检查所引用的单元格是否为空。',
            'a': '检查所引用的单元格是否为空。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '对要检查其是否为空的单元格的引用。\n\n如果是空单元格，则 TRUE；否则返回 FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'ISERR',
            't': 15,
            'd': '检查某个值是否为 #N/A 以外的错误值。',
            'a': '检查某个值是否为 #N/A 以外的错误值。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其是否为#N/A以外的错误类型的值。\n\n如果值是除#N/A之外的任何错误（包括#DIV/0!、#NAME?、#NULL!、#NUM!、#VALUE!和#REF!），ISERR将返回TRUE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISERROR',
            't': 15,
            'd': '检查某个值是否为错误值。',
            'a': '检查某个值是否为错误值。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其是否为错误类型的值。\n\n只要值是某种错误值（包括#DIV/0!、#N/A、#NAME?、#NULL!、#NUM!、#VALUE!和#REF!），ISERROR就会返回TRUE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISLOGICAL',
            't': 15,
            'd': '检查某个值是 TRUE 还是 FALSE。',
            'a': '检查某个值是 TRUE 还是 FALSE。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其为逻辑TRUE还是逻辑FALSE的值。\n\n*如果值为TRUE或FALSE，或为指向值为TRUE或FALSE的单元格的引用，ISLOGICAL将返回TRUE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISNA',
            't': 15,
            'd': '检查某个值是否为错误值 #N/A。',
            'a': '检查某个值是否为错误值 #N/A。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要与错误值#N/A进行比较的值。\n\n*如果值为#N/A或指向包含#N/A的单元格的引用，则ISNA将返回TRUE，否则返回FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISNONTEXT',
            't': 15,
            'd': '检查某个值是否为非文本。',
            'a': '检查某个值是否为非文本。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要检查的文本。\n\n*如果参数为文本值或指向包含文本的单元格的引用，ISNONTEXT将返回FALSE，否则返回TRUE。\n\n当值为指向空单元格的引用时，ISNONTEXT会返回TRUE。\n\n当值为空字符串时，ISNONTEXT将返回FALSE，因为空串被视作文本。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISNUMBER',
            't': 15,
            'd': '检查某个值是否为数字。',
            'a': '检查某个值是否为数字。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其是否为数字的值。\n\n*如果参数为数字或指向内容为数字值的单元格的引用，ISNUMBER将返回TRUE，否则返回FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'ISREF',
            't': 15,
            'd': '检查某个值是否为有效的单元格引用。',
            'a': '检查某个值是否为有效的单元格引用。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其是否为单元格引用的值。\n\n*如果参数是有效的单元格引用，ISREF将返回TRUE，否则返回FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'ISTEXT',
            't': 15,
            'd': '检查某个值是否为文本。',
            'a': '检查某个值是否为文本。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要验证其是否为文本的值。\n\n如果参数为文本值或指向包含文本值的单元格的引用，ISTEXT将返回TRUE，否则返回FALSE。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TYPE',
            't': 15,
            'd': '返回数值的类型。',
            'a': '返回数值的类型。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要确定其类型的数据。\n\n数字 返回 1;\n\n文本 返回 2;\n\n逻辑值 返回 4;\n\n错误值 返回 16;\n\n数组 返回 64;',
                'example': 'C4',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'N',
            't': 15,
            'd': '返回转化为数值后的值。',
            'a': '返回转化为数值后的值。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为数字的参数。\n\n如果值为数字，则返回该数字。\n\n如果值为日期，则返回该日期的序列号。\n\n如果值为TRUE，则返回1。\n\n如果值为FALSE，则返回0。\n\n如果值为错误值，则返回错误值。\n\n如果值为其他值，则返回0。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TO_DATE',
            't': 16,
            'd': '将指定的数字转换为日期。',
            'a': '将指定的数字转换为日期。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为日期的参数或其单元格引用。\n\n如果值为数字或指向内容为数值的单元格的引用，TO_DATE会将值转换为相应的日期并返回，值代表从十二月30日到对应的日期之间的天数，\n\n负值表示对应的日期在十二月30日之前，而小数值则代表一天中从午夜算起的时间。\n如果值不是数字或指向内容为数值的单元格的引用，则TO_DATE将在不做任何修改的情况下返回值。',
                'example': '25405',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TO_PURE_NUMBER',
            't': 16,
            'd': '将给定的日期/时间、百分比、货币金额或其他格式的数值转换为不带格式的纯数字。',
            'a': '将给定的日期/时间、百分比、货币金额或其他格式的数值转换为不带格式的纯数字。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为纯数字的参数或其单元格引用。\n\n如果值为数字或指向包含数值的单元格的引用，TO_PURE_NUMBER将以不带任何格式与解释的形式返回值。\n\n如果值不是数字或指向内容为数值的单元格的引用，则TO_PERCENT将在不做任何修改的情况下返回值。',
                'example': '50%',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TO_TEXT',
            't': 16,
            'd': '将给定的数字值转换为文本格式。',
            'a': '将给定的数字值转换为文本格式。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为文本的参数或其单元格引用。\n\n如果值为数字或指向包含数值的单元格的引用，TO_TEXT将返回字符串形式的值，并保持现有格式。即原为货币的仍为货币，原为十进制数的仍为十进制数，原为百分比的仍为百分比，原为日期的仍为日期。\n\n如果值不是数字或指向内容为数值的单元格的引用，则TO_TEXT将在不做任何修改的情况下返回值。',
                'example': '24',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'TO_DOLLARS',
            't': 16,
            'd': '将指定的数字转换为美元金额。',
            'a': '将指定的数字转换为美元金额。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为美元金额的参数或其单元格引用。\n\n如果值不是数字或指向内容为数值的单元格的引用，则 TO_DOLLARS 将在不做任何修改的情况下返回值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'TO_PERCENT',
            't': 16,
            'd': '将指定的数字转换为百分比。',
            'a': '将指定的数字转换为百分比。',
            'm': [1, 1],
            'p': [{
                'name': 'value',
                'detail': '要转换为百分比的参数或其单元格引用。\n\n如果值为数字或指向包含数值的单元格的引用，TO_PERCENT会以1 = 100%为标准，将值转换为百分比。\n\n如果值不是数字或指向内容为数值的单元格的引用，则TO_PERCENT将在不做任何修改的情况下返回值。',
                'example': 'A2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'DGET',
            't': 17,
            'd': '使用 SQL 式查询，从列表或数据库的列中提取符合指定条件的单个值。',
            'a': '使用 SQL 式查询，从列表或数据库的列中提取符合指定条件的单个值。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DMAX',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的最大数字。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的最大数字。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DMIN',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的最小数字。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的最小数字。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DAVERAGE',
            't': 17,
            'd': '使用 SQL 式查询，对列表或数据库中满足指定条件的记录字段（列）中的数值求平均值。',
            'a': '使用 SQL 式查询，对列表或数据库中满足指定条件的记录字段（列）中的数值求平均值。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DCOUNT',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中包含数字的单元格的个数。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中包含数字的单元格的个数。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DCOUNTA',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的非空单元格的个数。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的非空单元格的个数。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DPRODUCT',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的数值的乘积。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的数值的乘积。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DSTDEV',
            't': 17,
            'd': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体标准偏差。',
            'a': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体标准偏差。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DSTDEVP',
            't': 17,
            'd': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为样本总体计算出的总体标准偏差。',
            'a': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为样本总体计算出的总体标准偏差。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DSUM',
            't': 17,
            'd': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的数字之和。',
            'a': '使用 SQL 式查询，返回列表或数据库中满足指定条件的记录字段（列）中的数字之和。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DVAR',
            't': 17,
            'd': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体方差。',
            'a': '使用 SQL 式查询，返回利用列表或数据库中满足指定条件的记录字段（列）中的数字作为一个样本估算出的总体方差。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            'n': 'DVARP',
            't': 17,
            'd': '使用 SQL 式查询，通过使用列表或数据库中满足指定条件的记录字段（列）中的数字计算样本总体的样本总体方差。',
            'a': '使用 SQL 式查询，通过使用列表或数据库中满足指定条件的记录字段（列）中的数字计算样本总体的样本总体方差。',
            'm': [3, 3],
            'p': [{
                'name': 'database',
                'detail': '构成列表或数据库的单元格区域，列表的第一行包含每一列的标签。',
                'example': 'A2:F20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }, {
                'name': 'field',
                'detail': '指定 database 中的哪一列包含要提取和用于计算的值。\n\nfield 可以是与 database 第一行中某个列标题对应的文本标签，也可以是指定相关列的数字索引，第一列的索引值为 1。',
                'example': 'G2',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangeall'
            }, {
                'name': 'criteria',
                'detail': '包含所指定条件的单元格区域。计算之前将使用这些条件来过滤 database 中的值。',
                'example': 'A22:D23',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            }]
        }, {
            "n": "AGE_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出年龄。支持15为或18位身份证",
            "a": "根据身份证号得到年龄。",
            "m": [1, 2],
            "p": [{
                "name": "身份证号",
                "example": "A1",
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "截止日期",
                "example": '"2017-10-01"',
                "detail": "年龄计算的截止日期或范围，默认为当日。",
                "require": "o",
                "repeat": "n",
                "type": "rangedatetime"
            }]
        },
        // SEX_BY_IDCARD
        {
            "n": "SEX_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出性别。支持15为或18位身份证",
            "a": "根据身份证号得到性别。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // BIRTHDAY_BY_IDCARD
        {
            "n": "BIRTHDAY_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出生日。支持15为或18位身份证",
            "a": "根据身份证号得到生日。",
            "m": [1, 2],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "生日格式",
                "example": '0',
                "detail": "日期类型,默认0:[1900/01/01], 1:[1900-01-01], 2:[1900年1月1日]",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // PROVINCE_BY_IDCARD
        {
            "n": "PROVINCE_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出籍贯的省份。支持15为或18位身份证",
            "a": "根据身份证号得到籍贯的省份。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // CITY_BY_IDCARD
        {
            "n": "CITY_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出籍贯的城市。支持15为或18位身份证",
            "a": "根据身份证号得到籍贯的城市。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // STAR_BY_IDCARD
        {
            "n": "STAR_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出星座。支持15为或18位身份证",
            "a": "根据身份证号得到星座。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // ANIMAL_BY_IDCARD
        {
            "n": "ANIMAL_BY_IDCARD",
            "t": "3",
            "d": "根据中国身份证号计算出生肖（鼠、牛、虎、兔...）。支持15为或18位身份证",
            "a": "根据身份证号得到生肖。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // ISIDCARD
        {
            "n": "ISIDCARD",
            "t": "3",
            "d": "验证身份证的格式是否正确。支持15为或18位身份证",
            "a": "验证身份证格式正确性。",
            "m": [1, 1],
            "p": [{
                "name": "身份证号",
                "example": '"31033519900101XXXX"',
                "detail": "15位或者18位的身份证号或范围。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        // DM_TEXT_CUTWORD
        {
            "n": "DM_TEXT_CUTWORD",
            "t": "4",
            "d": "文本分词。把一连串文字拆分为一系列单独词语",
            "a": "中文文本分词。",
            "m": [1, 2],
            "p": [{
                "name": "文本",
                "example": '"我来到北京清华大学"',
                "detail": "任意需要分词的文本。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "分词模式",
                "example": '0',
                "detail": "默认为0[精确模式], 1[全模式], 2[搜索引擎模式]。",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DM_TEXT_TFIDF
        {
            "n": "DM_TEXT_TFIDF",
            "t": "4",
            "d": "采用tf-idf算法进行关键词提取。从一连串文字中识别关键词",
            "a": "tf-idf关键词识别。",
            "m": [1, 3],
            "p": [{
                "name": "文本",
                "example": '"我来到北京清华大学"',
                "detail": "任意需要分词的文本。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "关键词个数",
                "example": '20',
                "detail": "算法返回的关键词个数，默认20",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }, {
                "name": "语料库",
                "example": '1',
                "detail": "选择特定领域的语料库，默认0[通用], 1[金融], 2[医疗]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DM_TEXT_TEXTRANK
        {
            "n": "DM_TEXT_TEXTRANK",
            "t": "4",
            "d": "采用TextRank算法进行关键词提取。从一连串文字中识别关键词",
            "a": "TextRank关键词识别。",
            "m": [1, 3],
            "p": [{
                "name": "文本",
                "example": '"我来到北京清华大学"',
                "detail": "任意需要分词的文本。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "关键词个数",
                "example": '20',
                "detail": "算法返回的关键词个数，默认20",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }, {
                "name": "语料库",
                "example": '1',
                "detail": "选择特定领域的语料库，默认0[通用], 1[金融], 2[医疗]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_CLOSE
        {
            "n": "DATA_CN_STOCK_CLOSE",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票收盘价。",
            "a": "返回A股对应股票收盘价。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_OPEN
        {
            "n": "DATA_CN_STOCK_OPEN",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票开盘价。",
            "a": "返回A股对应股票开盘价。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_MAX
        {
            "n": "DATA_CN_STOCK_MAX",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票最高价。",
            "a": "返回A股对应股票最高价。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_MIN
        {
            "n": "DATA_CN_STOCK_MIN",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票最低价。",
            "a": "返回A股对应股票最低价。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_VOLUMN
        {
            "n": "DATA_CN_STOCK_VOLUMN",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票成交量。",
            "a": "返回A股对应股票成交量。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // DATA_CN_STOCK_AMOUNT
        {
            "n": "DATA_CN_STOCK_AMOUNT",
            "t": "5",
            "d": "根据股票代码和日期，返回A股对应股票成交额。",
            "a": "返回A股对应股票成交额。",
            "m": [1, 3],
            "p": [{
                "name": "股票代码",
                "example": '"000001"',
                "detail": "6位股票代码，必填项。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }, {
                "name": "日期",
                "example": '2015-01-08',
                "detail": "股票的交易日，默认为最新交易日",
                "require": "o",
                "repeat": "n",
                "type": "rangedate"
            }, {
                "name": "复权除权",
                "example": '0',
                "detail": "选择股票的除权复权类型，默认0[前复权], 1[原始价格], 2[后复权]",
                "require": "o",
                "repeat": "n",
                "type": "rangenumber"
            }]
        },
        // ISDATE
        {
            "n": "ISDATE",
            "t": "6",
            "d": "验证日期的格式是否正确。支持多种日期格式",
            "a": "验证日期格式正确性。",
            "m": [1, 1],
            "p": [{
                "name": "日期",
                "example": '"1990-01-01"',
                "detail": "日期值，例如1990/01/01, 1990年1月1日等。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        //sparklines函数，线图
        {
            "n": "LINESPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的折线图sparklines，用于描述数据的连续走势",
            "a": "生成单元格折线图",
            "m": [1, 8],
            "p": [
            //data
            {
                "name": "数据范围",
                "example": 'A1:A20',
                "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            },
            //lineColor
            {
                "name": "线条颜色",
                "example": '#2ec7c9',
                "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#2ec7c9",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            // {
            //     "name": "填充颜色",
            //     "example": '#CCF3F4',
            //     "detail": "形成面积图，同线条颜色配置，默认0不显示",
            //     "require": "o",
            //     "repeat": "n",
            //     "type": "rangeall"
            // },
            //lineWidth
            {
                "name": "线条粗细",
                "example": '1',
                "detail": "折线图线段粗细，默认为1px",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //normalRangeMin和normalRangeMax设为相同的值，min、max、avg、median需要计算
            {
                "name": "辅助线",
                "example": 'avg',
                "detail": "一条横线，可以是min、max、avg、median、范围或自定义数值，默认0无",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //normalRangeColor
            {
                "name": "辅助线颜色",
                "example": '#000',
                "detail": "辅助线的颜色设置，同线条颜色配置，默认#000",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //maxSpotColor
            {
                "name": "最大值标识",
                "example": '#fc5c5c',
                "detail": "标识线图最大值，同线条颜色配置，默认0不显示",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //minSpotColor
            {
                "name": "最小值标识",
                "example": '#fc5c5c',
                "detail": "标识线图最大值，同线条颜色配置，默认0不显示",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //spotRadius
            {
                "name": "标识大小",
                "example": '1.5',
                "detail": "最大值和最小值的标识大小设置，默认为1.5",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            }]
        },
        //sparklines面积图
        {
            "n": "AREASPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的面积图sparklines，一般用于描述数据的连续累积值走势",
            "a": "生成单元格面积图",
            "m": [1, 5],
            "p": [
            //data
            {
                "name": "数据范围",
                "example": 'A1:A20',
                "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                "require": "m",
                "repeat": "n",
                "type": "rangeall"
            },
            //lineColor
            {
                "name": "线条颜色",
                "example": '#2ec7c9',
                "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#2ec7c9",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //fillColor
            {
                "name": "填充颜色",
                "example": '#CCF3F4',
                "detail": "形成面积图，同线条颜色配置，默认0不显示",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //lineWidth
            {
                "name": "线条粗细",
                "example": '1',
                "detail": "折线图线段粗细，默认为1px",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //normalRangeMin和normalRangeMax设为相同的值，min、max、avg、median需要计算
            {
                "name": "辅助线",
                "example": 'avg',
                "detail": "一条横线，可以是min、max、avg、median、范围或自定义数值，默认0无",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            },
            //normalRangeColor
            {
                "name": "辅助线颜色",
                "example": '#000',
                "detail": "辅助线的颜色设置，同线条颜色配置，默认#000",
                "require": "o",
                "repeat": "n",
                "type": "rangeall"
            }
            // //maxSpotColor
            // {
            //     "name": "最大值标识",
            //     "example": '#fc5c5c',
            //     "detail": "标识线图最大值，同线条颜色配置，默认0不显示",
            //     "require": "o",
            //     "repeat": "n",
            //     "type": "rangeall"
            // },
            // //minSpotColor
            // {
            //     "name": "最小值标识",
            //     "example": '#fc5c5c',
            //     "detail": "标识线图最大值，同线条颜色配置，默认0不显示",
            //     "require": "o",
            //     "repeat": "n",
            //     "type": "rangeall"
            // },
            // //spotRadius
            // {
            //     "name": "标识大小",
            //     "example": '1.5',
            //     "detail": "最大值和最小值的标识大小设置，默认为1.5",
            //     "require": "o",
            //     "repeat": "n",
            //     "type": "rangeall"
            // }
            ]
        },
        //sparklines柱状图
        {
            "n": "COLUMNSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的垂直柱状图sparklines，一般用于描述离散数据之间的大小情况",
            "a": "生成单元格垂直柱状图",
            "m": [1, 6],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barSpacing
                {
                    "name": "柱条间隔",
                    "example": '1',
                    "detail": "柱条之间的间隔距离，默认为1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barColor
                {
                    "name": "柱条颜色",
                    "example": '#fc5c5c',
                    "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#fc5c5c",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //negBarColor
                {
                    "name": "负向柱条颜色",
                    "example": '#97b552',
                    "detail": "负向柱条颜色设置，代表负值的颜色，同柱条颜色配置，默认#97b552",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //chartRangeMax
                {
                    "name": "最大值",
                    "example": '100',
                    "detail": "柱图最大值，用于规范柱图长度，默认为自动计算false、auto、null",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //colorMap
                {
                    "name": "色板",
                    "example": '#97b552',
                    "detail": "调色板可以单独设置每个柱条的颜色，可设置多个，支持两种格式：1颜色例如#000，代表第一个柱的颜色是黑色；2数值范围:颜色，例如-2:#000表示数值为-2的柱为黑色，0:5:#000表示数值0-5的柱为黑色，默认为空",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines累积柱状图
        {
            "n": "STACKCOLUMNSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的累积垂直柱状图sparklines，一般用于描述离散数据多个维度的数值大小",
            "a": "生成单元格累积垂直柱状图",
            "m": [1, 5],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //stackconfig
                {
                    "name": "按列堆积",
                    "example": '1',
                    "detail": "如果需要按行堆积则本项设为false或0，默认为是1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barSpacing
                {
                    "name": "柱条间隔",
                    "example": '1',
                    "detail": "柱条之间的间隔距离，默认为1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //chartRangeMax
                {
                    "name": "最大值",
                    "example": '100',
                    "detail": "累积柱图最大值，用于规范柱图长度，默认为自动计算false、auto、null",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //stackedBarColor
                {
                    "name": "累积色板",
                    "example": '#97b552',
                    "detail": "调色板可以单独设置每个维度的柱条颜色，可设置为A1:A10等范围，默认为#2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines条形图
        {
            "n": "BARSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的横向条形图sparklines，一般用于描述离散数据之间的大小情况",
            "a": "生成单元格横向条形图",
            "m": [1, 6],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barSpacing
                {
                    "name": "柱条间隔",
                    "example": '1',
                    "detail": "柱条之间的间隔距离，默认为1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barColor
                {
                    "name": "柱条颜色",
                    "example": '#fc5c5c',
                    "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#fc5c5c",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //negBarColor
                {
                    "name": "负向柱条颜色",
                    "example": '#97b552',
                    "detail": "负向柱条颜色设置，代表负值的颜色，同柱条颜色配置，默认#97b552",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //chartRangeMax
                {
                    "name": "最大值",
                    "example": '100',
                    "detail": "柱图最大值，用于规范柱图长度，默认为自动计算false、auto、null",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //colorMap
                {
                    "name": "色板",
                    "example": '#97b552',
                    "detail": "调色板可以单独设置每个柱条的颜色，可设置多个，支持两种格式：1颜色例如#000，代表第一个柱的颜色是黑色；2数值范围:颜色，例如-2:#000表示数值为-2的柱为黑色，0:5:#000表示数值0-5的柱为黑色，默认为空",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines累积条形图
        {
            "n": "STACKBARSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的累积横向条形图sparklines，一般用于描述离散数据多个维度的数值大小",
            "a": "生成单元格累积横向条形图",
            "m": [1, 5],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //stackconfig
                {
                    "name": "按列堆积",
                    "example": '1',
                    "detail": "如果需要按行堆积则本项设为false或0，默认为是1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barSpacing
                {
                    "name": "柱条间隔",
                    "example": '1',
                    "detail": "柱条之间的间隔距离，默认为1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //chartRangeMax
                {
                    "name": "最大值",
                    "example": '100',
                    "detail": "累积柱图最大值，用于规范柱图长度，默认为自动计算false、auto、null",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //stackedBarColor
                {
                    "name": "累积色板",
                    "example": '#97b552',
                    "detail": "调色板可以单独设置每个维度的柱条颜色，可设置为A1:A10等范围，默认为#2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines离散图
        {
            "n": "DISCRETESPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的离散图sparklines，一般用于描述离散数据走势",
            "a": "生成单元格离散图",
            "m": [1, 4],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //thresholdValue
                {
                    "name": "分割阈值",
                    "example": '1',
                    "detail": "离散图柱形颜色的区分，例如：该值为0，则大于0为蓝色，小于0为红色，默认为0",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //lineColor
                {
                    "name": "阈值以上颜色",
                    "example": '#2ec7c9',
                    "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#2ec7c9",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //thresholdColor
                {
                    "name": "阈值以下颜色",
                    "example": '#fc5c5c',
                    "detail": "阈值以下柱条颜色设置，同阈值以上颜色，默认#fc5c5c",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines三态图
        {
            "n": "TRISTATESPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的三态图sparklines，一般用于描述三种态势的走势例如胜负平",
            "a": "生成单元格离散图",
            "m": [1, 6],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //barSpacing
                {
                    "name": "柱条间隔",
                    "example": '1',
                    "detail": "柱条之间的间隔距离，默认为1",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //posBarColor
                {
                    "name": "柱条颜色",
                    "example": '#fc5c5c',
                    "detail": "线图的线条颜色，可以是否个范围A1、色表索引数值或者具体颜色值，设置为0或false则不显示，支持regx、rgb、rgba等。默认#fc5c5c",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //negBarColor
                {
                    "name": "负向柱条颜色",
                    "example": '#97b552',
                    "detail": "负向柱条颜色设置，代表负值的颜色，同柱条颜色配置，默认#97b552",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //zeroBarColor
                {
                    "name": "零值柱条颜色",
                    "example": '#999',
                    "detail": "零值柱条颜色设置，代表0值颜色，同柱条颜色配置，默认#999",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //colorMap
                {
                    "name": "色板",
                    "example": '#97b552',
                    "detail": "调色板可以单独设置每个柱条的颜色，可设置多个，支持两种格式：1颜色例如#000，代表第一个柱的颜色是黑色；2数值范围:颜色，例如-2:#000表示数值为-2的柱为黑色，0-5:#000表示数值0-5的柱为黑色，默认为空",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines饼图
        {
            "n": "PIESPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的饼图sparklines，一般用于描述数据占比",
            "a": "生成单元格饼图",
            "m": [1, 5],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //offset
                {
                    "name": "旋转角度",
                    "example": '0',
                    "detail": "饼图的旋转角度，默认为0",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //borderWidth
                {
                    "name": "饼图边框",
                    "example": '0',
                    "detail": "饼图边框大小，默认为无0",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //borderColor
                {
                    "name": "边框颜色",
                    "example": '#000',
                    "detail": "饼图边框颜色，默认为#000",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //sliceColors
                {
                    "name": "饼图色板",
                    "example": '#97b552',
                    "detail": "调色板可以设置切片的颜色，可设置为A1:A10等范围，默认为#2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines箱线图
        {
            "n": "BOXSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的箱线图sparklines，一般用于描述数据集的统计分布",
            "a": "生成单元格箱线图",
            "m": [1, 4],
            "p": [
                //data
                {
                    "name": "数据范围",
                    "example": 'A1:A20',
                    "detail": "数据范围，数值才能被有效计算，例如A1:A20， {1,2,3,4,5}等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //outlierIQR，如果为0或false则showOutliers设为false，否则为true
                {
                    "name": "离群点比例",
                    "example": '1.5',
                    "detail": "离群点的阈值范围，如果为0或false则不显示，默认为1.5倍",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //target
                {
                    "name": "目标点值",
                    "example": '10',
                    "detail": "箱线图上的目标值设置，默认为false不显示",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //spotRadius
                {
                    "name": "数据点大小",
                    "example": '1.5',
                    "detail": "目标点和利群点的半径大小设置，默认为1.5",
                    "require": "o",
                    "repeat": "n",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines子弹图
        {
            "n": "BULLETSPLINES",
            "t": "3",
            "d": "生成嵌入在单元格内的子弹图sparklines，一般用于描述任务达成率",
            "a": "生成单元格子弹图",
            "m": [2, 3],
            "p": [
                //目标data1
                {
                    "name": "目标",
                    "example": '10',
                    "detail": "达成的目标值，数值才能被有效计算，例如A1， 100等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //目前达成data2
                {
                    "name": "实际完成",
                    "example": '8',
                    "detail": "目前完成值，数值才能被有效计算，例如A1， 100等。",
                    "require": "m",
                    "repeat": "n",
                    "type": "rangeall"
                },
                //对比值datax
                {
                    "name": "对比值",
                    "example": '12',
                    "detail": "对比值，例如超额、最低、获奖底线等，数值才能被有效计算，例如A1， 100等。可以设置最多9个对比值",
                    "require": "o",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //sparklines组合图，支持多个类型的图画在同一个单元格
        {
            "n": "COMPOSESPLINES",
            "t": "3",
            "d": "支持多个类型的图画在同一个单元格,每个参数代表一个sparklines图",
            "a": "组合sparklines图到一个单元格",
            "m": [1, 1],
            "p": [
                //data
                {
                    "name": "图设置",
                    "example": 'PIESPLINES(A1:A20)',
                    "detail": "sparklines图设置，例如A1:A20， 一个完成的饼图、线图设置等。",
                    "require": "m",
                    "repeat": "y",
                    "type": "rangeall"
                }
            ]
        },
        //动态数组公式
        {
            'n': 'SORT',
            't': '14',
            'd': '返回数组中元素的排序数组。返回的数组与提供的数组参数形状相同。',
            'a': '返回数组中元素的排序数组。返回的数组与提供的数组参数形状相同。',
            'm': [1, 4],
            'p': [{
                'name': 'array',
                'detail': '要排序的范围或数组。',
                'example': 'A2:A17',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'sort_index',
                'detail': '[可选] - 表示要排序的行或列的数字。（默认row1/col1）',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'sort_order',
                'detail': '[可选] - 表示所需排序顺序的数字；1表示升序（默认），-1表示降序。',
                'example': '-1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'by_col',
                'detail': '[可选] - 表示所需排序方向的逻辑值；按行排序为FALSE()（默认），按列排序为TRUE()。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'FILTER',
            't': '14',
            'd': '基于一个布尔（真/假）数组过滤一个数组。',
            'a': '基于一个布尔（真/假）数组过滤一个数组。',
            'm': [2, 3],
            'p': [{
                'name': 'array',
                'detail': '要筛选的数组或范围。',
                'example': 'A5:D20',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            },{
                'name': 'include',
                'detail': '布尔数组，其高度或宽度与数组相同',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'range'
            },{
                'name': 'if_empty',
                'detail': '[可选] - 如果包含数组中的所有值都为空(filter不返回任何值)，则返回的值。',
                'example': '""',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'UNIQUE',
            't': '14',
            'd': '返回列表或区域中的唯一值的列表。',
            'a': '返回列表或区域中的唯一值的列表。',
            'm': [1, 3],
            'p': [{
                'name': 'array',
                'detail': '从其返回唯一值的数组或区域。',
                'example': 'A2:B26',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'by_col',
                'detail': '[可选] - 逻辑值，指示如何比较；按行 = FALSE() 或省略；按列 = TRUE()。',
                'example': 'TRUE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            },{
                'name': 'occurs_once',
                'detail': '[可选] - 逻辑值，仅返回唯一值中出现一次 = TRUE()；包括所有唯一值 = FALSE() 或省略。',
                'example': 'FALSE()',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangeall'
            }]
        }, {
            'n': 'RANDARRAY',
            't': '14',
            'd': '返回 0 到 1 之间的随机数字数组。',
            'a': '返回 0 到 1 之间的随机数字数组。',
            'm': [0, 2],
            'p': [{
                'name': 'rows',
                'detail': '[可选] - 要返回的行数。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'cols',
                'detail': '[可选] - 要返回的列数。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, {
            'n': 'SEQUENCE',
            't': '14',
            'd': '生成数字序列的列表。',
            'a': '生成数字序列的列表。',
            'm': [1, 4],
            'p': [{
                'name': 'rows',
                'detail': '要返回的行数。',
                'example': '1',
                'require': 'm',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'cols',
                'detail': '[可选] - 要返回的列数。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'start',
                'detail': '[可选] - 序列中的第一个数字。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            },{
                'name': 'step',
                'detail': '[可选] - 序列中每个序列值的增量。',
                'example': '1',
                'require': 'o',
                'repeat': 'n',
                'type': 'rangenumber'
            }]
        }, 
    ];

    jfgrid.functionImplementation = {
        "SUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            if(jfgrid.getObjType(data) == "boolean"){
                                if(data.toString().toLowerCase() == "true"){
                                    dataArr.push(1);
                                }
                                else if(data.toString().toLowerCase() == "false"){
                                    dataArr.push(0);
                                }
                            }
                            else{
                                return jfgrid.formula.error.v;
                            }
                        }
                        else{
                            dataArr.push(data);
                        }
                    }
                }

                var sum = 0;

                if(dataArr.length > 0){
                    for(var i = 0; i < dataArr.length; i++){
                        if(jfgrid.func_methods.valueIsError(dataArr[i])){
                            return dataArr[i];
                        }

                        if(!jfgrid.func_methods.isRealNum(dataArr[i])){
                            continue;
                        }

                        sum += parseFloat(dataArr[i]);
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AVERAGE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                        }
                        else{
                            dataArr = dataArr.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var sum = 0, count = 0;

                for(var i = 0; i < dataArr.length; i++){
                    if(jfgrid.func_methods.valueIsError(dataArr[i])){
                        return dataArr[i];
                    }
                    else if(!jfgrid.func_methods.isRealNum(dataArr[i])){
                        return jfgrid.formula.error.v;
                    }

                    sum += parseFloat(dataArr[i]);
                    count++;
                }

                if(count == 0){
                    return jfgrid.formula.error.d;
                }

                return sum / count;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                        }
                        else{
                            dataArr = dataArr.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        if(jfgrid.getObjType(data) == "boolean"){
                            if(data.toString().toLowerCase() == "true"){
                                dataArr.push(1);
                            }
                            else if(data.toString().toLowerCase() == "false"){
                                dataArr.push(0);
                            }
                        }
                        else{
                            dataArr.push(data);
                        }
                    }
                }

                var count = 0;

                for(var i = 0; i < dataArr.length; i++){
                    if(jfgrid.func_methods.isRealNum(dataArr[i])){
                        count++;
                    }
                }

                return count;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNTA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data));
                        }
                        else{
                            dataArr = dataArr.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                return dataArr.length;
            } 
            catch (err) {
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MAX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                        }
                        else{
                            dataArr = dataArr.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var max = null;

                for(var i = 0; i < dataArr.length; i++){
                    if(jfgrid.func_methods.valueIsError(dataArr[i])){
                        return dataArr[i];
                    }

                    if(!jfgrid.func_methods.isRealNum(dataArr[i])){
                        continue;
                    }

                    if(max == null || parseFloat(dataArr[i]) > max){
                        max = parseFloat(dataArr[i]);
                    }
                }

                return max == null ? 0 : max;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                        }
                        else{
                            dataArr = dataArr.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var min = null;

                for(var i = 0; i < dataArr.length; i++){
                    if(jfgrid.func_methods.valueIsError(dataArr[i])){
                        return dataArr[i];
                    }

                    if(!jfgrid.func_methods.isRealNum(dataArr[i])){
                        continue;
                    }

                    if(min == null || parseFloat(dataArr[i]) < min){
                        min = parseFloat(dataArr[i]);
                    }
                }

                return min == null ? 0 : min;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AGE_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }

                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var birthday = window.jfgrid_function.BIRTHDAY_BY_IDCARD.f(UUserCard);
                if(jfgrid.func_methods.valueIsError(birthday)){
                    return birthday;
                }
                
                birthday = moment(birthday);

                var cuurentdate = moment();
                if(arguments.length == 2){
                    cuurentdate = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(cuurentdate)){
                        return cuurentdate;
                    }

                    cuurentdate = moment(cuurentdate);
                }

                var age = cuurentdate.diff(birthday, "years");

                if(age < 0 || age.toString() == "NaN"){
                    return jfgrid.formula.error.v;
                }

                return age;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SEX_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }

                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }
                
                if (parseInt(UUserCard.substr(16, 1)) % 2 == 1) {
                    return "男";
                } 
                else {
                    return "女";
                }
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BIRTHDAY_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }
                
                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var birthday = "";
                if (UUserCard.length == 15) {
                    var year = "19" + UUserCard.substring(6, 8) + "/" + UUserCard.substring(8, 10) + "/" + UUserCard.substring(10, 12);
                    birthday = year;
                }
                else if (UUserCard.length == 18) {
                    var year = UUserCard.substring(6, 10) + "/" + UUserCard.substring(10, 12) + "/" + UUserCard.substring(12, 14);
                    birthday = year;
                }

                //生日格式
                var datetype = 0;
                if (arguments[1] != null) {
                    datetype = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(datetype)){
                        return datetype;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(datetype)){
                    return jfgrid.formula.error.v;
                }

                datetype = parseInt(datetype);

                if(datetype < 0 || datetype > 2){
                    return jfgrid.formula.error.v;
                }

                if(parseInt(datetype) == 0){
                    return birthday;
                }
                else if(parseInt(datetype) == 1){
                    return moment(birthday).format("YYYY-MM-DD");
                }
                else if(parseInt(datetype) == 2){
                    return moment(birthday).format("YYYY年M月D日");
                }
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PROVINCE_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }
                
                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var native = "未知";
                var provinceArray = jfgrid.formula.classlist.province;

                if (UUserCard.substring(0, 2) in provinceArray) {
                    native = provinceArray[UUserCard.substring(0, 2)];
                }

                return native;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CITY_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }
                
                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var dataNum = cityData.length,
                    native = "未知";

                for (var i = 0; i < dataNum; i++) {
                    if (UUserCard.substring(0, 6) == cityData[i].code) {
                        native = cityData[i].title;
                        break;
                    }
                }

                return native;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STAR_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }

                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var birthday = window.jfgrid_function.BIRTHDAY_BY_IDCARD.f(UUserCard);
                if(jfgrid.func_methods.valueIsError(birthday)){
                    return birthday;
                }
                
                birthday = new Date(birthday);

                var month = birthday.getMonth(),
                    day = birthday.getDate();

                var d = new Date(1999, month, day, 0, 0, 0);
                var arr = [];
                arr.push(["魔羯座", new Date(1999, 0, 1, 0, 0, 0)]);
                arr.push(["水瓶座", new Date(1999, 0, 20, 0, 0, 0)]);
                arr.push(["双鱼座", new Date(1999, 1, 19, 0, 0, 0)]);
                arr.push(["白羊座", new Date(1999, 2, 21, 0, 0, 0)]);
                arr.push(["金牛座", new Date(1999, 3, 21, 0, 0, 0)]);
                arr.push(["双子座", new Date(1999, 4, 21, 0, 0, 0)]);
                arr.push(["巨蟹座", new Date(1999, 5, 22, 0, 0, 0)]);
                arr.push(["狮子座", new Date(1999, 6, 23, 0, 0, 0)]);
                arr.push(["处女座", new Date(1999, 7, 23, 0, 0, 0)]);
                arr.push(["天秤座", new Date(1999, 8, 23, 0, 0, 0)]);
                arr.push(["天蝎座", new Date(1999, 9, 23, 0, 0, 0)]);
                arr.push(["射手座", new Date(1999, 10, 22, 0, 0, 0)]);
                arr.push(["魔羯座", new Date(1999, 11, 22, 0, 0, 0)]);
                //console.log(birthday, arr, i);
                for (var i = arr.length - 1; i >= 0; i--) {
                    if (d >= arr[i][1]) {
                        return arr[i][0];
                    }
                }

                return "未找到匹配星座信息";
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ANIMAL_BY_IDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //身份证号
                var UUserCard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(UUserCard)){
                    return UUserCard;
                }

                if (!window.jfgrid_function.ISIDCARD.f(UUserCard)) {
                    return jfgrid.formula.error.v;
                }

                var birthday = window.jfgrid_function.BIRTHDAY_BY_IDCARD.f(UUserCard);
                if(jfgrid.func_methods.valueIsError(birthday)){
                    return birthday;
                }
                
                birthday = new Date(birthday);

                var list = new Array("猪", "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗");
                var index = (parseInt(birthday.getFullYear()) + 9) % 12;

                if (index != null && !isNaN(index)) {
                    return list[index];
                } 
                else {
                    return "未找到匹配生肖信息";
                }
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISIDCARD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var idcard = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(idcard)){
                    return idcard;
                }

                var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;

                if(reg.test(idcard)){
                    return true
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DM_TEXT_CUTWORD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //任意需要分词的文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //分词模式
                var datetype = 0;
                if (arguments[1] != null) {
                    datetype = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(datetype)){
                        return datetype;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(datetype)){
                    return jfgrid.formula.error.v;
                }

                datetype = parseInt(datetype);

                if(datetype != 0 &&　datetype != 1 && datetype != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/cutword", {
                    "text": text,
                    "type": datetype
                }, function(data) {
                    var d = [].concat(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DM_TEXT_TFIDF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //任意需要分词的文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //关键词个数
                var count = 20;
                if (arguments[1] != null) {
                    count = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(count)){
                        return count;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(count)){
                    return jfgrid.formula.error.v;
                }

                count = parseInt(count);

                //语料库
                var set = 0;
                if (arguments[2] != null) {
                    set = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(set)){
                        return set;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(set)){
                    return jfgrid.formula.error.v;
                }

                set = parseInt(set);

                if(count < 0){
                    return jfgrid.formula.error.v;
                }

                if(set != 0 && set != 1 && set != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/tfidf", {
                    "text": text,
                    "count": count,
                    "set": set
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DM_TEXT_TEXTRANK": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //任意需要分词的文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //关键词个数
                var count = 20;
                if (arguments[1] != null) {
                    count = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(count)){
                        return count;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(count)){
                    return jfgrid.formula.error.v;
                }

                count = parseInt(count);

                //语料库
                var set = 0;
                if (arguments[2] != null) {
                    set = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(set)){
                        return set;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(set)){
                    return jfgrid.formula.error.v;
                }

                set = parseInt(set);

                if(count < 0){
                    return jfgrid.formula.error.v;
                }

                if(set != 0 && set != 1 && set != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/tfidf", {
                    "text": text,
                    "count": count,
                    "set": set
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_CLOSE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "0"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    var v = jfgrid.numFormat(data);
                    if (v == null) {
                        v = data;
                    }
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, v);
                    d[cell_r][cell_c] = {
                        "v": v,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_OPEN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "1"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_MAX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "2"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_MIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "3"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_VOLUMN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }

                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "4"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATA_CN_STOCK_AMOUNT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;

                //股票代码
                var stockcode = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(stockcode)){
                    return stockcode;
                }

                //日期
                var date = null;

                if(arguments[1] != null){
                    var data_date = arguments[1];

                    if(jfgrid.getObjType(data_date) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(data_date) == "object" && data_date.startCell != null){
                        if(data_date.data != null && jfgrid.getObjType(data_date.data) != "array" && data_date.data.ct != null && data_date.data.ct.t == "d"){
                            date = jfgrid.mask.update("yyyy-mm-dd", data_date.data.v);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                    else{
                        date = data_date;
                    }

                    if(!jfgrid.datecontroll.isdatetime(date)){
                        return [jfgrid.formula.error.v, "日期错误"];
                    }

                    date = moment(date).format("YYYY-MM-DD");
                }

                //复权除权
                var price = 0;
                if (arguments[2] != null) {
                    price = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(price)){
                        return price;
                    }
                }

                if(!jfgrid.func_methods.isRealNum(price)){
                    return jfgrid.formula.error.v;
                }

                price = parseInt(price);

                if(price != 0 && price != 1 && price != 2){
                    return jfgrid.formula.error.v;
                }
                
                //jfgrid.jfrefreshcell({ "v": "load...", "f": cell_fp }, cell_r, cell_c);
                $.post("/dataqk/tu/api/getstockinfo", {
                    "stockCode": stockcode,
                    "date": date,
                    "price": price,
                    type: "5"
                }, function(data) {
                    var d = jfgrid.editor.deepCopyFlowData(jfgrid.flowdata);
                    jfgrid.formula.execFunctionGroup(cell_r, cell_c, data);
                    d[cell_r][cell_c] = {
                        "v": data,
                        "f": cell_fp
                    };
                    jfgrid.jfrefreshgrid(d, [{"row": [cell_r, cell_r], "column": [cell_c, cell_c]}]);
                });

                return "loading...";
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISDATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //日期
                var date = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(date)){
                    return date;
                }

                return jfgrid.datecontroll.isdatetime(date);
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMIF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //=SUMIF(A2:A5,">1600000",B2:B5)
                //=SUMIF(A2:A5,">1600000")
                //=SUMIF(A2:A5,3000000,B2:B5)
                //找出range中匹配的字符串
                var sum = 0;
                
                var rangeData = arguments[0].data; 
                var rangeRow = arguments[0].rowl;
                var rangeCol = arguments[0].coll;

                var criteria = jfgrid_parseData(arguments[1]);
                
                rangeData = jfgrid.formula.getRangeArray(rangeData)[0];

                //如果有第三个参数
                if(arguments[2]){
                    var sumRangeData = [];
                    //根据选择的目标的区域确定实际目标区域
                    //初始位置
                    var sumRangeStart = arguments[2].startCell;
                    var sumRangeRow = arguments[2].rowl;
                    var sumRangeCol = arguments[2].coll;
                    var sumRangeSheet = arguments[2].sheetName;

                    if(rangeRow == sumRangeRow && rangeCol == sumRangeCol){
                        sumRangeData = arguments[2].data;
                    }
                    else{
                        var row=[],col=[];
                        var sumRangeEnd = "";
                        var realSumRange = "";
                        //console.log("开始位置！！！",sumRangeStart,typeof(sumRangeStart));
                        row[0] = parseInt(sumRangeStart.replace(/[^0-9]/g,"")) - 1;
                        col[0] = jfgrid.jfgridABCatNum(sumRangeStart.replace(/[^A-Za-z]/g,""));

                        //根据第一个范围的长宽确定目标范围的末尾位置
                        row[1] = row[0] + rangeRow - 1;
                        col[1] = col[0] + rangeCol - 1;

                        //console.log(row[0],col[0],row[1],col[1]);
                        //末尾位置转化为sheet格式：如 F4 
                        var real_ABC = jfgrid.jfgridchatatABC(col[1]);
                        var real_Num = row[1] + 1;
                        sumRangeEnd = real_ABC + real_Num;
                        //console.log("合成新的末尾位置：" + sumRangeEnd);

                        realSumRange = sumRangeSheet + "!" +sumRangeStart + ":" + sumRangeEnd;
                        sumRangeData = jfgrid_getcelldata(realSumRange).data;
                        //console.log("最终的目标范围：",sumRangeData);
                    }

                    sumRangeData = jfgrid.formula.getRangeArray(sumRangeData)[0]; 

                    //循环遍历查找匹配项
                    for(var i = 0; i < rangeData.length;i++){
                        var v = rangeData[i];

                        if(!!v && jfgrid.formula.acompareb(v, criteria)){
                            if(!jfgrid.func_methods.isRealNum(sumRangeData[i])){
                                continue;
                            }

                            sum += parseFloat(sumRangeData[i]);
                        }
                    }           
                }
                else{
                    //循环遍历查找匹配项
                    for(var i = 0; i < rangeData.length;i++){
                        var v = rangeData[i];

                        if(!!v && jfgrid.formula.acompareb(v, criteria)){
                            if(!jfgrid.func_methods.isRealNum(v)){
                                continue;
                            }

                            sum += parseFloat(v);
                        }
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.tan(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TANH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                var e2 = Math.exp(2 * number);

                return (e2 - 1) / (e2 + 1);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CEILING": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //number
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //significance
                var significance = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(significance)){
                    return significance;
                }

                if(!jfgrid.func_methods.isRealNum(significance)){
                    return jfgrid.formula.error.v;
                }

                significance = parseFloat(significance);
                
                if(significance == 0){
                    return 0;
                }

                if(number > 0 && significance < 0){
                    return jfgrid.formula.error.nm;
                }

                return Math.ceil(number / significance) * significance;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ATAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.atan(number); 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ASINH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.log(number + Math.sqrt(number * number + 1));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ABS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.abs(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ACOS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number < -1 || number > 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.acos(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ACOSH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number < 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.log(number + Math.sqrt(number * number - 1));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MULTINOMIAL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var sum = 0, divisor = 1;

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    if(number < 0){
                        return jfgrid.formula.error.nm;
                    }

                    sum += number;
                    divisor *= jfgrid.func_methods.factorial(number);
                }

                return jfgrid.func_methods.factorial(sum) / divisor;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ATANH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number <= -1 ||　number >= 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.log((1 + number) / (1 - number)) / 2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ATAN2": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要计算其与x轴夹角大小的线段的终点x坐标
                var number_x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number_x)){
                    return number_x;
                }

                if(!jfgrid.func_methods.isRealNum(number_x)){
                    return jfgrid.formula.error.v;
                }

                number_x = parseFloat(number_x);

                //要计算其与x轴夹角大小的线段的终点y坐标
                var number_y = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_y)){
                    return number_y;
                }

                if(!jfgrid.func_methods.isRealNum(number_y)){
                    return jfgrid.formula.error.v;
                }

                number_y = parseFloat(number_y);

                if(number_x == 0 && number_y == 0){
                    return jfgrid.formula.error.d;
                }

                return Math.atan2(number_y, number_x);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNTBLANK": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var data = arguments[0];
                var sum = 0;

                if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                    if(data.data == null){
                        return 1;
                    }

                    if(jfgrid.getObjType(data.data) == "array"){
                        for(var r = 0; r < data.data.length; r++){
                            for(var c = 0; c < data.data[r].length; c++){
                                if(data.data[r][c] == null || jfgrid.func_methods.isRealNull(data.data[r][c].v)){
                                    sum++;
                                }
                            }
                        }
                    }
                    else{
                        if(jfgrid.func_methods.isRealNull(data.data.v)){
                            sum++;
                        }                        
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COSH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return (Math.exp(number) + Math.exp(-number)) / 2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "INT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var data = arguments[0];

                if(jfgrid.getObjType(data) == "array"){
                    if(jfgrid.getObjType(data[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        if(!jfgrid.func_methods.isRealNum(data[0][0])){
                            return jfgrid.formula.error.v;
                        }

                        return Math.floor(parseFloat(data[0][0]));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data[0])){
                            return jfgrid.formula.error.v;
                        }

                        return Math.floor(parseFloat(data[0]));
                    }   
                }
                else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                    if(data.coll > 1){
                        return jfgrid.formula.error.v;
                    }

                    if(data.rowl > 1){
                        var cellrange = jfgrid.formula.getcellrange(data.startCell);
                        var str = cellrange.row[0];

                        if(window.jfgridCurrentRow < str || window.jfgridCurrentRow > str + data.rowl - 1){
                            return jfgrid.formula.error.v; 
                        }

                        var cell = data.data[window.jfgridCurrentRow - str][0];
                    }
                    else{
                        var cell = data.data;
                    }

                    if(cell == null || jfgrid.func_methods.isRealNull(cell.v)){
                        return 0;
                    }

                    if(!jfgrid.func_methods.isRealNum(cell.v)){
                        return jfgrid.formula.error.v;
                    }
                    
                    return Math.floor(parseFloat(cell.v)); 
                }
                else{
                    if(jfgrid.getObjType(data) == "boolean"){
                        if(data.toString().toLowerCase() == "true"){
                            return 1;
                        }

                        if(data.toString().toLowerCase() == "false"){
                            return 0;
                        }
                    }

                    if(!jfgrid.func_methods.isRealNum(data)){
                        return jfgrid.formula.error.v;
                    }

                    return Math.floor(parseFloat(data));
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISEVEN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);
                
                return Math.abs(number) & 1 ? false : true;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISODD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);
                
                return Math.abs(number) & 1 ? true : false;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LCM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var o = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array"){
                            if(!jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            o = o.concat(jfgrid.func_methods.getDataArr(data));
                        }
                        else{
                            o = o.concat(data);
                        }   
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        o = o.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        o.push(data);
                    }
                }

                for(var y = 0; y < o.length; y++){
                    var number = o[y];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseInt(number);

                    if(number < 0){
                        return jfgrid.formula.error.nm;
                    }

                    o[y] = number;
                }

                for (var i, j, n, d, r = 1; (n = o.pop()) !== undefined;) {
                    if(n == 0){
                        r = 0;
                    }

                    while (n > 1) {
                        if (n % 2) {
                            for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {
                                //empty
                            }

                            d = (i <= j) ? i : n;
                        } 
                        else {
                            d = 2;
                        }

                        for (n /= d, r *= d, i = o.length; i; (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {
                            //empty
                        }
                    }
                }

                if(r >= Math.pow(2, 53)){
                    return jfgrid.formula.error.nm;
                }

                return r;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number <= 0){
                    return jfgrid.formula.error.nm;
                }

                return Math.log(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOG": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(arguments.length == 2){
                    var base = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(base)){
                        return base;
                    }

                    if(!jfgrid.func_methods.isRealNum(base)){
                        return jfgrid.formula.error.v;
                    }

                    base = parseFloat(base);

                    if(base <= 0){
                        return jfgrid.formula.error.nm;
                    }
                }
                else{
                    var base = 10;
                }

                return Math.log(number) / Math.log(base);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOG10": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number <= 0){
                    return jfgrid.formula.error.nm;
                }

                return Math.log(number) / Math.log(10);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MOD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //被除数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //除数
                var divisor = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(divisor)){
                    return divisor;
                }

                if(!jfgrid.func_methods.isRealNum(divisor)){
                    return jfgrid.formula.error.v;
                }

                divisor = parseFloat(divisor);
                
                if(divisor == 0){
                    return jfgrid.formula.error.d;
                }
                
                //计算结果
                var modulus = Math.abs(number % divisor);
                return (divisor > 0) ? modulus : -modulus;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MROUND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要舍入的值
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //要舍入到的倍数
                var multiple = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(multiple)){
                    return multiple;
                }

                if(!jfgrid.func_methods.isRealNum(multiple)){
                    return jfgrid.formula.error.v;
                }

                multiple = parseFloat(multiple);

                if (number * multiple < 0){
                    return jfgrid.formula.error.nm;
                }
                
                //计算结果
                return Math.round(number / multiple) * multiple;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ODD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                var temp = Math.ceil(Math.abs(number));
                temp = (temp & 1) ? temp : temp + 1;
                return (number >= 0) ? temp : -temp;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMSQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var sum = 0;

                if(dataArr.length > 0){
                    for(var i = 0; i < dataArr.length; i++){
                        var number = dataArr[i];

                        if(!jfgrid.func_methods.isRealNum(number)){
                            return jfgrid.formula.error.v;
                        }

                        number = parseFloat(number);

                        sum += number * number;
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COMBIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //项目的数量
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);

                //每一组合中项目的数量
                var number_chosen = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_chosen)){
                    return number_chosen;
                }

                if(!jfgrid.func_methods.isRealNum(number_chosen)){
                    return jfgrid.formula.error.v;
                }

                number_chosen = parseInt(number_chosen);
                
                if (number < 0 || number_chosen < 0 || number < number_chosen){
                    return jfgrid.formula.error.nm;
                }
                
                //计算结果
                return jfgrid.func_methods.factorial(number) / (jfgrid.func_methods.factorial(number_chosen) * jfgrid.func_methods.factorial(number - number_chosen))
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUBTOTAL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //数字 1-11 或 101-111，用于指定要为分类汇总使用的函数
                var data_function_num = arguments[0];
                var function_num;

                if(jfgrid.getObjType(data_function_num) == "array"){
                    if(jfgrid.getObjType(data_function_num[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_function_num)){
                            return jfgrid.formula.error.v;
                        }

                        function_num = [];

                        for(var i = 0; i < data_function_num.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < data_function_num[i].length; j++){
                                rowArr.push(data_function_num[i][j]);
                            }

                            function_num.push(rowArr);
                        }
                    }
                    else{
                        function_num = [];

                        for(var i = 0; i < data_function_num.length; i++){
                            function_num.push(data_function_num[i]);
                        }
                    }
                }
                else if(jfgrid.getObjType(data_function_num) == "object" && data_function_num.startCell != null){
                    function_num = jfgrid.func_methods.getFirstValue(data_function_num);
                }
                else{
                    function_num = data_function_num;
                }

                var arr = Array.prototype.slice.apply(arguments);
                arr.shift();

                //计算结果
                if(jfgrid.getObjType(function_num) == "array"){
                    var result = [];

                    if(jfgrid.getObjType(function_num[0]) == "array"){
                        for(var i = 0; i < function_num.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < function_num[i].length; j++){
                                var value = function_num[i][j];

                                if(jfgrid.func_methods.valueIsError(value)){
                                    rowArr.push(value);
                                }
                                else if(!jfgrid.func_methods.isRealNum(value)){
                                    rowArr.push(jfgrid.formula.error.v);
                                }
                                else{
                                    value = parseInt(value);

                                    if(value < 1 || value > 111 || (value > 11 && value < 101)){
                                        rowArr.push(jfgrid.formula.error.v);
                                    }
                                    else{
                                        rowArr.push(compute(value));
                                    }
                                }
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        for(var i = 0; i < function_num.length; i++){
                            var value = function_num[i];

                            if(jfgrid.func_methods.valueIsError(value)){
                                result.push(value);
                            }
                            else if(!jfgrid.func_methods.isRealNum(value)){
                                result.push(jfgrid.formula.error.v);
                            }
                            else{
                                value = parseInt(value);

                                if(value < 1 || value > 111 || (value > 11 && value < 101)){
                                    result.push(jfgrid.formula.error.v);
                                }
                                else{
                                    result.push(compute(value));
                                }
                            }
                        }
                    }

                    return result;
                }
                else{
                    if(jfgrid.func_methods.valueIsError(function_num)){
                        return function_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(function_num)){
                        return jfgrid.formula.error.v;
                    }

                    function_num = parseInt(function_num);

                    if(function_num < 1 || function_num > 111 || (function_num > 11 && function_num < 101)){
                        return jfgrid.formula.error.v;
                    }

                    return compute(function_num);
                }
                
                function compute(function_num){
                    switch(function_num){
                        case 1:    //AVERAGE
                        case 101:
                            return window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, arr);
                            break;
                        case 2:    //COUNT
                        case 102:
                            return window.jfgrid_function.COUNT.f.apply(window.jfgrid_function.COUNT, arr);
                            break;
                        case 3:    //COUNTA
                        case 103:
                            return window.jfgrid_function.COUNTA.f.apply(window.jfgrid_function.COUNTA, arr);
                            break;
                        case 4:    //MAX
                        case 104:
                            return window.jfgrid_function.MAX.f.apply(window.jfgrid_function.MAX, arr);
                            break;
                        case 5:    //MIN
                        case 105:
                            return window.jfgrid_function.MIN.f.apply(window.jfgrid_function.MIN, arr);
                            break;
                        case 6:    //PRODUCT
                        case 106:
                            return window.jfgrid_function.PRODUCT.f.apply(window.jfgrid_function.PRODUCT, arr);
                            break;
                        case 7:    //STDEV
                        case 107:
                            return window.jfgrid_function.STDEVA.f.apply(window.jfgrid_function.STDEVA, arr);
                            break;
                        case 8:    //STDEVP
                        case 108:
                            return window.jfgrid_function.STDEVP.f.apply(window.jfgrid_function.STDEVP, arr);
                            break;
                        case 9:    //SUM
                        case 109:
                            return window.jfgrid_function.SUM.f.apply(window.jfgrid_function.SUM, arr);
                            break;
                        case 10:   //VAR
                        case 110:
                            return window.jfgrid_function.VAR_S.f.apply(window.jfgrid_function.VAR_S, arr);
                            break;
                        case 11:   //VARP
                        case 111:
                            return window.jfgrid_function.VAR_P.f.apply(window.jfgrid_function.VAR_P, arr);
                            break;
                    }
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ASIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number < -1 || number > 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.asin(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNTIF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //范围
                var data_range = arguments[0];
                var range;

                if(jfgrid.getObjType(data_range) == "object" && data_range.startCell != null){
                    range = data_range.data;
                }
                else{
                    return jfgrid.formula.error.v; 
                }

                //条件
                var data_criteria = arguments[1];
                var criteria;

                if(jfgrid.getObjType(data_criteria) == "array"){
                    criteria = [];

                    if(jfgrid.getObjType(data_criteria[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_criteria)){
                            return jfgrid.formula.error.v;
                        }

                        for(var i = 0; i < data_criteria.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < data_criteria[i].length; j++){
                                rowArr.push(data_criteria[i][j]);
                            }

                            criteria.push(rowArr);
                        }
                    }
                    else{
                        for(var i = 0; i < data_criteria.length; i++){
                            criteria.push(data_criteria[i]);
                        }
                    }
                }
                else if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.rowl > 1 || data_criteria.coll > 1){
                        return 0;
                    }

                    criteria = data_criteria.data;
                }
                else{
                    criteria = data_criteria;
                }

                //计算
                if(jfgrid.getObjType(criteria) == "array"){
                    var result = [];

                    if(jfgrid.getObjType(criteria[0]) == "array"){
                        for(var i = 0; i < criteria.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < criteria[i].length; j++){
                                rowArr.push(getCriteriaResult(range, criteria[i][j]));
                            }

                            result.push(rowArr);
                        }
                    }
                    else{
                        for(var i = 0; i < criteria.length; i++){
                            result.push(getCriteriaResult(range, criteria[i]));
                        }
                    }

                    return result;
                }
                else{
                    return getCriteriaResult(range, criteria);
                }

                function getCriteriaResult(range, criter){
                    if (!/[<>=!*?]/.test(criter)) {
                        criter = '=="' + criter + '"';
                    }

                    criter = criter.replace("<>", "!=");

                    var matches = 0;

                    if(jfgrid.getObjType(range) == "array"){
                        for (var i = 0; i < range.length; i++) {
                            for(var j = 0; j < range[i].length; j++){
                                if(range[i][j] != null && !jfgrid.func_methods.isRealNull(range[i][j].v)){
                                    var value = range[i][j].v;

                                    if(criter.indexOf("*") > -1 || criter.indexOf("?") > -1){
                                        if(jfgrid.formula.isWildcard(value, criter)){
                                            matches++;
                                        }
                                    }
                                    else{
                                        if (typeof value !== 'string') {
                                            if (eval(value + criter)) {
                                                matches++;
                                            }
                                        } 
                                        else {
                                            if (eval('"' + value + '"' + criter)) {
                                                matches++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else{
                        if(range != null && !jfgrid.func_methods.isRealNull(range.v)){
                            var value = range.v;

                            if(criter.indexOf("*") > -1 || criter.indexOf("?") > -1){
                                if(jfgrid.formula.isWildcard(value, criter)){
                                    matches++;
                                }
                            }
                            else{
                                if (typeof value !== 'string') {
                                    if (eval(value + criter)) {
                                        matches++;
                                    }
                                } 
                                else {
                                    if (eval('"' + value + '"' + criter)) {
                                        matches++;
                                    }
                                }
                            }
                        }
                    }

                    return matches;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RADIANS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return number * Math.PI / 180;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RAND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            try {
                return Math.floor(Math.random() * 1000000000) / 1000000000;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNTUNIQUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                return window.jfgrid_function.UNIQUE.f(dataArr);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DEGREES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return number * 180 / Math.PI;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ERFC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return jStat.erfc(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EVEN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                var temp = Math.ceil(Math.abs(number));
                temp = (temp & 1) ? temp + 1 : temp;
                return (number > 0) ? temp : -temp;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EXP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.exp(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FACT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    if(jfgrid.getObjType(number) == "boolean"){
                        if(number.toString().toLowerCase() == "true"){
                            number = 1;
                        }   
                        else if(number.toString().toLowerCase() == "false"){
                            number = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                number = parseInt(number);
                
                if(number < 0){
                    return jfgrid.formula.error.nm;
                }

                return jfgrid.func_methods.factorial(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FACTDOUBLE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    if(jfgrid.getObjType(number) == "boolean"){
                        if(number.toString().toLowerCase() == "true"){
                            number = 1;
                        }   
                        else if(number.toString().toLowerCase() == "false"){
                            number = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                number = parseInt(number);

                if(number < 0){
                    return jfgrid.formula.error.nm;
                }

                return jfgrid.func_methods.factorialDouble(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PI": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            try { 
                return Math.PI;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FLOOR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //number
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //significance
                var significance = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(significance)){
                    return significance;
                }

                if(!jfgrid.func_methods.isRealNum(significance)){
                    return jfgrid.formula.error.v;
                }

                significance = parseFloat(significance);

                if(significance == 0){
                    return jfgrid.formula.error.d;
                }

                if(number > 0 && significance < 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var precision = -Math.floor(Math.log(Math.abs(significance)) / Math.log(10));

                if (number >= 0) {
                    return (Math.floor(number / significance) * significance) * Math.pow(10, precision) / Math.pow(10, precision);
                } 
                else {
                    return -((Math.ceil(Math.abs(number) / significance) * significance) * Math.pow(10, precision)) / Math.pow(10, precision);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GCD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", false));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                if(!jfgrid.func_methods.isRealNum(dataArr[0])){
                    return jfgrid.formula.error.v;
                }

                var x = parseInt(dataArr[0]);

                if(x < 0 || x >= Math.pow(2, 53)){
                    return jfgrid.formula.error.nm;
                }

                for (var i = 1; i < dataArr.length; i++) {
                    var y = dataArr[i];

                    if(!jfgrid.func_methods.isRealNum(y)){
                        return jfgrid.formula.error.v;
                    }

                    y = parseInt(y);

                    if(y < 0 || y >= Math.pow(2, 53)){
                        return jfgrid.formula.error.nm;
                    }

                    while (x && y) {
                        if (x > y) {
                            x %= y;
                        } 
                        else {
                            y %= x;
                        }
                    }

                    x += y;
                }

                return x;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RANDBETWEEN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //下界
                var bottom = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(bottom)){
                    return bottom;
                }

                if(!jfgrid.func_methods.isRealNum(bottom)){
                    return jfgrid.formula.error.v;
                }

                bottom = parseInt(bottom);

                //上界
                var top = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(top)){
                    return top;
                }

                if(!jfgrid.func_methods.isRealNum(top)){
                    return jfgrid.formula.error.v;
                }

                top = parseInt(top);

                if(bottom > top){
                    return jfgrid.formula.error.nm;
                }

                //计算
                return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROUND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //四舍五入的数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //位数
                var digits = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(digits)){
                    return digits;
                }

                if(!jfgrid.func_methods.isRealNum(digits)){
                    return jfgrid.formula.error.v;
                }

                digits = parseInt(digits);

                //计算
                var sign = (number > 0) ? 1 : -1;
                return sign * (Math.round(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROUNDDOWN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //四舍五入的数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //位数
                var digits = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(digits)){
                    return digits;
                }

                if(!jfgrid.func_methods.isRealNum(digits)){
                    return jfgrid.formula.error.v;
                }

                digits = parseInt(digits);

                //计算
                var sign = (number > 0) ? 1 : -1;
                return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROUNDUP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //四舍五入的数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //位数
                var digits = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(digits)){
                    return digits;
                }

                if(!jfgrid.func_methods.isRealNum(digits)){
                    return jfgrid.formula.error.v;
                }

                digits = parseInt(digits);

                //计算
                var sign = (number > 0) ? 1 : -1;
                return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SERIESSUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //幂级数的输入值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //x 的首项乘幂
                var n = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(n)){
                    return n;
                }

                if(!jfgrid.func_methods.isRealNum(n)){
                    return jfgrid.formula.error.v;
                }

                n = parseFloat(n);

                //级数中每一项的乘幂 n 的步长增加值
                var m = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(m)){
                    return m;
                }

                if(!jfgrid.func_methods.isRealNum(m)){
                    return jfgrid.formula.error.v;
                }

                m = parseFloat(m);

                //与 x 的每个连续乘幂相乘的一组系数
                var data_coefficients = arguments[3];
                var coefficients = [];

                if(jfgrid.getObjType(data_coefficients) == "array"){
                    if(jfgrid.getObjType(data_coefficients[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_coefficients)){
                        return jfgrid.formula.error.v;
                    }

                    coefficients = coefficients.concat(jfgrid.func_methods.getDataArr(data_coefficients, false));
                }
                else if(jfgrid.getObjType(data_coefficients) == "object" && data_coefficients.startCell != null){
                    coefficients = coefficients.concat(jfgrid.func_methods.getCellDataArr(data_coefficients, "number", false));
                }
                else{
                    coefficients.push(data_coefficients);
                }

                //计算
                if(!jfgrid.func_methods.isRealNum(coefficients[0])){
                    return jfgrid.formula.error.v;
                }

                var result = parseFloat(coefficients[0]) * Math.pow(x, n);

                for (var i = 1; i < coefficients.length; i++) {
                    var number = coefficients[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    result += number * Math.pow(x, n + i * m);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SIGN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number > 0){
                    return 1;
                }
                else if(number == 0){
                    return 0;
                }
                else if(number < 0){
                    return -1;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.sin(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SINH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return (Math.exp(number) - Math.exp(-number)) / 2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SQRT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number < 0){
                    return jfgrid.formula.error.nm;
                }

                return Math.sqrt(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SQRTPI": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number < 0){
                    return jfgrid.formula.error.nm;
                }

                return Math.sqrt(number * Math.PI);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GAMMALN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                if(number <= 0){
                    return jfgrid.formula.error.nm;
                }

                return jStat.gammaln(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                return Math.cos(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRUNC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要截取的数据
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //位数
                if(arguments.length == 2){
                    var digits = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(digits)){
                        return digits;
                    }

                    if(!jfgrid.func_methods.isRealNum(digits)){
                        return jfgrid.formula.error.v;
                    }

                    digits = parseInt(digits);
                }
                else{
                    var digits = 0;
                }

                //计算
                var sign = (number > 0) ? 1 : -1;
                return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "QUOTIENT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //被除数
                var numerator = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(numerator)){
                    return numerator;
                }

                if(!jfgrid.func_methods.isRealNum(numerator)){
                    return jfgrid.formula.error.v;
                }

                numerator = parseFloat(numerator);

                //除数
                var denominator = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(denominator)){
                    return denominator;
                }

                if(!jfgrid.func_methods.isRealNum(denominator)){
                    return jfgrid.formula.error.v;
                }

                denominator = parseFloat(denominator);

                if(denominator == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                return parseInt(numerator / denominator, 10);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "POWER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //底数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //指数
                var power = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(power)){
                    return power;
                }

                if(!jfgrid.func_methods.isRealNum(power)){
                    return jfgrid.formula.error.v;
                }

                power = parseFloat(power);

                if(number == 0 && power == 0){
                    return jfgrid.formula.error.nm;
                }

                if(number < 0 && power.toString().indexOf(".") > -1){
                    return jfgrid.formula.error.nm;
                }

                return Math.pow(number, power);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMIFS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var sum = 0;
                var args = arguments;
                jfgrid_getValue(args);
                var rangeData = jfgrid.formula.getRangeArray(args[0])[0];
                var results = new Array(rangeData.length);
                
                for(var i = 0;i < results.length; i++){
                    results[i] = true;
                }

                for(var i = 1; i < args.length; i += 2){
                    var range = jfgrid.formula.getRangeArray(args[i])[0];
                    var criteria = args[i+1];
                    for(var j = 0; j < range.length; j++){
                        var v = range[j];
                        results[j] = results[j] && (!!v) && jfgrid.formula.acompareb(v,criteria);
                    }
                }

                for(var i = 0; i < rangeData.length; i++){
                    if(results[i]){
                        sum += parseFloat(rangeData[i]);
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUNTIFS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var args = arguments;
                jfgrid_getValue(args);
                var results = new Array(jfgrid.formula.getRangeArray(args[0])[0].length);
                for(var i = 0;i < results.length; i++){
                    results[i] = true;
                }
                for(var i = 0; i < args.length; i += 2){
                    var range = jfgrid.formula.getRangeArray(args[i])[0];
                    var criteria = args[i+1];
                    for(var j = 0; j < range.length; j++){
                        var v = range[j];
                        results[j] = results[j] && (!!v) && jfgrid.formula.acompareb(v,criteria);
                    }
                }
                var result = 0;
                for(var i = 0; i < results.length; i++){
                    if(results[i]){
                        result++;
                    }
                }
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PRODUCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var result = 1;

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    result *= number;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HARMEAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                var den = 0, len = 0;

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    if(number <= 0){
                        return jfgrid.formula.error.nm;
                    }

                    den += 1 / number;
                    len++;
                }

                return len / den;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HYPGEOMDIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //样本中成功的次数
                var sample_s = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(sample_s)){
                    return sample_s;
                }

                if(!jfgrid.func_methods.isRealNum(sample_s)){
                    return jfgrid.formula.error.v;
                }

                sample_s = parseInt(sample_s);

                //样本量
                var number_sample = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_sample)){
                    return number_sample;
                }

                if(!jfgrid.func_methods.isRealNum(number_sample)){
                    return jfgrid.formula.error.v;
                }

                number_sample = parseInt(number_sample);

                //总体中成功的次数
                var population_s = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(population_s)){
                    return population_s;
                }

                if(!jfgrid.func_methods.isRealNum(population_s)){
                    return jfgrid.formula.error.v;
                }

                population_s = parseInt(population_s);

                //总体大小
                var number_pop = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(number_pop)){
                    return number_pop;
                }

                if(!jfgrid.func_methods.isRealNum(number_pop)){
                    return jfgrid.formula.error.v;
                }

                number_pop = parseInt(number_pop);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[4]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(sample_s < 0 || sample_s > Math.min(number_sample, population_s) || sample_s < Math.max(0, number_sample - number_pop + population_s)){
                    return jfgrid.formula.error.nm;
                }

                if(number_sample <= 0 || number_sample > number_pop){
                    return jfgrid.formula.error.nm;
                }
                
                if(population_s <= 0 || population_s > number_pop){
                    return jfgrid.formula.error.nm;
                }

                if(number_pop <= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                function pdf(x, n, M, N) {
                    var a = jfgrid.func_methods.factorial(M) / (jfgrid.func_methods.factorial(x) * jfgrid.func_methods.factorial(M - x));
                    var b = jfgrid.func_methods.factorial(N - M) / (jfgrid.func_methods.factorial(n - x) * jfgrid.func_methods.factorial(N - M - n + x));
                    var c = jfgrid.func_methods.factorial(N) / (jfgrid.func_methods.factorial(n) * jfgrid.func_methods.factorial(N - n));
                    
                    return a * b / c;
                }

                function cdf(x, n, M, N) {
                    var sum = 0;

                    for (var i = 0; i <= x; i++) {
                        sum += pdf(i, n, M, N);
                    }

                    return sum;
                }

                return (cumulative) ? cdf(sample_s, number_sample, population_s, number_pop) : pdf(sample_s, number_sample, population_s, number_pop);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "INTERCEPT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //x轴上用于预测的值
                var x = 0;

                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[0];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[1];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }
                
                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(jfgrid.func_methods.variance_s(data_x) == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var xmean = jStat.mean(data_x);
                var ymean = jStat.mean(data_y);
                
                var n = data_x.length;
                var num = 0;
                var den = 0;
                
                for (var i = 0; i < n; i++) {
                    num += (data_x[i] - xmean) * (data_y[i] - ymean);
                    den += Math.pow(data_x[i] - xmean, 2);
                }
                
                var b = num / den;
                var a = ymean - b * xmean;

                return a + b * x;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "KURT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                //剔除不是数值类型的值
                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    dataArr_n.push(number);
                }

                if(dataArr_n.length < 4 || jfgrid.func_methods.standardDeviation_s(dataArr_n) == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var mean = jStat.mean(dataArr_n);
                var n = dataArr_n.length;
                
                var sigma = 0;
                
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 4);
                }

                sigma = sigma / Math.pow(jStat.stdev(dataArr_n, true), 4);

                return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sigma - 3 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LARGE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数组或范围
                var dataArr = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(arguments[0], true));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", true));
                }
                else{
                    dataArr.push(arguments[0]);
                }

                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number)

                    dataArr_n.push(number);
                }

                //要返回的元素的排行位置
                var n;

                if(jfgrid.getObjType(arguments[1]) == "array"){
                    if(jfgrid.getObjType(arguments[1][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    n = jfgrid.func_methods.getDataArr(arguments[1]);
                }
                else if(jfgrid.getObjType(arguments[1]) == "object" && arguments[1].startCell != null){
                    if(arguments[1].rowl > 1 || arguments[1].coll > 1){
                        return jfgrid.formula.error.v;
                    }

                    var cell = arguments[1].data;

                    if(cell == null || jfgrid.func_methods.isRealNull(cell.v)){
                        var n = 0;
                    }
                    else{
                        var n = cell.v;
                    }
                }
                else{
                    n = arguments[1];
                }

                //计算
                if(jfgrid.getObjType(n) == "array"){
                    if(dataArr_n.length == 0){
                        return jfgrid.formula.error.nm;
                    }

                    var result = [];

                    for(var i = 0; i < n.length; i++){
                        if(!jfgrid.func_methods.isRealNum(n[i])){
                            result.push(jfgrid.formula.error.v);
                            continue;
                        }

                        n[i] = Math.ceil(parseFloat(n[i]));

                        if(n[i] <= 0 || n[i] > dataArr_n.length){
                            result.push(jfgrid.formula.error.nm);
                            continue;
                        }

                        result.push(dataArr.sort(function(a, b) { return b - a; })[n[i] - 1]);
                    }

                    return result;
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(n)){
                        return jfgrid.formula.error.v;
                    }

                    n = Math.ceil(parseFloat(n));

                    if(dataArr_n.length == 0){
                        return jfgrid.formula.error.nm;
                    }

                    if(n <= 0 || n > dataArr_n.length){
                        return jfgrid.formula.error.nm;
                    }

                    return dataArr.sort(function(a, b) {
                        return b - a;
                    })[n - 1];
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STDEVA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", false));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                //不是数值类型的值转化成数字（true为1，false和文本为0）
                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        if(number.toString().toLowerCase() == "true"){
                            number = 1;
                        }
                        else{
                            number = 0;
                        }
                    }
                    else{
                        number = parseFloat(number);
                    }

                    dataArr_n.push(number);
                }

                if(dataArr_n.length == 0){
                    return 0;
                }

                if(dataArr_n.length == 1){
                    return jfgrid.formula.error.d;
                }

                return jfgrid.func_methods.standardDeviation_s(dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STDEVP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                //剔除不是数值类型的值
                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    dataArr_n.push(number);
                }

                if(dataArr_n.length == 0){
                    return 0;
                }

                if(dataArr_n.length == 1){
                    return jfgrid.formula.error.d;
                }

                return jfgrid.func_methods.standardDeviation(dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GEOMEAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", true));
                    }
                    else{
                        if(jfgrid.getObjType(data) == "boolean"){
                            if(data.toString().toLowerCase() == "true"){
                                dataArr.push(1);
                            }
                            else if(data.toString().toLowerCase() == "false"){
                                dataArr.push(0);
                            }
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }
                
                //剔除不是数值类型的值
                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        continue;
                    }
                    
                    number = parseFloat(number);

                    if(number <= 0){
                        return jfgrid.formula.error.nm;
                    }

                    dataArr_n.push(number);
                }

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                return jStat.geomean(dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RANK_EQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要确定其排名的值
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //包含相关数据集的数组或范围
                var data_ref = arguments[1];
                var ref = [];

                if(jfgrid.getObjType(data_ref) == "array"){
                    if(jfgrid.getObjType(data_ref[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_ref)){
                        return jfgrid.formula.error.v;
                    }

                    ref = ref.concat(jfgrid.func_methods.getDataArr(data_ref, true));
                }
                else if(jfgrid.getObjType(data_ref) == "object" && data_ref.startCell != null){
                    ref = ref.concat(jfgrid.func_methods.getCellDataArr(data_ref, "number", true));
                }
                else{
                    ref.push(data_ref);
                }

                var ref_n = [];

                for(var j = 0; j < ref.length; j++){
                    var num = ref[j];

                    if(!jfgrid.func_methods.isRealNum(num)){
                        return jfgrid.formula.error.v;
                    }

                    num = parseFloat(num);

                    ref_n.push(num);
                }

                //要按升序还是按降序考虑“data”中的值
                if(arguments.length == 3){
                    var order = jfgrid.func_methods.getCellBoolen(arguments[2]);

                    if(jfgrid.func_methods.valueIsError(order)){
                        return order;
                    }
                }
                else{
                    var order = false;
                }

                //计算
                var sort = (order) ? function(a, b) {
                    return a - b;
                } : function(a, b) {
                    return b - a;
                };

                ref_n = ref_n.sort(sort);

                var index = ref_n.indexOf(number);

                if(index == -1){
                    return jfgrid.formula.error.na;
                }
                else{
                    return index + 1;
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RANK_AVG": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要确定其排名的值
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //包含相关数据集的数组或范围
                var data_ref = arguments[1];
                var ref = [];

                if(jfgrid.getObjType(data_ref) == "array"){
                    if(jfgrid.getObjType(data_ref[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_ref)){
                        return jfgrid.formula.error.v;
                    }

                    ref = ref.concat(jfgrid.func_methods.getDataArr(data_ref, true));
                }
                else if(jfgrid.getObjType(data_ref) == "object" && data_ref.startCell != null){
                    ref = ref.concat(jfgrid.func_methods.getCellDataArr(data_ref, "number", true));
                }
                else{
                    ref.push(data_ref);
                }

                var ref_n = [];

                for(var j = 0; j < ref.length; j++){
                    var num = ref[j];

                    if(!jfgrid.func_methods.isRealNum(num)){
                        return jfgrid.formula.error.v;
                    }

                    num = parseFloat(num);

                    ref_n.push(num);
                }

                //要按升序还是按降序考虑“data”中的值
                if(arguments.length == 3){
                    var order = jfgrid.func_methods.getFirstValue(arguments[2]);

                    if(jfgrid.func_methods.valueIsError(order)){
                        return order;
                    }

                    if(jfgrid.getObjType(order) == "boolean"){

                    }
                    else if(jfgrid.getObjType(order) == "string" && (order.toLowerCase() == "true" || order.toLowerCase() == "false")){
                        if(order.toLowerCase() == "true"){
                            order = true;
                        }

                        if(order.toLowerCase() == "false"){
                            order = false;
                        }
                    }
                    else if(jfgrid.func_methods.isRealNum(order)){
                        order = parseFloat(order);

                        order = order == 0 ? false : true;
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }
                else{
                    var order = false;
                }

                //计算
                var sort = (order) ? function(a, b) {
                    return a - b;
                } : function(a, b) {
                    return b - a;
                };

                ref_n = ref_n.sort(sort);

                var count = 0;
                for (var i = 0; i < ref_n.length; i++) {
                    if (ref_n[i] == number) {
                        count++;
                    }
                }

                return (count > 1) ? (2 * ref_n.indexOf(number) + count + 1) / 2 : ref_n.indexOf(number) + 1;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PERCENTRANK_EXC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //包含相关数据集的数组或范围
                var data_ref = arguments[0];
                var ref = [];

                if(jfgrid.getObjType(data_ref) == "array"){
                    if(jfgrid.getObjType(data_ref[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_ref)){
                        return jfgrid.formula.error.v;
                    }

                    ref = ref.concat(jfgrid.func_methods.getDataArr(data_ref, true));
                }
                else if(jfgrid.getObjType(data_ref) == "object" && data_ref.startCell != null){
                    ref = ref.concat(jfgrid.func_methods.getCellDataArr(data_ref, "number", true));
                }
                else{
                    ref.push(data_ref);
                }

                var ref_n = [];

                for(var j = 0; j < ref.length; j++){
                    var number = ref[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    ref_n.push(number);
                }

                //要确定其百分比排位的值
                var x = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //要在计算中使用的有效位数
                if(arguments.length == 3){
                    var significance = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(significance)){
                        return significance;
                    }

                    if(!jfgrid.func_methods.isRealNum(significance)){
                        return jfgrid.formula.error.v;
                    }

                    significance = parseInt(significance);
                }
                else{
                    var significance = 3;
                }

                if(ref_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(significance < 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                if(ref_n.length == 1 && ref_n[0] == x){
                    return 1;
                }

                ref_n = ref_n.sort(function(a, b) {
                    return a - b;
                });
                var uniques = window.jfgrid_function.UNIQUE.f(ref_n)[0];
                
                var n = ref_n.length;
                var m = uniques.length;
                
                var power = Math.pow(10, significance);
                var result = 0;
                var match = false;
                var i = 0;

                while (!match && i < m) {
                    if (x === uniques[i]) {
                        result = (ref_n.indexOf(uniques[i]) + 1) / (n + 1);
                        match = true;
                    } 
                    else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
                        result = (ref_n.lastIndexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);
                        match = true;
                    }

                    i++;
                }

                if(isNaN(result)){
                    return jfgrid.formula.error.na;
                } 
                else{
                    return Math.floor(result * power) / power;
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PERCENTRANK_INC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //包含相关数据集的数组或范围
                var data_ref = arguments[0];
                var ref = [];

                if(jfgrid.getObjType(data_ref) == "array"){
                    if(jfgrid.getObjType(data_ref[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_ref)){
                        return jfgrid.formula.error.v;
                    }

                    ref = ref.concat(jfgrid.func_methods.getDataArr(data_ref, true));
                }
                else if(jfgrid.getObjType(data_ref) == "object" && data_ref.startCell != null){
                    ref = ref.concat(jfgrid.func_methods.getCellDataArr(data_ref, "number", true));
                }
                else{
                    ref.push(data_ref);
                }

                var ref_n = [];

                for(var j = 0; j < ref.length; j++){
                    var number = ref[j];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    number = parseFloat(number);

                    ref_n.push(number);
                }

                //要确定其百分比排位的值
                var x = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //要在计算中使用的有效位数
                if(arguments.length == 3){
                    var significance = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(significance)){
                        return significance;
                    }

                    if(!jfgrid.func_methods.isRealNum(significance)){
                        return jfgrid.formula.error.v;
                    }

                    significance = parseInt(significance);
                }
                else{
                    var significance = 3;
                }

                if(ref_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(significance < 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                if(ref_n.length == 1 && ref_n[0] == x){
                    return 1;
                }

                ref_n = ref_n.sort(function(a, b) {
                    return a - b;
                });
                var uniques = window.jfgrid_function.UNIQUE.f(ref_n)[0];
                
                var n = ref_n.length;
                var m = uniques.length;
                
                var power = Math.pow(10, significance);
                var result = 0;
                var match = false;
                var i = 0;
      
                while (!match && i < m) {
                    if (x === uniques[i]) {
                        result = ref_n.indexOf(uniques[i]) / (n - 1);
                        match = true;
                    } 
                    else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
                        result = (ref_n.lastIndexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);
                        match = true;
                    }

                    i++;
                }

                if(isNaN(result)){
                    return jfgrid.formula.error.na;
                } 
                else{
                    return Math.floor(result * power) / power;
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FORECAST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //x轴上用于预测的值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[1];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[2];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }

                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(jfgrid.func_methods.variance_s(data_x) == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var xmean = jStat.mean(data_x);
                var ymean = jStat.mean(data_y);
                
                var n = data_x.length;
                var num = 0;
                var den = 0;
                
                for (var i = 0; i < n; i++) {
                    num += (data_x[i] - xmean) * (data_y[i] - ymean);
                    den += Math.pow(data_x[i] - xmean, 2);
                }
                
                var b = num / den;
                var a = ymean - b * xmean;

                return a + b * x;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FISHERINV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var y = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(y)){
                    return y;
                }

                if(!jfgrid.func_methods.isRealNum(y)){
                    return jfgrid.formula.error.v;
                }

                y = parseFloat(y);

                var e2y = Math.exp(2 * y);

                return (e2y - 1) / (e2y + 1);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FISHER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                if(x <= -1 || x >= 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.log((1 + x) / (1 - x)) / 2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MODE_SNGL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                var count = {};
                var maxItems = [];
                var max = 0;
                var currentItem;

                for (var i = 0; i < dataArr_n.length; i++) {
                    currentItem = dataArr_n[i];
                    count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;
                    
                    if (count[currentItem] > max) {
                        max = count[currentItem];
                        maxItems = [];
                    }
                    
                    if (count[currentItem] == max) {
                        maxItems[maxItems.length] = currentItem;
                    }
                }

                if(max <= 1){
                    return jfgrid.formula.error.na;
                }

                var resultIndex = dataArr_n.indexOf(maxItems[0]);

                for(var j = 0; j < maxItems.length; j++){
                    var index = dataArr_n.indexOf(maxItems[j]);

                    if(index < resultIndex){
                        resultIndex = index;
                    }
                }

                return dataArr_n[resultIndex];
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "WEIBULL_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //WEIBULL 分布函数的输入值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //Weibull 分布函数的形状参数
                var alpha = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(alpha)){
                    return alpha;
                }

                if(!jfgrid.func_methods.isRealNum(alpha)){
                    return jfgrid.formula.error.v;
                }

                alpha = parseFloat(alpha);

                //Weibull 分布函数的尺度参数
                var beta = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(beta)){
                    return beta;
                }

                if(!jfgrid.func_methods.isRealNum(beta)){
                    return jfgrid.formula.error.v;
                }

                beta = parseFloat(beta);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);

                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(x < 0 || alpha <= 0 || beta <= 0){
                    return jfgrid.formula.error.nm;
                }
                
                return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AVEDEV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                return jStat.sum(jStat(dataArr_n).subtract(jStat.mean(dataArr_n)).abs()[0]) / dataArr_n.length;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AVERAGEA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(number.toString.toLowerCase() == "true"){
                            dataArr.push(1);
                        }
                        else if(number.toString.toLowerCase() == "false"){
                            dataArr.push(0);
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }

                var sum = 0,
                    count = 0;

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        sum += parseFloat(number);
                    }
                    else{
                        if(number.toString().toLowerCase() == "true"){
                            sum += 1;
                        }
                        else{
                            sum += 0;    
                        }
                    }

                    count++;
                }

                if(count == 0){
                    return jfgrid.formula.error.d;
                }

                return sum / count;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BINOM_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //试验的成功次数
                var number_s = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number_s)){
                    return number_s;
                }

                if(!jfgrid.func_methods.isRealNum(number_s)){
                    return jfgrid.formula.error.v;
                }

                number_s = parseInt(number_s);

                //独立检验的次数
                var trials = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(trials)){
                    return trials;
                }

                if(!jfgrid.func_methods.isRealNum(trials)){
                    return jfgrid.formula.error.v;
                }

                trials = parseInt(trials);

                //任一给定检验的成功概率
                var probability_s = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(probability_s)){
                    return probability_s;
                }

                if(!jfgrid.func_methods.isRealNum(probability_s)){
                    return jfgrid.formula.error.v;
                }

                probability_s = parseFloat(probability_s);

                //是否使用二项式累积分布
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(number_s < 0 || number_s > trials){
                    return jfgrid.formula.error.nm;
                }
                
                if(probability_s < 0 || probability_s > 1){
                    return jfgrid.formula.error.nm;
                }
                
                return (cumulative) ? jStat.binomial.cdf(number_s, trials, probability_s) : jStat.binomial.pdf(number_s, trials, probability_s);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BINOM_INV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //贝努利试验次数
                var trials = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(trials)){
                    return trials;
                }

                if(!jfgrid.func_methods.isRealNum(trials)){
                    return jfgrid.formula.error.v;
                }

                trials = parseInt(trials);

                //任一次给定检验的成功概率
                var probability_s = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(probability_s)){
                    return probability_s;
                }

                if(!jfgrid.func_methods.isRealNum(probability_s)){
                    return jfgrid.formula.error.v;
                }

                probability_s = parseFloat(probability_s);

                //期望的临界概率
                var alpha = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(alpha)){
                    return alpha;
                }

                if(!jfgrid.func_methods.isRealNum(alpha)){
                    return jfgrid.formula.error.v;
                }

                alpha = parseFloat(alpha);

                if(trials < 0){
                    return jfgrid.formula.error.nm;
                }

                if(probability_s < 0 || probability_s > 1){
                    return jfgrid.formula.error.nm;
                }

                if(alpha < 0 || alpha > 1){
                    return jfgrid.formula.error.nm;
                }
                
                //计算
                var x = 0;
                while (x <= trials) {
                    if (jStat.binomial.cdf(x, trials, probability_s) >= alpha) {
                        return x;
                    }

                    x++;
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CONFIDENCE_NORM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //置信水平
                var alpha = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(alpha)){
                    return alpha;
                }

                if(!jfgrid.func_methods.isRealNum(alpha)){
                    return jfgrid.formula.error.v;
                }

                alpha = parseFloat(alpha);

                //数据区域的总体标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    return jfgrid.formula.error.v;
                }

                standard_dev = parseFloat(standard_dev);

                //样本总量的大小
                var size = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(size)){
                    return size;
                }

                if(!jfgrid.func_methods.isRealNum(size)){
                    return jfgrid.formula.error.v;
                }

                size = parseInt(size);

                if(alpha <= 0 || alpha >= 1){
                    return jfgrid.formula.error.nm;
                }
                
                if(standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }
                
                if(size < 1){
                    return jfgrid.formula.error.nm;
                }
                
                return jStat.normalci(1, alpha, standard_dev, size)[1] - 1;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CORREL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[0];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[1];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }

                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(data_y.length == 0 || data_x.length == 0 || jfgrid.func_methods.standardDeviation(data_y) == 0 || jfgrid.func_methods.standardDeviation(data_x) == 0){
                    return jfgrid.formula.error.d;
                }

                return jStat.corrcoeff(data_y, data_x);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COVARIANCE_P": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[0];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }

                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[1];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                if(known_x.length != known_y.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < known_x.length; i++){
                    var num_x = known_x[i];
                    var num_y = known_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                if(data_x.length == 0 || data_y.length == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var mean1 = jStat.mean(data_x);
                var mean2 = jStat.mean(data_y);
      
                var result = 0;

                for (var i = 0; i < data_x.length; i++) {
                    result += (data_x[i] - mean1) * (data_y[i] - mean2);
                }

                result = result / data_x.length;
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COVARIANCE_S": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[0];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }

                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[1];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                if(known_x.length != known_y.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < known_x.length; i++){
                    var num_x = known_x[i];
                    var num_y = known_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                if(data_x.length == 0 || data_y.length == 0){
                    return jfgrid.formula.error.d;
                }

                return jStat.covariance(data_x, data_y);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DEVSQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            if(jfgrid.getObjType(data) == "boolean"){
                                if(data.toString().toLowerCase() == "true"){
                                    dataArr.push(1);
                                }
                                else if(data.toString().toLowerCase() == "false"){
                                    dataArr.push(0);
                                }
                            }
                            else{
                                return jfgrid.formula.error.v;
                            }
                        }
                        else{
                            dataArr.push(data);
                        }
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                var mean = jStat.mean(dataArr_n);
                var result = 0;
                
                for (var i = 0; i < dataArr_n.length; i++) {
                    result += Math.pow((dataArr_n[i] - mean), 2);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EXPON_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //指数分布函数的输入值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //用于指定指数分布函数的 lambda 值
                var lambda = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(lambda)){
                    return lambda;
                }

                if(!jfgrid.func_methods.isRealNum(lambda)){
                    return jfgrid.formula.error.v;
                }

                lambda = parseFloat(lambda);

                //是否使用指数累积分布
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[2]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(x < 0){
                    return jfgrid.formula.error.nm;
                }

                if(lambda < 0){
                    return jfgrid.formula.error.nm;
                }
                
                return (cumulative) ? jStat.exponential.cdf(x, lambda) : jStat.exponential.pdf(x, lambda);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AVERAGEIF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var sum = 0;
                var count = 0;
                
                var rangeData = arguments[0].data; 
                var rangeRow = arguments[0].rowl;
                var rangeCol = arguments[0].coll;
                var criteria = jfgrid_parseData(arguments[1]);
                var sumRangeData = [];

                //如果有第三个参数
                if(arguments[2]){
                    //根据选择的目标的区域确定实际目标区域
                    //初始位置
                    var sumRangeStart = arguments[2].startCell;
                    var sumRangeRow = arguments[2].rowl;
                    var sumRangeCol = arguments[2].coll;
                    var sumRangeSheet = arguments[2].sheetName;

                    if(rangeRow == sumRangeRow && rangeCol == sumRangeCol){
                        sumRangeData = arguments[2].data;
                    }
                    else{
                        var row=[],col=[];
                        var sumRangeEnd = "";
                        var realSumRange = "";
                        //console.log("开始位置！！！",sumRangeStart,typeof(sumRangeStart));
                        row[0] = parseInt(sumRangeStart.replace(/[^0-9]/g,"")) - 1;
                        col[0] = jfgrid.jfgridABCatNum(sumRangeStart.replace(/[^A-Za-z]/g,""));

                        //根据第一个范围的长宽确定目标范围的末尾位置
                        row[1] = row[0] + rangeRow - 1;
                        col[1] = col[0] + rangeCol - 1;

                        //console.log(row[0],col[0],row[1],col[1]);
                        //末尾位置转化为sheet格式：如 F4 
                        var real_ABC = jfgrid.jfgridchatatABC(col[1]);
                        var real_Num = row[1] + 1;
                        sumRangeEnd = real_ABC + real_Num;
                        //console.log("合成新的末尾位置：" + sumRangeEnd);

                        realSumRange = sumRangeSheet + "!" +sumRangeStart + ":" + sumRangeEnd;
                        sumRangeData = jfgrid_getcelldata(realSumRange).data;
                        //console.log("最终的目标范围：",sumRangeData);
                    }

                    sumRangeData = jfgrid.formula.getRangeArray(sumRangeData)[0];            
                }
                rangeData = jfgrid.formula.getRangeArray(rangeData)[0];

                //循环遍历查找匹配项
                for(var i = 0; i < rangeData.length;i++){
                    var v = rangeData[i];
                    if(!!v && jfgrid.formula.acompareb(v, criteria)){
                        var vnow = sumRangeData[i] || v;

                        if(!jfgrid.func_methods.isRealNum(vnow)){
                            continue;
                        }
                        
                        sum += parseFloat(vnow);
                        count++;
                    }
                }

                if(sum == 0 || count == 0){
                    return jfgrid.formula.error.d;
                }
                else{
                    return jfgrid.numFormat(sum / count);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AVERAGEIFS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var sum = 0;
                var count = 0;
                var args = arguments;
                jfgrid_getValue(args);
                var rangeData = jfgrid.formula.getRangeArray(args[0])[0];
                var results = new Array(rangeData.length);
                for(var i = 0;i < results.length; i++){
                    results[i] = true;
                }
                for(var i = 1; i < args.length; i += 2){
                    var range = jfgrid.formula.getRangeArray(args[i])[0];
                    var criteria = args[i+1];
                    for(var j = 0; j < range.length; j++){
                        var v = range[j];
                        results[j] = results[j] && (!!v) && jfgrid.formula.acompareb(v,criteria);
                    }
                }
                for(var i = 0; i < rangeData.length; i++){
                    if(results[i] && jfgrid.func_methods.isRealNum(rangeData[i])){
                        sum += parseFloat(rangeData[i]);
                        count ++;
                    }
                }

                if(sum == 0 || count == 0){
                    return jfgrid.formula.error.d;
                }
                else{
                    return jfgrid.numFormat(sum / count);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PERMUT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //表示对象个数的整数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);

                //表示每个排列中对象个数的整数
                var number_chosen = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_chosen)){
                    return number_chosen;
                }

                if(!jfgrid.func_methods.isRealNum(number_chosen)){
                    return jfgrid.formula.error.v;
                }

                number_chosen = parseInt(number_chosen);

                if(number <= 0 || number_chosen < 0){
                    return jfgrid.formula.error.nm;
                }

                if(number < number_chosen){
                    return jfgrid.formula.error.nm;
                }

                return jfgrid.func_methods.factorial(number) / jfgrid.func_methods.factorial(number - number_chosen);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRIMMEAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //包含相关数据集的数组或范围
                var data_dataArr = arguments[0];
                var dataArr = [];

                if(jfgrid.getObjType(data_dataArr) == "array"){
                    if(jfgrid.getObjType(data_dataArr[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_dataArr)){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data_dataArr, false));
                }
                else if(jfgrid.getObjType(data_dataArr) == "object" && data_dataArr.startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data_dataArr, "number", false));
                }
                else{
                    dataArr.push(data_dataArr);
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                //排除比例
                var percent = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(percent)){
                    return percent;
                }

                if(!jfgrid.func_methods.isRealNum(percent)){
                    return jfgrid.formula.error.v;
                }

                percent = parseFloat(percent);

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(percent < 0 || percent > 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                function rest(array, idx) {
                    idx = idx || 1;
                    if (!array || typeof array.slice !== 'function') {
                        return array;
                    }
                    return array.slice(idx);
                };

                function initial(array, idx) {
                    idx = idx || 1;
                    if (!array || typeof array.slice !== 'function') {
                        return array;
                    }
                    return array.slice(0, array.length - idx);
                };
                
                dataArr_n.sort(function(a, b) {
                    return a - b;
                })

                var trim = window.jfgrid_function.FLOOR.f(dataArr_n.length * percent, 2) / 2;

                var result = rest(dataArr_n, trim);
                result = initial(result, trim);
                result = jStat.mean(result);

                return result;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PERCENTILE_EXC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //定义相对位置的数组或数据区域
                var data_dataArr = arguments[0];
                var dataArr = [];

                if(jfgrid.getObjType(data_dataArr) == "array"){
                    if(jfgrid.getObjType(data_dataArr[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_dataArr)){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data_dataArr, false));
                }
                else if(jfgrid.getObjType(data_dataArr) == "object" && data_dataArr.startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data_dataArr, "number", false));
                }
                else{
                    dataArr.push(data_dataArr);
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                //0 到 1 之间的百分点值，不包含 0 和 1
                var k = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(k)){
                    return k;
                }

                if(!jfgrid.func_methods.isRealNum(k)){
                    return jfgrid.formula.error.v;
                }

                k = parseFloat(k);

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(k <= 0 || k >= 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                dataArr_n = dataArr_n.sort(function(a, b) {
                    return a - b;
                });

                var n = dataArr_n.length;
                
                if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {
                    return jfgrid.formula.error.nm;
                }

                var l = k * (n + 1) - 1;
                var fl = Math.floor(l);

                return (l === fl) ? dataArr_n[l] : dataArr_n[fl] + (l - fl) * (dataArr_n[fl + 1] - dataArr_n[fl]);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PERCENTILE_INC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //定义相对位置的数组或数据区域
                var data_dataArr = arguments[0];
                var dataArr = [];

                if(jfgrid.getObjType(data_dataArr) == "array"){
                    if(jfgrid.getObjType(data_dataArr[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_dataArr)){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data_dataArr, false));
                }
                else if(jfgrid.getObjType(data_dataArr) == "object" && data_dataArr.startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data_dataArr, "number", false));
                }
                else{
                    dataArr.push(data_dataArr);
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                //0 到 1 之间的百分点值，不包含 0 和 1
                var k = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(k)){
                    return k;
                }

                if(!jfgrid.func_methods.isRealNum(k)){
                    return jfgrid.formula.error.v;
                }

                k = parseFloat(k);

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(k < 0 || k > 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                dataArr_n = dataArr_n.sort(function(a, b) {
                    return a - b;
                });

                var n = dataArr_n.length;
                
                var l = k * (n - 1);
                var fl = Math.floor(l);

                return (l === fl) ? dataArr_n[l] : dataArr_n[fl] + (l - fl) * (dataArr_n[fl + 1] - dataArr_n[fl]);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PEARSON": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[0];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    known_x.push(data_known_x);
                }

                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[1];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    known_y.push(data_known_y);
                }

                if(known_x.length != known_y.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < known_x.length; i++){
                    var num_x = known_x[i];
                    var num_y = known_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                if(data_y.length == 0 || data_x.length == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var xmean = jStat.mean(data_x);
                var ymean = jStat.mean(data_y);
                
                var n = data_x.length;
                var num = 0;
                var den1 = 0;
                var den2 = 0;
                
                for (var i = 0; i < n; i++) {
                    num += (data_x[i] - xmean) * (data_y[i] - ymean);
                    den1 += Math.pow(data_x[i] - xmean, 2);
                    den2 += Math.pow(data_y[i] - ymean, 2);
                }

                return num / Math.sqrt(den1 * den2);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NORM_S_INV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //对应于正态分布的概率
                var probability = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(probability)){
                    return probability;
                }

                if(!jfgrid.func_methods.isRealNum(probability)){
                    return jfgrid.formula.error.v;
                }

                probability = parseFloat(probability);

                if(probability <= 0 || probability >= 1){
                    return jfgrid.formula.error.nm;
                }

                return jStat.normal.inv(probability, 0, 1);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NORM_S_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //需要计算其分布的数值
                var z = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(z)){
                    return z;
                }

                if(!jfgrid.func_methods.isRealNum(z)){
                    return jfgrid.formula.error.v;
                }

                z = parseFloat(z);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[1]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                return (cumulative) ? jStat.normal.cdf(z, 0, 1) : jStat.normal.pdf(z, 0, 1);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NORM_INV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //对应于正态分布的概率
                var probability = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(probability)){
                    return probability;
                }

                if(!jfgrid.func_methods.isRealNum(probability)){
                    if(jfgrid.getObjType(probability) == "boolean"){
                        if(probability.toString().toLowerCase() == "true"){
                            probability = 1;
                        }
                        else if(probability.toString().toLowerCase() == "false"){
                            probability = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                probability = parseFloat(probability);

                //分布的算术平均值
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    if(jfgrid.getObjType(mean) == "boolean"){
                        if(mean.toString().toLowerCase() == "true"){
                            mean = 1;
                        }
                        else if(mean.toString().toLowerCase() == "false"){
                            mean = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                mean = parseFloat(mean);

                //分布的标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    if(jfgrid.getObjType(standard_dev) == "boolean"){
                        if(standard_dev.toString().toLowerCase() == "true"){
                            standard_dev = 1;
                        }
                        else if(standard_dev.toString().toLowerCase() == "false"){
                            standard_dev = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                standard_dev = parseFloat(standard_dev);

                if(probability <= 0 || probability >= 1){
                    return jfgrid.formula.error.nm;
                }

                if(standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                return jStat.normal.inv(probability, mean, standard_dev);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NORM_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //需要计算其分布的数值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    if(jfgrid.getObjType(x) == "boolean"){
                        if(x.toString().toLowerCase() == "true"){
                            x = 1;
                        }
                        else if(x.toString().toLowerCase() == "false"){
                            x = 0;
                        }
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }

                x = parseFloat(x);

                //分布的算术平均值 
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    return jfgrid.formula.error.v;
                }

                mean = parseFloat(mean);

                //分布的标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    return jfgrid.formula.error.v;
                }

                standard_dev = parseFloat(standard_dev);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }

                return (cumulative) ? jStat.normal.cdf(x, mean, standard_dev) : jStat.normal.pdf(x, mean, standard_dev);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NEGBINOM_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要模拟的失败次数
                var number_f = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number_f)){
                    return number_f;
                }

                if(!jfgrid.func_methods.isRealNum(number_f)){
                    return jfgrid.formula.error.v;
                }

                number_f = parseInt(number_f);

                //要模拟的成功次数 
                var number_s = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_s)){
                    return number_s;
                }

                if(!jfgrid.func_methods.isRealNum(number_s)){
                    return jfgrid.formula.error.v;
                }

                number_s = parseInt(number_s);

                //任一次给定检验的成功概率
                var probability_s = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(probability_s)){
                    return probability_s;
                }

                if(!jfgrid.func_methods.isRealNum(probability_s)){
                    return jfgrid.formula.error.v;
                }

                probability_s = parseFloat(probability_s);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(probability_s < 0 || probability_s > 1){
                    return jfgrid.formula.error.nm;
                }

                if(number_f < 0 || number_s < 1){
                    return jfgrid.formula.error.nm;
                }

                return (cumulative) ? jStat.negbin.cdf(number_f, number_s, probability_s) : jStat.negbin.pdf(number_f, number_s, probability_s);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MINA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(number.toString.toLowerCase() == "true"){
                            dataArr.push(1);
                        }
                        else if(number.toString.toLowerCase() == "false"){
                            dataArr.push(0);
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                    else{
                        if(number.toString().toLowerCase() == "true"){
                            dataArr_n.push(1);
                        }
                        else{
                            dataArr_n.push(0);
                        }
                    }
                }

                return (dataArr_n.length === 0) ? 0 : Math.min.apply(Math, dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MEDIAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }
                        
                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                return jStat.median(dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MAXA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(number.toString.toLowerCase() == "true"){
                            dataArr.push(1);
                        }
                        else if(number.toString.toLowerCase() == "false"){
                            dataArr.push(0);
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                    else{
                        if(number.toString().toLowerCase() == "true"){
                            dataArr_n.push(1);
                        }
                        else{
                            dataArr_n.push(0);
                        }
                    }
                }

                return (dataArr_n.length === 0) ? 0 : Math.max.apply(Math, dataArr_n);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOGNORM_INV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //与对数分布相关的概率
                var probability = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(probability)){
                    return probability;
                }

                if(!jfgrid.func_methods.isRealNum(probability)){
                    return jfgrid.formula.error.v;
                }

                probability = parseFloat(probability);

                //ln(x) 的平均值
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    return jfgrid.formula.error.v;
                }

                mean = parseFloat(mean);

                //ln(x) 的标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    return jfgrid.formula.error.v;
                }

                standard_dev = parseFloat(standard_dev);

                if(probability <= 0 || probability >= 1){
                    return jfgrid.formula.error.nm;
                }

                if(standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }

                return jStat.lognormal.inv(probability, mean, standard_dev);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOGNORM_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //与对数分布相关的概率
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //ln(x) 的平均值
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    return jfgrid.formula.error.v;
                }

                mean = parseFloat(mean);

                //ln(x) 的标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    return jfgrid.formula.error.v;
                }

                standard_dev = parseFloat(standard_dev);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(x <= 0 || standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }

                return (cumulative) ? jStat.lognormal.cdf(x, mean, standard_dev) : jStat.lognormal.pdf(x, mean, standard_dev);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "Z_TEST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用来检验 x 的数组或数据区域
                var dataArr = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(arguments[0], true));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", true));
                }
                else{
                    dataArr.push(arguments[0]);
                }

                var dataArr_n = [];

                for(var j = 0; j < dataArr.length; j++){
                    var number = dataArr[j];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                //要测试的值
                var x = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.na;
                }

                //总体（已知）标准偏差。 如果省略，则使用样本标准偏差
                var sigma = jfgrid.func_methods.standardDeviation_s(dataArr_n);
                if(arguments.length == 3){
                    sigma = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(sigma)){
                        return sigma;
                    }

                    if(!jfgrid.func_methods.isRealNum(sigma)){
                        return jfgrid.formula.error.v;
                    }

                    sigma = parseFloat(sigma);
                }

                //计算
                var n = dataArr_n.length;
                var mean = window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, dataArr_n);

                return 1 - window.jfgrid_function.NORM_S_DIST.f((mean - x) / (sigma / Math.sqrt(n)), "true");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PROB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //x_range
                var data_x_range = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    data_x_range = data_x_range.concat(jfgrid.func_methods.getDataArr(arguments[0], false));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    data_x_range = data_x_range.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", false));
                }
                else{
                    data_x_range.push(arguments[0]);
                }

                //prob_range
                var data_prob_range = [];

                if(jfgrid.getObjType(arguments[1]) == "array"){
                    if(jfgrid.getObjType(arguments[1][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    data_prob_range = data_prob_range.concat(jfgrid.func_methods.getDataArr(arguments[1], false));
                }
                else if(jfgrid.getObjType(arguments[1]) == "object" && arguments[1].startCell != null){
                    data_prob_range = data_prob_range.concat(jfgrid.func_methods.getCellDataArr(arguments[1], "text", false));
                }
                else{
                    data_prob_range.push(arguments[1]);
                }

                if(data_x_range.length != data_prob_range.length){
                    return jfgrid.formula.error.na;
                }

                //data_x_range 和 data_prob_range 只取数值
                var x_range = [], prob_range = [], prob_range_sum = 0;

                for(var i = 0; i < data_x_range.length; i++){
                    var num_x_range = data_x_range[i];
                    var num_prob_range = data_prob_range[i];

                    if(jfgrid.func_methods.isRealNum(num_x_range) && jfgrid.func_methods.isRealNum(num_prob_range)){
                        x_range.push(parseFloat(num_x_range));
                        prob_range.push(parseFloat(num_prob_range));

                        prob_range_sum += parseFloat(num_prob_range);

                        if(parseFloat(num_prob_range) <= 0 || parseFloat(num_prob_range) > 1){
                            return jfgrid.formula.error.nm;
                        }
                    }
                }

                if(prob_range_sum != 1){
                    return jfgrid.formula.error.nm;
                }

                //要计算其概率的数值下界
                var lower_limit = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(lower_limit)){
                    return lower_limit;
                }

                if(!jfgrid.func_methods.isRealNum(lower_limit)){
                    return jfgrid.formula.error.v;
                }

                lower_limit = parseFloat(lower_limit);

                //要计算其概率的数值上界
                var upper_limit = lower_limit;
                if(arguments.length == 4){
                    upper_limit = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(upper_limit)){
                        return upper_limit;
                    }

                    if(!jfgrid.func_methods.isRealNum(upper_limit)){
                        return jfgrid.formula.error.v;
                    }

                    upper_limit = parseFloat(upper_limit);
                }

                //计算
                var result = 0;
                
                for (var i = 0; i < x_range.length; i++) {
                    if (x_range[i] >= lower_limit && x_range[i] <= upper_limit) {
                        result += prob_range[i];
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "QUARTILE_EXC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要求得四分位数值的数组或数字型单元格区域
                var data_array = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    data_array = data_array.concat(jfgrid.func_methods.getDataArr(arguments[0], true));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    data_array = data_array.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", true));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    data_array.push(arguments[0]);
                }

                var array = [];

                for(var i = 0; i < data_array.length; i++){
                    var number = data_array[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        array.push(parseFloat(number));
                    }
                }

                //要返回第几个四分位值
                var quart = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(quart)){
                    return quart;
                }

                if(!jfgrid.func_methods.isRealNum(quart)){
                    return jfgrid.formula.error.v;
                }

                quart = parseInt(quart);

                if(array.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(quart <= 0 || quart >= 4){
                    return jfgrid.formula.error.nm;
                }

                //计算
                switch (quart) {
                    case 1:
                        return window.jfgrid_function.PERCENTILE_EXC.f(array, 0.25);
                    case 2:
                        return window.jfgrid_function.PERCENTILE_EXC.f(array, 0.5);
                    case 3:
                        return window.jfgrid_function.PERCENTILE_EXC.f(array, 0.75);
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "QUARTILE_INC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要求得四分位数值的数组或数字型单元格区域
                var data_array = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    data_array = data_array.concat(jfgrid.func_methods.getDataArr(arguments[0], true));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    data_array = data_array.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", true));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    data_array.push(arguments[0]);
                }

                var array = [];

                for(var i = 0; i < data_array.length; i++){
                    var number = data_array[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        array.push(parseFloat(number));
                    }
                }

                //要返回第几个四分位值
                var quart = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(quart)){
                    return quart;
                }

                if(!jfgrid.func_methods.isRealNum(quart)){
                    return jfgrid.formula.error.v;
                }

                quart = parseInt(quart);

                if(array.length == 0){
                    return jfgrid.formula.error.nm;
                }

                if(quart < 0 || quart > 4){
                    return jfgrid.formula.error.nm;
                }

                //计算
                switch (quart) {
                    case 0:
                        return Math.min.apply(Math, array);
                    case 1:
                        return window.jfgrid_function.PERCENTILE_INC.f(array, 0.25);
                    case 2:
                        return window.jfgrid_function.PERCENTILE_INC.f(array, 0.5);
                    case 3:
                        return window.jfgrid_function.PERCENTILE_INC.f(array, 0.75);
                    case 4:
                        return Math.max.apply(Math, array);
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "POISSON_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //事件数
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseInt(x);

                //期望值
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    return jfgrid.formula.error.v;
                }

                mean = parseFloat(mean);
                
                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[2]);

                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(x < 0 || mean < 0){
                    return jfgrid.formula.error.nm;
                }

                return (cumulative) ? jStat.poisson.cdf(x, mean) : jStat.poisson.pdf(x, mean);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RSQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表因变量数据数组或矩阵的范围
                var data_known_y = arguments[0];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(data_known_y, false));
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(data_known_y, "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y.push(data_known_y);
                }

                //代表自变量数据数组或矩阵的范围
                var data_known_x = arguments[1];
                var known_x = [];

                if(jfgrid.getObjType(data_known_x) == "array"){
                    if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(data_known_x, false));
                }
                else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(data_known_x, "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_known_x)){
                        return jfgrid.formula.error.v;
                    }

                    known_x.push(data_known_x);
                }

                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(data_y.length == 0 || data_x.length == 0){
                    return jfgrid.formula.error.d;
                }

                return Math.pow(window.jfgrid_function.PEARSON.f(data_y, data_x), 2);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //T-分布函数的输入
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //自由度数值
                var degrees_freedom = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom)){
                    return degrees_freedom;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom = parseInt(degrees_freedom);

                //决定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[2]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(degrees_freedom < 1){
                    return jfgrid.formula.error.nm;
                }

                return (cumulative) ? jStat.studentt.cdf(x, degrees_freedom) : jStat.studentt.pdf(x, degrees_freedom);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_DIST_2T": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //T-分布函数的输入
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //自由度数值
                var degrees_freedom = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom)){
                    return degrees_freedom;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom = parseInt(degrees_freedom);

                if(x < 0 || degrees_freedom < 1){
                    return jfgrid.formula.error.nm;
                }

                return (1 - jStat.studentt.cdf(x , degrees_freedom)) * 2;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_DIST_RT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //T-分布函数的输入
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //自由度数值
                var degrees_freedom = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom)){
                    return degrees_freedom;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom = parseInt(degrees_freedom);

                if(degrees_freedom < 1){
                    return jfgrid.formula.error.nm;
                }

                return 1 - jStat.studentt.cdf(x , degrees_freedom);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_INV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //与学生的 t 分布相关的概率
                var probability = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(probability)){
                    return probability;
                }

                if(!jfgrid.func_methods.isRealNum(probability)){
                    return jfgrid.formula.error.v;
                }

                probability = parseFloat(probability);

                //自由度数值
                var deg_freedom = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(deg_freedom)){
                    return deg_freedom;
                }

                if(!jfgrid.func_methods.isRealNum(deg_freedom)){
                    return jfgrid.formula.error.v;
                }

                deg_freedom = parseInt(deg_freedom);

                if(probability <= 0 || probability > 1){
                    return jfgrid.formula.error.nm;
                }

                if(deg_freedom < 1){
                    return jfgrid.formula.error.nm;
                }

                return jStat.studentt.inv(probability, deg_freedom);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_INV_2T": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //与学生的 t 分布相关的概率
                var probability = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(probability)){
                    return probability;
                }

                if(!jfgrid.func_methods.isRealNum(probability)){
                    return jfgrid.formula.error.v;
                }

                probability = parseFloat(probability);

                //自由度数值
                var deg_freedom = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(deg_freedom)){
                    return deg_freedom;
                }

                if(!jfgrid.func_methods.isRealNum(deg_freedom)){
                    return jfgrid.formula.error.v;
                }

                deg_freedom = parseInt(deg_freedom);

                if(probability <= 0 || probability > 1){
                    return jfgrid.formula.error.nm;
                }

                if(deg_freedom < 1){
                    return jfgrid.formula.error.nm;
                }

                return Math.abs(jStat.studentt.inv(probability / 2, deg_freedom));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T_TEST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //第一个数据集
                var known_x = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(arguments[0], false));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_x.push(arguments[0]);
                }

                // var data_x = [];
                var data_x = known_x;

                //第二个数据集
                var known_y = [];

                if(jfgrid.getObjType(arguments[1]) == "array"){
                    if(jfgrid.getObjType(arguments[1][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(arguments[1], false));
                }
                else if(jfgrid.getObjType(arguments[1]) == "object" && arguments[1].startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(arguments[1], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_y.push(arguments[1]);
                }

                // var data_y = [];
                var data_y = known_y;

                //指定分布的尾数
                var tails = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(tails)){
                    return tails;
                }

                if(!jfgrid.func_methods.isRealNum(tails)){
                    return jfgrid.formula.error.v;
                }

                tails = parseInt(tails);

                //指定 t 检验的类型
                var type = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(type)){
                    return type;
                }

                if(!jfgrid.func_methods.isRealNum(type)){
                    return jfgrid.formula.error.v;
                }

                type = parseInt(type);

                if([1,2].indexOf(tails) == -1){
                    return jfgrid.formula.error.nm;
                }

                if([1,2,3].indexOf(type) == -1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var t = null, df = null;
                if(type == 1){
                    var diff_arr = [];

                    for (i = 0; i < data_x.length; i++) {
                        diff_arr.push(data_x[i] - data_y[i]);
                    }

                    var diff_mean = Math.abs(jStat.mean(diff_arr));
                    var diff_sd = jfgrid.func_methods.standardDeviation_s(diff_arr);

                    t = diff_mean / (diff_sd / Math.sqrt(data_x.length));
                    df = data_x.length - 1;
                }
                else{
                    var mean_x = jStat.mean(data_x);
                    var mean_y = jStat.mean(data_y);

                    var s_x = jfgrid.func_methods.variance_s(data_x);
                    var s_y = jfgrid.func_methods.variance_s(data_y);

                    t = Math.abs(mean_x - mean_y) / Math.sqrt(s_x / data_x.length + s_y / data_y.length);

                    switch(type){
                        case 2:
                            df = data_x.length + data_y.length - 2;
                            break;
                        case 3:
                            df = Math.pow(s_x / data_x.length + s_y / data_y.length, 2) / (Math.pow(s_x / data_x.length, 2) / (data_x.length - 1) + Math.pow(s_y / data_y.length, 2) / (data_y.length - 1));
                            break;
                    }
                }

                if(tails == 1){
                    var result = window.jfgrid_function.T_DIST_RT.f(t, df);
                }
                else if(tails == 2){
                    var result = window.jfgrid_function.T_DIST_2T.f(t, df);
                }

                return result;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "F_DIST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用来计算函数的值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //分子自由度
                var degrees_freedom1 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom1)){
                    return degrees_freedom1;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom1)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom1 = parseInt(degrees_freedom1);

                //分母自由度
                var degrees_freedom2 = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom2)){
                    return degrees_freedom2;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom2)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom2 = parseInt(degrees_freedom2);

                //用于确定函数形式的逻辑值
                var cumulative = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                if(jfgrid.func_methods.valueIsError(cumulative)){
                    return cumulative;
                }

                if(x < 0){
                    return jfgrid.formula.error.nm;
                }

                if(degrees_freedom1 < 1){
                    return jfgrid.formula.error.nm;
                }

                if(degrees_freedom2 < 1){
                    return jfgrid.formula.error.nm;
                }
                
                return (cumulative) ? jStat.centralF.cdf(x, degrees_freedom1, degrees_freedom2) : jStat.centralF.pdf(x, degrees_freedom1, degrees_freedom2);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "F_DIST_RT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用来计算函数的值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //分子自由度
                var degrees_freedom1 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom1)){
                    return degrees_freedom1;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom1)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom1 = parseInt(degrees_freedom1);

                //分母自由度
                var degrees_freedom2 = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(degrees_freedom2)){
                    return degrees_freedom2;
                }

                if(!jfgrid.func_methods.isRealNum(degrees_freedom2)){
                    return jfgrid.formula.error.v;
                }

                degrees_freedom2 = parseInt(degrees_freedom2);

                if(x < 0){
                    return jfgrid.formula.error.nm;
                }

                if(degrees_freedom1 < 1){
                    return jfgrid.formula.error.nm;
                }

                if(degrees_freedom2 < 1){
                    return jfgrid.formula.error.nm;
                }
                
                return 1 - jStat.centralF.cdf(x, degrees_freedom1, degrees_freedom2);
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VAR_P": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }
                        
                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.d;
                }

                var n = dataArr_n.length;
                var sigma = 0;
                var mean = window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, dataArr_n);
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 2);
                }

                return sigma / n;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VAR_S": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }
                        
                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.d;
                }

                var n = dataArr_n.length;
                var sigma = 0;
                var mean = window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, dataArr_n);
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 2);
                }

                return sigma / (n - 1);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VARA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(number.toString.toLowerCase() == "true"){
                            dataArr.push(1);
                        }
                        else if(number.toString.toLowerCase() == "false"){
                            dataArr.push(0);
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                    else{
                        if(number.toString().toLowerCase() == "true"){
                            dataArr_n.push(1);
                        }
                        else{
                            dataArr_n.push(0);
                        }
                    }
                }

                var n = dataArr_n.length;
                var sigma = 0;
                var mean = window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, dataArr_n);
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 2);
                }

                return sigma / (n - 1);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VARPA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(number.toString.toLowerCase() == "true"){
                            dataArr.push(1);
                        }
                        else if(number.toString.toLowerCase() == "false"){
                            dataArr.push(0);
                        }
                        else if(jfgrid.func_methods.isRealNum(data)){
                            dataArr.push(data);
                        }
                        else{
                            return jfgrid.formula.error.v;
                        }
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                    else{
                        if(number.toString().toLowerCase() == "true"){
                            dataArr_n.push(1);
                        }
                        else{
                            dataArr_n.push(0);
                        }
                    }
                }

                var n = dataArr_n.length;
                var sigma = 0;
                var mean = window.jfgrid_function.AVERAGE.f.apply(window.jfgrid_function.AVERAGE, dataArr_n);
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 2);
                }

                return sigma / n;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STEYX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表因变量数据数组或矩阵的范围
                var known_y = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(arguments[0], false));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_y.push(arguments[0]);
                }

                //代表自变量数据数组或矩阵的范围
                var known_x = [];

                if(jfgrid.getObjType(arguments[1]) == "array"){
                    if(jfgrid.getObjType(arguments[1][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(arguments[1], false));
                }
                else if(jfgrid.getObjType(arguments[1]) == "object" && arguments[1].startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(arguments[1], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_x.push(arguments[1]);
                }

                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(data_y.length < 3 || data_x.length < 3){
                    return jfgrid.formula.error.d;
                }

                //计算
                var xmean = jStat.mean(data_x);
                var ymean = jStat.mean(data_y);
                
                var n = data_x.length;
                var lft = 0;
                var num = 0;
                var den = 0;
                
                for (var i = 0; i < n; i++) {
                    lft += Math.pow(data_y[i] - ymean, 2);
                    num += (data_x[i] - xmean) * (data_y[i] - ymean);
                    den += Math.pow(data_x[i] - xmean, 2);
                }
                
                return Math.sqrt((lft - num * num / den) / (n - 2));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STANDARDIZE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要正态化的随机变量值
                var x = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                if(!jfgrid.func_methods.isRealNum(x)){
                    return jfgrid.formula.error.v;
                }

                x = parseFloat(x);

                //分布的均值
                var mean = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(mean)){
                    return mean;
                }

                if(!jfgrid.func_methods.isRealNum(mean)){
                    return jfgrid.formula.error.v;
                }

                mean = parseFloat(mean);

                //分布的标准偏差
                var standard_dev = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(standard_dev)){
                    return standard_dev;
                }

                if(!jfgrid.func_methods.isRealNum(standard_dev)){
                    return jfgrid.formula.error.v;
                }

                standard_dev = parseFloat(standard_dev);

                if(standard_dev <= 0){
                    return jfgrid.formula.error.nm;
                }

                return (x - mean) / standard_dev;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SMALL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要正态化的随机变量值
                var dataArr = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(arguments[0], true));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "number", true));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }
                    
                    dataArr.push(arguments[0]);
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                //要返回的数据在数组或数据区域里的位置（从小到大）
                var k = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(k)){
                    return k;
                }

                if(!jfgrid.func_methods.isRealNum(k)){
                    return jfgrid.formula.error.v;
                }

                k = parseInt(k);

                if(dataArr_n.length == 0){
                    return jfgrid.formula.error.nm;
                }
                
                if(k <= 0 || k > dataArr_n.length){
                    return jfgrid.formula.error.nm;
                }

                //计算

                return  dataArr_n.sort(function(a, b) {
                            return a - b;
                        })[k - 1];
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SLOPE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //代表因变量数据数组或矩阵的范围
                var known_y = [];

                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_y = known_y.concat(jfgrid.func_methods.getDataArr(arguments[0], false));
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    known_y = known_y.concat(jfgrid.func_methods.getCellDataArr(arguments[0], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[0])){
                        return jfgrid.formula.error.v;
                    }

                    known_y.push(arguments[0]);
                }

                //代表自变量数据数组或矩阵的范围
                var known_x = [];

                if(jfgrid.getObjType(arguments[1]) == "array"){
                    if(jfgrid.getObjType(arguments[1][0]) == "array" && !jfgrid.func_methods.isDyadicArr(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_x = known_x.concat(jfgrid.func_methods.getDataArr(arguments[1], false));
                }
                else if(jfgrid.getObjType(arguments[1]) == "object" && arguments[1].startCell != null){
                    known_x = known_x.concat(jfgrid.func_methods.getCellDataArr(arguments[1], "text", false));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(arguments[1])){
                        return jfgrid.formula.error.v;
                    }

                    known_x.push(arguments[1]);
                }

                if(known_y.length != known_x.length){
                    return jfgrid.formula.error.na;
                }

                //known_y 和 known_x 只取数值
                var data_y = [], data_x = [];

                for(var i = 0; i < known_y.length; i++){
                    var num_y = known_y[i];
                    var num_x = known_x[i];

                    if(jfgrid.func_methods.isRealNum(num_y) && jfgrid.func_methods.isRealNum(num_x)){
                        data_y.push(parseFloat(num_y));
                        data_x.push(parseFloat(num_x));
                    }
                }

                if(data_y.length < 3 || data_x.length < 3){
                    return jfgrid.formula.error.d;
                }

                //计算
                var xmean = jStat.mean(data_x);
                var ymean = jStat.mean(data_y);
                
                var n = data_x.length;
                var num = 0;
                var den = 0;
                
                for (var i = 0; i < n; i++) {
                    num += (data_x[i] - xmean) * (data_y[i] - ymean);
                    den += Math.pow(data_x[i] - xmean, 2);
                }
                
                return num / den;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SKEW": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }
                        
                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                if(dataArr_n.length < 3 || jfgrid.func_methods.standardDeviation_s(dataArr_n) == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var mean = jStat.mean(dataArr_n);
                var n = dataArr_n.length;
                var sigma = 0;
                for (var i = 0; i < n; i++) {
                    sigma += Math.pow(dataArr_n[i] - mean, 3);
                }
                
                return n * sigma / ((n - 1) * (n - 2) * Math.pow(jStat.stdev(dataArr_n, true), 3));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SKEW_P": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var dataArr = [];

                for (var i = 0; i < arguments.length; i++) {
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data)){
                            return jfgrid.formula.error.v;
                        }
                        
                        dataArr.push(data);
                    }
                }

                var dataArr_n = [];

                for(var i = 0; i < dataArr.length; i++){
                    var number = dataArr[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        dataArr_n.push(parseFloat(number));
                    }
                }

                if(dataArr_n.length < 3 || jfgrid.func_methods.standardDeviation_s(dataArr_n) == 0){
                    return jfgrid.formula.error.d;
                }

                //计算
                var mean = jStat.mean(dataArr_n);
                var n = dataArr_n.length;
                var m2 = 0;
                var m3 = 0;

                for (var i = 0; i < n; i++) {
                    m3 += Math.pow(dataArr_n[i] - mean, 3);
                    m2 += Math.pow(dataArr_n[i] - mean, 2);
                }
                
                m3 = m3 / n;
                m2 = m2 / n;
                
                return m3 / Math.pow(m2, 3 / 2);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ADDRESS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //行号
                var row_num = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(row_num)){
                    return row_num;
                }

                if(!jfgrid.func_methods.isRealNum(row_num)){
                    return jfgrid.formula.error.v;
                }

                row_num = parseInt(row_num);

                //列标
                var column_num = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(column_num)){
                    return column_num;
                }

                if(!jfgrid.func_methods.isRealNum(column_num)){
                    return jfgrid.formula.error.v;
                }

                column_num = parseInt(column_num);

                //引用类型
                var abs_num = 1;
                if(arguments.length >= 3){
                    abs_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(abs_num)){
                        return abs_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(abs_num)){
                        return jfgrid.formula.error.v;
                    }

                    abs_num = parseInt(abs_num);
                }

                //A1标记形式 -- R1C1标记形式
                var A1 = true;
                if(arguments.length >= 4){
                    A1 = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                    if(jfgrid.func_methods.valueIsError(A1)){
                        return A1;
                    }
                }

                if(row_num <= 0 || column_num <= 0){
                    return jfgrid.formula.error.v;
                }

                if([1,2,3,4].indexOf(abs_num) == -1){
                    return jfgrid.formula.error.v;
                }

                //计算
                var str;
                if(A1){
                    column_num = jfgrid.jfgridchatatABC(column_num - 1);

                    switch(abs_num){
                        case 1:
                            str = "$" + column_num + "$" + row_num;
                            break;
                        case 2:
                            str = column_num + "$" + row_num;
                            break;
                        case 3:
                            str = "$" + column_num + row_num;
                            break;
                        case 4:
                            str = column_num + row_num;
                            break;
                    }
                }
                else{
                    switch(abs_num){
                        case 1:
                            str = "R" + row_num + "C" + column_num;
                            break;
                        case 2:
                            str = "R" + row_num + "C[" + column_num + "]";
                            break;
                        case 3:
                            str = "R[" + row_num + "]" + "C" + column_num;
                            break;
                        case 4:
                            str = "R[" + row_num + "]" + "C[" + column_num + "]";
                            break;
                    }
                }

                if(arguments.length == 5){
                    //工作表名称
                    var sheet_text = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(sheet_text)){
                        return sheet_text;
                    }

                    return sheet_text + "!" + str;
                }
                else{
                    return str;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "INDIRECT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //以带引号的字符串形式提供的单元格引用
                var ref_text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(ref_text)){
                    return ref_text;
                }

                //A1标记形式 -- R1C1标记形式
                var A1 = true;
                if(arguments.length == 2){
                    A1 = jfgrid.func_methods.getCellBoolen(arguments[1]);
                
                    if(jfgrid.func_methods.valueIsError(A1)){
                        return A1;
                    }
                }

                //计算
                if(A1){
                    var reg = /^(([a-zA-Z]+)|([$][a-zA-Z]+))(([0-9]+)|([$][0-9]+))$/g;

                    if(reg.test(ref_text)){
                        var row = parseInt(ref_text.replace(/[^0-9]/g, "")) - 1;
                        var col = jfgrid.jfgridABCatNum(ref_text.replace(/[^A-Za-z]/g, ""));

                        if(row < 0 || row >= jfgrid.flowdata.length || col < 0 || col >= jfgrid.flowdata[0].length){
                            return jfgrid.formula.error.r;
                        }

                        if(jfgrid.flowdata[row][col] == null || jfgrid.func_methods.isRealNull(jfgrid.flowdata[row][col].v)){
                            return 0;
                        }

                        return jfgrid.flowdata[row][col].v;
                    }
                    else{
                        return jfgrid.formula.error.r;
                    }
                }
                else{
                    var reg = /^[R][0-9]+[C][0-9]+$/g;

                    if(reg.test(ref_text)){
                        var row = parseInt(ref_text.split("R")[1].split("C")[0]);
                        var col = parseInt(ref_text.split("R")[1].split("C")[1]); 

                        if(row < 0 || row >= jfgrid.flowdata.length || col < 0 || col >= jfgrid.flowdata[0].length){
                            return jfgrid.formula.error.r;
                        }

                        if(jfgrid.flowdata[row][col] == null || jfgrid.func_methods.isRealNull(jfgrid.flowdata[row][col].v)){
                            return 0;
                        }

                        return jfgrid.flowdata[row][col].v;
                    }
                    else{
                        return jfgrid.formula.error.r;
                    }
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROW": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                if(arguments.length == 1){
                    //要返回其行号的单元格
                    var reference;

                    if(jfgrid.getObjType(arguments[0]) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                        reference = arguments[0].startCell;
                    }
                    else{
                        reference = arguments[0];
                    }

                    if(jfgrid.formula.iscelldata(reference)){
                        var cellrange = jfgrid.formula.getcellrange(reference);

                        return cellrange["row"][0] + 1;
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }
                else{
                    return window.jfgridCurrentRow + 1;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROWS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要返回其行数的范围
                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array"){
                        return arguments[0].length;
                    }
                    else{
                        return 1;
                    }
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    return arguments[0].rowl;
                }
                else{
                    return 1;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COLUMN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                if(arguments.length == 1){
                    //要返回其列号的单元格
                    var reference;

                    if(jfgrid.getObjType(arguments[0]) == "array"){
                        return jfgrid.formula.error.v;
                    }
                    else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                        reference = arguments[0].startCell;
                    }
                    else{
                        reference = arguments[0];
                    }

                    if(jfgrid.formula.iscelldata(reference)){
                        var cellrange = jfgrid.formula.getcellrange(reference);

                        return cellrange["column"][0] + 1;
                    }
                    else{
                        return jfgrid.formula.error.v;
                    }
                }
                else{
                    return window.jfgridCurrentColumn + 1;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COLUMNS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //返回指定数组或范围中的列数
                if(jfgrid.getObjType(arguments[0]) == "array"){
                    if(jfgrid.getObjType(arguments[0][0]) == "array"){
                        return arguments[0][0].length;
                    }
                    else{
                        return arguments[0].length;
                    }
                }
                else if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    return arguments[0].coll;
                }
                else{
                    return 1;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "OFFSET": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //用于计算行列偏移量的起点
                if(!(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null)){
                    return jfgrid.formula.error.v; 
                }

                var reference = arguments[0].startCell;

                //要偏移的行数
                var rows = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(rows)){
                    return rows;
                }

                if(!jfgrid.func_methods.isRealNum(rows)){
                    return jfgrid.formula.error.v;
                }

                rows = parseInt(rows);

                //要偏移的列数
                var cols = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(cols)){
                    return cols;
                }

                if(!jfgrid.func_methods.isRealNum(cols)){
                    return jfgrid.formula.error.v;
                }

                cols = parseInt(cols);

                //要从偏移目标开始返回的范围的高度
                var height = arguments[0].rowl;
                if(arguments.length >= 4){
                    height = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(height)){
                        return height;
                    }

                    if(!jfgrid.func_methods.isRealNum(height)){
                        return jfgrid.formula.error.v;
                    }

                    height = parseInt(height);
                }
                
                //要从偏移目标开始返回的范围的宽度
                var width = arguments[0].coll;
                if(arguments.length == 5){
                    width = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(width)){
                        return width;
                    }

                    if(!jfgrid.func_methods.isRealNum(width)){
                        return jfgrid.formula.error.v;
                    }

                    width = parseInt(width);
                }

                if(height < 1 || width < 1){
                    return jfgrid.formula.error.r;
                }

                //计算
                var cellrange = jfgrid.formula.getcellrange(reference);
                var cellRow0 = cellrange["row"][0]; 
                var cellCol0 = cellrange["column"][0];

                cellRow0 += rows;
                cellCol0 += cols;

                var cellRow1 = cellRow0 + height - 1;
                var cellCol1 = cellCol0 + width - 1;

                if(cellRow0 < 0 || cellRow1 >= jfgrid.flowdata.length || cellCol0 < 0 || cellCol1 >= jfgrid.flowdata[0].length){
                    return jfgrid.formula.error.r;
                }  

                var result = [];

                for(var r = cellRow0; r <= cellRow1; r++){
                    var rowArr = [];

                    for(var c = cellCol0; c <= cellCol1; c++){
                        if(jfgrid.flowdata[r][c] != null && !jfgrid.func_methods.isRealNull(jfgrid.flowdata[r][c].v)){
                            rowArr.push(jfgrid.flowdata[r][c].v);
                        }
                        else{
                            rowArr.push(0);
                        }
                    }

                    result.push(rowArr);
                }

                return result;
            }
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MATCH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //lookup_value
                var lookup_value = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(lookup_value)){
                    return lookup_value;
                }

                //lookup_array
                var data_lookup_array = arguments[1];
                var lookup_array = [];

                if(jfgrid.getObjType(data_lookup_array) == "array"){
                    if(jfgrid.getObjType(data_lookup_array[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_lookup_array)){
                            return jfgrid.formula.error.v;
                        }

                        return jfgrid.formula.error.na;
                    }
                    else{
                        for(var i = 0; i < data_lookup_array.length; i++){
                            lookup_array.push(data_lookup_array[i]);
                        }
                    }
                }
                else if(jfgrid.getObjType(data_lookup_array) == "object" && data_lookup_array.startCell != null){
                    if(data_lookup_array.rowl > 1 && data_lookup_array.coll > 1){
                        return jfgrid.formula.error.na;
                    }

                    if(data_lookup_array.data != null){
                        if(jfgrid.getObjType(data_lookup_array.data) == "array"){
                            for(var i = 0; i < data_lookup_array.data.length; i++){
                                for(var j = 0; j < data_lookup_array.data[i].length; j++){
                                    if(data_lookup_array.data[i][j] != null && !jfgrid.func_methods.isRealNull(data_lookup_array.data[i][j].v)){
                                        lookup_array.push(data_lookup_array.data[i][j].v);
                                    }
                                }
                            }
                        }
                        else{
                            lookup_array.push(data_lookup_array.data.v);
                        }
                    }
                }

                //match_type
                var match_type = 1;
                if(arguments.length == 3){
                    match_type = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(match_type)){
                        return match_type;
                    }

                    if(!jfgrid.func_methods.isRealNum(match_type)){
                        return jfgrid.formula.error.v;
                    }

                    match_type = Math.ceil(parseFloat(match_type));
                }

                if([-1,0,1].indexOf(match_type) == -1){
                    return jfgrid.formula.error.na;
                }

                //计算
                var index;
                var indexValue;
                
                for (var idx = 0; idx < lookup_array.length; idx++) {
                    if (match_type === 1) {
                        if (lookup_array[idx] === lookup_value) {
                            return idx + 1;
                        } 
                        else if (lookup_array[idx] < lookup_value) {
                            if (!indexValue) {
                                index = idx + 1;
                                indexValue = lookup_array[idx];
                            } 
                            else if (lookup_array[idx] > indexValue) {
                                index = idx + 1;
                                indexValue = lookup_array[idx];
                            }
                        }
                    } 
                    else if (match_type === 0) {
                        if (typeof lookup_value === 'string') {
                            lookup_value = lookup_value.replace(/\?/g, '.');
                            if (lookup_array[idx].toLowerCase().match(lookup_value.toLowerCase())) {
                                return idx + 1;
                            }
                        } 
                        else {
                            if (lookup_array[idx] === lookup_value) {
                                return idx + 1;
                            }
                        }
                    } 
                    else if (match_type === -1) {
                        if (lookup_array[idx] === lookup_value) {
                            return idx + 1;
                        } 
                        else if (lookup_array[idx] > lookup_value) {
                            if (!indexValue) {
                                index = idx + 1;
                                indexValue = lookup_array[idx];
                            } 
                            else if (lookup_array[idx] < indexValue) {
                                index = idx + 1;
                                indexValue = lookup_array[idx];
                            }
                        }
                    }
                }

                return index ? index : jfgrid.formula.error.na;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VLOOKUP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //lookup_value
                var lookup_value = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(lookup_value)){
                    return lookup_value;
                }

                if(lookup_value.toString().replace(/\s/g, "") == ""){
                    return jfgrid.formula.error.na;
                }
                
                //table_array
                var data_table_array = arguments[1];
                var table_array = [];

                if(jfgrid.getObjType(data_table_array) == "array"){
                    if(jfgrid.getObjType(data_table_array[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_table_array)){
                            return jfgrid.formula.error.v;
                        }

                        for(var i = 0; i < data_table_array.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < data_table_array[i].length; j++){
                                rowArr.push(data_table_array[i][j]);
                            }

                            table_array.push(rowArr);
                        }
                    }
                    else{
                        var rowArr = [];

                        for(var i = 0; i < data_table_array.length; i++){
                            rowArr.push(data_table_array[i]);
                        }

                        table_array.push(rowArr);
                    }
                }
                else if(jfgrid.getObjType(data_table_array) == "object" && data_table_array.startCell != null){
                    table_array = jfgrid.func_methods.getCellDataDyadicArr(data_table_array, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //col_index_num
                var col_index_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(col_index_num)){
                    return col_index_num;
                }

                if(!jfgrid.func_methods.isRealNum(col_index_num)){
                    return jfgrid.formula.error.v;
                }

                col_index_num = parseInt(col_index_num);

                //range_lookup
                var range_lookup = true;
                if(arguments.length == 4){
                    range_lookup = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                    if(jfgrid.func_methods.valueIsError(range_lookup)){
                        return range_lookup;
                    }
                }

                //判断
                if(col_index_num < 1){
                    return jfgrid.formula.error.v;
                }
                else if(col_index_num > table_array[0].length){
                    return jfgrid.formula.error.r;
                }

                //计算
                if(range_lookup){
                    table_array = jfgrid.orderbydata(table_array, 0, true);

                    for(var r = 0; r < table_array.length; r++){
                        var v = table_array[r][0];

                        var result;

                        if (jfgrid.datecontroll.isdatetime(lookup_value) && jfgrid.datecontroll.isdatetime(v)) {
                            result = jfgrid.datecontroll.diff(lookup_value, v);
                        }
                        else if (jfgrid.func_methods.isRealNum(lookup_value) && jfgrid.func_methods.isRealNum(v)) {
                            result = numeral(lookup_value).value() - numeral(v).value();
                        }
                        else if (!jfgrid.func_methods.isRealNum(lookup_value) && !jfgrid.func_methods.isRealNum(v)) {
                            result = lookup_value.localeCompare(v, "zh");
                        }
                        else if (!jfgrid.func_methods.isRealNum(lookup_value)) {
                            result = 1;
                        }
                        else if (!jfgrid.func_methods.isRealNum(v)) {
                            result = -1;
                        }

                        if(result < 0){
                            if(r == 0){
                                return jfgrid.formula.error.na;
                            }
                            else{
                                return table_array[r - 1][col_index_num - 1];
                            }
                        }
                        else{
                            if(r == table_array.length - 1){
                                return table_array[r][col_index_num - 1];
                            }
                        }
                    }
                }
                else{
                    var index = null;

                    for(var r = 0; r < table_array.length; r++){
                        if(lookup_value.toString() == table_array[r][0].toString()){
                            index = r;
                            break;
                        }
                    }

                    if(index == null){
                        return jfgrid.formula.error.na;
                    }   

                    return table_array[index][col_index_num - 1];
                }
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HLOOKUP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var searchkey = arguments[0];

                if(typeof(searchkey) == "object"){
                    searchkey = arguments[0].data;
                    
                    if (jfgrid.getObjType(searchkey) == "array") {
                        searchkey = searchkey[r];
                        
                        if (jfgrid.getObjType(searchkey) == "array") {
                            searchkey = searchkey[c];
                        }
                    }
                    else{
                        searchkey = searchkey.v;
                    }
                }
                var range = arguments[1].data;
                var index = arguments[2];
                var isaccurate = false;
                if (arguments.length > 3) {
                    isaccurate = !!arguments[3];
                }
                if (index > range.rowl) {
                    return [jfgrid.formula.error.v, "索引超过了范围的长度，" + range[0].length];
                }
                if (index < 1) {
                    return [jfgrid.formula.error.v, "索引必须大于1"];
                }
                
                var result = jfgrid.formula.error.na;
                for(var c = 0;c < range[0].length;c++){
                    var matchv = jfgrid.getcellvalue(0, c, range);
                    var showv = jfgrid.getcellvalue(index - 1, c, range);
                   
                    if (isaccurate) {
                        if (matchv.indexOf(searchkey) > -1) {
                            result = showv;
                        }
                    } else {
                        if (jfgrid.formula.acompareb(matchv,searchkey)) {
                            result = showv;
                            return result;
                        }
                    }
                }
                 
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOOKUP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //完成矢量形式（数组形式不推荐，未做）
                //=LOOKUP(4.19, A2:A6, B2:B6)
                //=LOOKUP(0, A2:A6, B2:B6) 
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var searchkey = arguments[0];
                
                if(typeof(searchkey) == "object"){
                    searchkey = arguments[0].data;
                    
                    if (jfgrid.getObjType(searchkey) == "array") {
                        searchkey = searchkey[r];
                        
                        if (jfgrid.getObjType(searchkey) == "array") {
                            searchkey = searchkey[c];
                        }
                    }
                    else{
                        searchkey = searchkey.v;
                    }
                }
                
                //必须为一维数组
                var range = arguments[1].data;
                var range2;
                var result = jfgrid.formula.error.na;

                function sortNum(a,b){ //用于排序
                    return b - a;
                }

                //获得两个范围的数组
                range= jfgrid.formula.getRangeArray(range)[0];
                if(arguments[2]){
                    range2 = arguments[2].data;
                    range2 = jfgrid.formula.getRangeArray(range2)[0];
                }

                if(typeof(searchkey) == "string"){ //字符串直接判断是否相等

                    for (var i = 0; i < range.length; i++) {
                        var matchv = range[i];
                        var showv;
                        if(arguments[2]){              
                            showv = range2[i];
                            if(matchv == searchkey) {
                                result = showv;
                            }
                        }else{
                            if (jfgrid.formula.acompareb(matchv,searchkey)) {
                                result = matchv;
                            }
                        }
                    }
                }else if(jfgrid.isdatatype(searchkey) == "num"){ //数字判断1.是否相等2.不等，去找接近值
                        var rangeNow = [];

                        for (var i = 0; i < range.length; i++) {
                            var matchv = range[i];
                            var showv;

                            if(arguments[2]){
                                showv = range2[i];
                                if(matchv == searchkey) {
                                    result = showv;
                                    return result;
                                }else if(matchv != searchkey && jfgrid.isdatatype(matchv) == "num"){
                                    rangeNow.push(matchv);
                                }
                            }else{
                                if (matchv == searchkey) {
                                    result = matchv;
                                    return result;
                                }else if(matchv != searchkey && jfgrid.isdatatype(matchv) == "num"){
                                    rangeNow.push(matchv);
                                }
                            }

                        }
                        if(rangeNow.length != 0){
                            rangeNow.push(searchkey);
                            rangeNow.sort(sortNum);

                            var index = rangeNow.indexOf(searchkey);
                            if(index == (rangeNow.length -1)){
                                return [jfgrid.formula.error.na, "找不到对应参数"];
                            }else{
                                var mat = rangeNow[index + 1];
                                if(arguments[2]){
                                    var i = range.indexOf(mat);//改成数组
                                    result = range2[i];
                                }else{
                                    result = mat;
                                }
                                
                            }
                        }

                }
                
                return result;

            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "INDEX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //单元格区域或数组常量
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "number");
                }

                var rowlen = array.length, collen = array[0].length; 

                //选择数组中的某行，函数从该行返回数值
                var row_num = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(row_num)){
                    return row_num;
                }

                if(!jfgrid.func_methods.isRealNum(row_num)){
                    return jfgrid.formula.error.v;
                }

                row_num = parseInt(row_num);

                //选择数组中的某列，函数从该列返回数值
                var column_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(column_num)){
                    return column_num;
                }

                if(!jfgrid.func_methods.isRealNum(column_num)){
                    return jfgrid.formula.error.v;
                }

                column_num = parseInt(column_num);

                if(row_num <= 0 || column_num <= 0){
                    return jfgrid.formula.error.v;
                }

                if(row_num > rowlen || column_num > collen){
                    return jfgrid.formula.error.r;
                }

                //计算
                return array[row_num - 1][column_num - 1];
            }
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GETPIVOTDATA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return jfgrid.formula.error.v; 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CHOOSE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //指定要返回哪一项
                var index_num = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(index_num)){
                    return index_num;
                }

                if(!jfgrid.func_methods.isRealNum(index_num)){
                    return jfgrid.formula.error.v;
                }

                index_num = parseInt(index_num);

                if(index_num < 1 || index_num > arguments.length - 1){
                    return jfgrid.formula.error.v;
                }

                var data_result = arguments[index_num];

                if(jfgrid.getObjType(data_result) == "array"){
                    if(jfgrid.getObjType(data_result[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_result)){
                        return jfgrid.formula.error.v;
                    }
                    
                    return data_result;
                }
                else if(jfgrid.getObjType(data_result) == "object" && data_result.startCell != null){
                    if(data_result.data == null){
                        return 0;
                    }

                    if(jfgrid.getObjType(data_result.data) == "array"){
                        var result = jfgrid.func_methods.getCellDataDyadicArr(data_result.data, "number");

                        return result;
                    }
                    else{
                        if(jfgrid.func_methods.isRealNull(data_result.data.v)){
                            return 0;
                        }

                        return data_result.data.v;
                    }
                }
                else{
                    return data_result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HYPERLINK": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return jfgrid.formula.error.v; 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TIME": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //时
                var hour = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(hour)){
                    return hour;
                }

                if(!jfgrid.func_methods.isRealNum(hour)){
                    return jfgrid.formula.error.v;
                }

                hour = parseInt(hour);

                //分
                var minute = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(minute)){
                    return minute;
                }

                if(!jfgrid.func_methods.isRealNum(minute)){
                    return jfgrid.formula.error.v;
                }

                minute = parseInt(minute);

                //秒
                var second = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(second)){
                    return second;
                }

                if(!jfgrid.func_methods.isRealNum(second)){
                    return jfgrid.formula.error.v;
                }

                second = parseInt(second);

                if(hour < 0 || hour > 32767){
                    return jfgrid.formula.error.nm;
                }
                else if(hour > 24){
                    hour = hour % 24;
                }

                if(minute < 0 || minute > 32767){
                    return jfgrid.formula.error.nm;
                }

                if(second < 0 || second > 32767){
                    return jfgrid.formula.error.nm;
                }
                    
                //计算
                var time = moment().set({'hour': hour, 'minute': minute, 'second': second});

                return moment(time).format("h:mm:ss a");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TIMEVALUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用于表示时间的字符串
                var time_text = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(time_text)){
                    return time_text;
                }

                //计算
                if(!moment(time_text).isValid()){
                    return jfgrid.formula.error.v;
                }
                
                return (3600 * moment(time_text).get('hour') + 60 * moment(time_text).get('minute') + moment(time_text).get('second')) / 86400;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EOMONTH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //用于计算结果的参照日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                //月数
                var months = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(months)){
                    return months;
                }

                if(!jfgrid.func_methods.isRealNum(months)){
                    return jfgrid.formula.error.v;
                }

                months = parseInt(months);

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算
                var date = moment(start_date).add(months + 1, 'months').set('date', 1).subtract(1, 'days');
                var mask = jfgrid.mask.genarate(moment(date).format("YYYY-MM-DD H:mm:ss"));

                var result = mask[2];

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EDATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //用于计算结果的参照日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                //月数
                var months = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(months)){
                    return months;
                }

                if(!jfgrid.func_methods.isRealNum(months)){
                    return jfgrid.formula.error.v;
                }

                months = parseInt(months);

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算
                var date = moment(start_date).add(months, 'months');
                var mask = jfgrid.mask.genarate(moment(date).format("YYYY-MM-DD h:mm:ss"));

                var result = mask[2];

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SECOND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //时间值
                var time_text = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(time_text)){
                    return time_text;
                }

                if(!moment(time_text).isValid()){
                    return jfgrid.formula.error.v;
                }

                var result = moment(time_text).seconds();

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MINUTE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //时间值
                var time_text = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(time_text)){
                    return time_text;
                }

                if(!moment(time_text).isValid()){
                    return jfgrid.formula.error.v;
                }

                var result = moment(time_text).minutes();

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HOUR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //时间值
                var time_text = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(time_text)){
                    return time_text;
                }

                if(!moment(time_text).isValid()){
                    return jfgrid.formula.error.v;
                }

                var result = moment(time_text).hours();

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NOW": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                return moment().format("YYYY-M-D HH:mm");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NETWORKDAYS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                if(arguments.length == 3){
                    var result = window.jfgrid_function.NETWORKDAYS_INTL.f(arguments[0], arguments[1], 1, arguments[2]);
                }
                else{
                    var result = window.jfgrid_function.NETWORKDAYS_INTL.f(arguments[0], arguments[1], 1);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NETWORKDAYS_INTL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var WEEKEND_TYPES = [
                    [],
                    [6, 0],
                    [0, 1],
                    [1, 2],
                    [2, 3],
                    [3, 4],
                    [4, 5],
                    [5, 6],
                    undefined,
                    undefined,
                    undefined, 
                    [0, 0],
                    [1, 1],
                    [2, 2],
                    [3, 3],
                    [4, 4],
                    [5, 5],
                    [6, 6]
                ];

                //用于计算净工作日天数的时间段开始日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //用于计算净工作日天数的时间段结束日期
                var end_date = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(end_date)){
                    return end_date;
                }

                if(!moment(end_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //用于表示哪些天为周末的数字或字符串
                var weekend = WEEKEND_TYPES[1];
                if(arguments.length >= 3){
                    weekend = arguments[2];

                    if(typeof weekend == "string" && weekend.length == "7" && /^[0-1]{7}$/g.test(weekend)){

                    }
                    else{
                        weekend = jfgrid.func_methods.getFirstValue(arguments[2]);
                        if(jfgrid.func_methods.valueIsError(weekend)){
                            return weekend;
                        }

                        if(!jfgrid.func_methods.isRealNum(weekend)){
                            return jfgrid.formula.error.v;
                        }

                        weekend = parseInt(weekend);

                        if(weekend < 1 || (weekend > 7 && weekend < 11) || weekend > 17){
                            return jfgrid.formula.error.nm;
                        }

                        weekend = WEEKEND_TYPES[weekend];
                    }
                }

                //这是一个范围或数组常量，其中包含作为节假日的日期
                var holidays = [];
                if(arguments.length == 4){
                    holidays = jfgrid.func_methods.getCellrangeDate(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(holidays)){
                        return holidays;
                    }
                }

                for (var i = 0; i < holidays.length; i++) {
                    if(!moment(holidays[i]).isValid()){
                        return jfgrid.formula.error.v;
                    }
                }

                //计算 
                var days = moment(end_date).diff(moment(start_date), 'days') + 1;
                var total = days;
                var day = moment(start_date);
                
                for (i = 0; i < days; i++) {
                    var d = moment(day).weekday();
                    var dec = false;

                    if(jfgrid.getObjType(weekend) == "array"){
                        if (d === weekend[0] || d === weekend[1]) {
                            dec = true;
                        }
                    }
                    else{
                        if(d == 0){
                            d = 7;
                        }

                        if(weekend.charAt(d - 1) == "0"){
                            dec = true;
                        }
                    }

                    for (var j = 0; j < holidays.length; j++) {
                        if(moment(day).diff(moment(holidays[j]), 'days') === 0){
                            dec = true;
                            break;
                        }
                    }

                    if (dec) {
                        total--;
                    }

                    day = moment(day).add(1, 'days');
                }

                return total;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISOWEEKNUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用于日期和时间计算的日期
                var date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(date)){
                    return date;
                }

                if(!moment(date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算 
                return moment(date).isoWeeks();
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "WEEKNUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var WEEK_STARTS = [
                    undefined,
                    7,
                    1,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ];

                //用于计算净工作日天数的时间段开始日期
                var serial_number = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(serial_number)){
                    return serial_number;
                }

                if(!moment(serial_number).isValid()){
                    return jfgrid.formula.error.v;
                }

                //用于表示哪些天为周末的数字或字符串
                var return_type = 1;
                if(arguments.length == 2){
                    return_type = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(return_type)){
                        return return_type;
                    }

                    if(!jfgrid.func_methods.isRealNum(return_type)){
                        return jfgrid.formula.error.v;
                    }

                    return_type = parseInt(return_type);
                }

                if(return_type == 21){
                    return window.jfgrid_function.ISOWEEKNUM.f(arguments[0]);
                }

                if([1,2,11,12,13,14,15,16,17].indexOf(return_type) == -1){
                    return jfgrid.formula.error.nm;
                }

                //计算 
                var week_start = WEEK_STARTS[return_type];
                var inc = moment(serial_number).isoWeekday() >= week_start ? 1 : 0;  
                var result = moment(serial_number).isoWeeks() + inc;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "WEEKDAY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var WEEK_TYPES = [
                    [],
                    [1, 2, 3, 4, 5, 6, 7],
                    [7, 1, 2, 3, 4, 5, 6],
                    [6, 0, 1, 2, 3, 4, 5],
                    [],
                    [],
                    [],
                    [],
                    [],
                    [],
                    [],
                    [7, 1, 2, 3, 4, 5, 6],
                    [6, 7, 1, 2, 3, 4, 5],
                    [5, 6, 7, 1, 2, 3, 4],
                    [4, 5, 6, 7, 1, 2, 3],
                    [3, 4, 5, 6, 7, 1, 2],
                    [2, 3, 4, 5, 6, 7, 1],
                    [1, 2, 3, 4, 5, 6, 7]
                ];

                //用于计算净工作日天数的时间段开始日期
                var serial_number = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(serial_number)){
                    return serial_number;
                }

                if(!moment(serial_number).isValid()){
                    return jfgrid.formula.error.v;
                }

                //以数字指示使用哪种编号顺序来表示星期几
                var return_type = 1;
                if(arguments.length == 2){
                    return_type = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(return_type)){
                        return return_type;
                    }

                    if(!jfgrid.func_methods.isRealNum(return_type)){
                        return jfgrid.formula.error.v;
                    }

                    return_type = parseInt(return_type);
                }

                if([1,2,3,11,12,13,14,15,16,17].indexOf(return_type) == -1){
                    return jfgrid.formula.error.nm;
                }

                //计算 
                var result = WEEK_TYPES[return_type][moment(serial_number).day()];

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DAY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //用于计算净工作日天数的时间段开始日期
                var serial_number = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(serial_number)){
                    return serial_number;
                }

                if(!moment(serial_number).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算 
                return moment(serial_number).date();
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DAYS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结束日期
                var end_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(end_date)){
                    return end_date;
                }

                if(!moment(end_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //开始日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算 
                var result = moment(end_date).diff(moment(start_date), 'days');

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DAYS360": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //开始日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //结束日期
                var end_date = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(end_date)){
                    return end_date;
                }

                if(!moment(end_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //天数计算方法
                var method = false;
                if(arguments.length == 3){
                    method = jfgrid.func_methods.getCellBoolen(arguments[2]);
                
                    if(jfgrid.func_methods.valueIsError(method)){
                        return method;
                    }
                }

                //计算 
                var sm = moment(start_date).month();
                var em = moment(end_date).month();
                var sd, ed;
      
                if (method) {
                    sd = moment(start_date).date() === 31 ? 30 : moment(start_date).date();
                    ed = moment(end_date).date() === 31 ? 30 : moment(end_date).date();
                } 
                else {
                    var smd = moment().set({ 'year': moment(start_date).year(), 'month': sm + 1, 'date': 0 }).date();
                    var emd = moment().set({ 'year': moment(end_date).year(), 'month': em + 1, 'date': 0 }).date();
                    sd = moment(start_date).date() === smd ? 30 : moment(start_date).date();
                    
                    if (moment(end_date).date() === emd) {
                        if (sd < 30) {
                            em++;
                            ed = 1;
                        } 
                        else {
                            ed = 30;
                        }
                    } 
                    else {
                        ed = moment(end_date).date();
                    }
                }

                var result = 360 * moment(end_date).diff(moment(start_date), 'years') + 30 * (em - sm) + (ed - sd);

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //年
                var year = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(year)){
                    return year;
                }

                if(!jfgrid.func_methods.isRealNum(year)){
                    return jfgrid.formula.error.v;
                }

                year = parseInt(year);

                //月
                var month = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(month)){
                    return month;
                }

                if(!jfgrid.func_methods.isRealNum(month)){
                    return jfgrid.formula.error.v;
                }

                month = parseInt(month);

                //日
                var day = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(day)){
                    return day;
                }

                if(!jfgrid.func_methods.isRealNum(day)){
                    return jfgrid.formula.error.v;
                }

                day = parseInt(day);

                if(year < 0 || year >= 10000){
                    return jfgrid.formula.error.nm;
                }
                else if(year >= 0 && year <= 1899){
                    year = year + 1900;
                }

                var date = moment().set({ 'year': year, 'month': month - 1, "date": day });

                if(moment(date).year() < 1900){
                    return jfgrid.formula.error.nm;
                }             
                
                return moment(date).format("YYYY-MM-DD");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATEVALUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //开始日期
                var date_text = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(date_text)){
                    return date_text;
                }

                if(!moment(date_text).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算
                date_text = moment(date_text).format("YYYY-MM-DD");
                var result = jfgrid.mask.genarate(date_text)[2];
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DATEDIF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                jfgrid_getValue(arguments);
                for (var i = 0; i < arguments.length-1; i++){
                    arguments[i] = moment.fromOADate(arguments[i]).format("l");
                    if(!jfgrid.datecontroll.isdatetime(arguments[i])){
                        return jfgrid.formula.error.v;
                    }
                }
                
                var startDate = moment(arguments[0]);
                var endDate = moment(arguments[1]);
                var unit = arguments[2];
                var result = jfgrid.formula.error.v;
                if(jfgrid_function.DAYS.f(endDate,startDate) < 0){
                    return jfgrid.formula.error.v;
                }

                switch(unit){
                    case "Y":case "y":
                        result = endDate.diff(startDate,"years",false);
                        break;
                    case "M":case "m":
                        result = endDate.diff(startDate,"months",false);
                        break;
                    case "D":case "d":
                        result = endDate.diff(startDate,"days",false);
                        break;
                    case "MD":case "md":
                        result = endDate.format('DD') - startDate.format('DD');
                        break;
                    case "YM":case "ym":
                        var startM = parseInt(startDate.format('M')); //注意字符串转化为数字
                        var endM = parseInt(endDate.format('M'));
                        result = (startM <= endM) ?  endM - startM : endM + 12 - startM;
                        break;
                    case "YD":case "yd":
                        var startM = jfgrid.mask.genarate(startDate.format('MM-DD'))[2];
                        var endM = jfgrid.mask.genarate(endDate.format('MM-DD'))[2];

                        result = (startM <= endM) ? endM - startM : endM + 365 - startM;
                        break;
                    default:
                        result = jfgrid.formula.error.v;
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "WORKDAY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                if(arguments.length == 3){
                    var result = window.jfgrid_function.WORKDAY_INTL.f(arguments[0], arguments[1], 1, arguments[2]);
                }
                else{
                    var result = window.jfgrid_function.WORKDAY_INTL.f(arguments[0], arguments[1], 1);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "WORKDAY_INTL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var WEEKEND_TYPES = [
                    [],
                    [6, 0],
                    [0, 1],
                    [1, 2],
                    [2, 3],
                    [3, 4],
                    [4, 5],
                    [5, 6],
                    undefined,
                    undefined,
                    undefined, 
                    [0, 0],
                    [1, 1],
                    [2, 2],
                    [3, 3],
                    [4, 4],
                    [5, 5],
                    [6, 6]
                ];

                //计算的开始日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //工作日的天数
                var days = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(days)){
                    return days;
                }

                if(!jfgrid.func_methods.isRealNum(days)){
                    return jfgrid.formula.error.v;
                }

                days = parseInt(days);

                //用于表示哪些天为周末的数字或字符串
                var weekend = WEEKEND_TYPES[1];
                if(arguments.length >= 3){
                    weekend = arguments[2];

                    if(typeof weekend == "string" && weekend.length == "7" && /^[0-1]{7}$/g.test(weekend)){

                    }
                    else{
                        weekend = jfgrid.func_methods.getFirstValue(arguments[2]);
                        if(jfgrid.func_methods.valueIsError(weekend)){
                            return weekend;
                        }

                        if(!jfgrid.func_methods.isRealNum(weekend)){
                            return jfgrid.formula.error.v;
                        }

                        weekend = parseInt(weekend);

                        if(weekend < 1 || (weekend > 7 && weekend < 11) || weekend > 17){
                            return jfgrid.formula.error.nm;
                        }

                        weekend = WEEKEND_TYPES[weekend];
                    }
                }

                //这是一个范围或数组常量，其中包含作为节假日的日期
                var holidays = [];
                if(arguments.length == 4){
                    holidays = jfgrid.func_methods.getCellrangeDate(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(holidays)){
                        return holidays;
                    }
                }

                for (var i = 0; i < holidays.length; i++) {
                    if(!moment(holidays[i]).isValid()){
                        return jfgrid.formula.error.v;
                    }
                }

                //计算 
                var d = 0;
     
                while (d < days) {
                    start_date = moment(start_date).add(1, 'days');
                    var day = moment(start_date).weekday();

                    if(jfgrid.getObjType(weekend)){
                        if (day === weekend[0] || day === weekend[1]) {
                            continue;
                        }
                    }
                    else{
                        if(day == 0){
                            day = 7;
                        }

                        if(weekend.charAt(day - 1) == "0"){
                            continue;
                        }
                    }

                    for (var j = 0; j < holidays.length; j++) {
                        if(moment(start_date).diff(moment(holidays[j]), 'days') === 0){
                            d--;
                            break;
                        }
                    }

                    d++;
                }

                return moment(start_date).format("YYYY-MM-DD");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "YEAR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //开始日期
                var serial_number = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(serial_number)){
                    return serial_number;
                }

                if(!moment(serial_number).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算
                return moment(serial_number).year();
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "YEARFRAC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //开始日期
                var start_date = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(start_date)){
                    return start_date;
                }

                if(!moment(start_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //结束日期
                var end_date = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(end_date)){
                    return end_date;
                }

                if(!moment(end_date).isValid()){
                    return jfgrid.formula.error.v;
                }

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 3){
                    basis = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(start_date).date();
                var sm = moment(start_date).month() + 1;
                var sy = moment(start_date).year();
                var ed = moment(end_date).date();
                var em = moment(end_date).month() + 1;
                var ey = moment(end_date).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(start_date, end_date) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            return moment(end_date).diff(moment(start_date), 'days') / ylength;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        result = moment(end_date).diff(moment(start_date), 'days') / average;

                        break;
                    case 2: // Actual/360
                        result = moment(end_date).diff(moment(start_date), 'days') / 360;
                        
                        break;
                    case 3: // Actual/365
                        result = moment(end_date).diff(moment(start_date), 'days') / 365;

                        break;
                    case 4: // European 30/360
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                        break;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TODAY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                return moment().format("YYYY-MM-DD");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MONTH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //开始日期
                var serial_number = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(serial_number)){
                    return serial_number;
                }

                if(!moment(serial_number).isValid()){
                    return jfgrid.formula.error.v;
                }

                //计算
                return moment(serial_number).month() + 1;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EFFECT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //每年的名义利率
                var nominal_rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(nominal_rate)){
                    return nominal_rate;
                }

                if(!jfgrid.func_methods.isRealNum(nominal_rate)){
                    return jfgrid.formula.error.v;
                }

                nominal_rate = parseFloat(nominal_rate);

                //每年的复利计算期数
                var npery = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(npery)){
                    return npery;
                }

                if(!jfgrid.func_methods.isRealNum(npery)){
                    return jfgrid.formula.error.v;
                }

                npery = parseInt(npery);

                if(nominal_rate <= 0 || npery < 1){
                    return jfgrid.formula.error.nm;
                }   

                return Math.pow(1 + nominal_rate / npery, npery) - 1;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DOLLAR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要设置格式的值
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //显示的小数位数
                var decimals = 2;
                if(arguments.length == 2){
                    decimals = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(decimals)){
                        return decimals;
                    }

                    if(!jfgrid.func_methods.isRealNum(decimals)){
                        return jfgrid.formula.error.v;
                    }

                    decimals = parseInt(decimals);
                }

                if(decimals > 9){
                    decimals = 9;
                }

                var foucsStatus = "0.";
                for(var i = 1; i <= decimals; i++){
                    foucsStatus += "0";
                }

                //计算 
                var sign = (number > 0) ? 1 : -1;

                return sign * (Math.floor(Math.abs(number) * Math.pow(10, decimals))) / Math.pow(10, decimals);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DOLLARDE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //分数
                var fractional_dollar = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(fractional_dollar)){
                    return fractional_dollar;
                }

                if(!jfgrid.func_methods.isRealNum(fractional_dollar)){
                    return jfgrid.formula.error.v;
                }

                fractional_dollar = parseFloat(fractional_dollar);

                //用作分数中的分母的整数
                var fraction = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(fraction)){
                    return fraction;
                }

                if(!jfgrid.func_methods.isRealNum(fraction)){
                    return jfgrid.formula.error.v;
                }

                fraction = parseInt(fraction);

                if(fraction < 0){
                    return jfgrid.formula.error.nm;
                }
                else if(fraction == 0){
                    return jfgrid.formula.error.d;
                }

                //计算   
                var result = parseInt(fractional_dollar, 10);

                result += (fractional_dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;

                var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);
                result = Math.round(result * power) / power;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DOLLARFR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //小数
                var decimal_dollar = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(decimal_dollar)){
                    return decimal_dollar;
                }

                if(!jfgrid.func_methods.isRealNum(decimal_dollar)){
                    return jfgrid.formula.error.v;
                }

                decimal_dollar = parseFloat(decimal_dollar);

                //用作分数中的分母的整数
                var fraction = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(fraction)){
                    return fraction;
                }

                if(!jfgrid.func_methods.isRealNum(fraction)){
                    return jfgrid.formula.error.v;
                }

                fraction = parseInt(fraction);

                if(fraction < 0){
                    return jfgrid.formula.error.nm;
                }
                else if(fraction == 0){
                    return jfgrid.formula.error.d;
                }

                //计算        
                var result = parseInt(decimal_dollar, 10);

                result += (decimal_dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //资产原值
                var cost = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(cost)){
                    return cost;
                }

                if(!jfgrid.func_methods.isRealNum(cost)){
                    return jfgrid.formula.error.v;
                }

                cost = parseFloat(cost);

                //资产残值
                var salvage = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(salvage)){
                    return salvage;
                }

                if(!jfgrid.func_methods.isRealNum(salvage)){
                    return jfgrid.formula.error.v;
                }

                salvage = parseFloat(salvage);

                //资产的折旧期数
                var life = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(life)){
                    return life;
                }

                if(!jfgrid.func_methods.isRealNum(life)){
                    return jfgrid.formula.error.v;
                }

                life = parseFloat(life);

                //在使用期限内要计算折旧的折旧期
                var period = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(period)){
                    return period;
                }

                if(!jfgrid.func_methods.isRealNum(period)){
                    return jfgrid.formula.error.v;
                }

                period = parseInt(period);

                //折旧第一年中的月数
                var month = 12;
                if(arguments.length == 5){
                    month = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(month)){
                        return month;
                    }

                    if(!jfgrid.func_methods.isRealNum(month)){
                        return jfgrid.formula.error.v;
                    }

                    month = parseInt(month);
                }

                if(cost < 0 || salvage < 0 || life < 0 || period < 0){
                    return jfgrid.formula.error.nm;
                }
                
                if(month < 1 || month > 12){
                    return jfgrid.formula.error.nm;
                }

                if(period > life){
                    return jfgrid.formula.error.nm;
                }

                if(salvage >= cost){
                    return 0;
                }

                //计算        
                var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);

                var initial = cost * rate * month / 12;

                var total = initial;
                var current = 0;
                var ceiling = (period === life) ? life - 1 : period;
                
                for (var i = 2; i <= ceiling; i++) {
                    current = (cost - total) * rate;
                    total += current;
                }

                if (period === 1) {
                    var result = initial;
                } 
                else if (period === life) {
                    var result = (cost - total) * rate;
                } 
                else {
                    var result = current;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DDB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //资产原值
                var cost = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(cost)){
                    return cost;
                }

                if(!jfgrid.func_methods.isRealNum(cost)){
                    return jfgrid.formula.error.v;
                }

                cost = parseFloat(cost);

                //资产残值
                var salvage = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(salvage)){
                    return salvage;
                }

                if(!jfgrid.func_methods.isRealNum(salvage)){
                    return jfgrid.formula.error.v;
                }

                salvage = parseFloat(salvage);

                //资产的折旧期数
                var life = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(life)){
                    return life;
                }

                if(!jfgrid.func_methods.isRealNum(life)){
                    return jfgrid.formula.error.v;
                }

                life = parseFloat(life);

                //在使用期限内要计算折旧的折旧期
                var period = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(period)){
                    return period;
                }

                if(!jfgrid.func_methods.isRealNum(period)){
                    return jfgrid.formula.error.v;
                }

                period = parseInt(period);

                //折旧的递减系数
                var factor = 2;
                if(arguments.length == 5){
                    factor = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(factor)){
                        return factor;
                    }

                    if(!jfgrid.func_methods.isRealNum(factor)){
                        return jfgrid.formula.error.v;
                    }

                    factor = parseFloat(factor);
                }

                if(cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(period > life){
                    return jfgrid.formula.error.nm;
                }

                if(salvage >= cost){
                    return 0;
                }

                //计算        
                var total = 0;
                var current = 0;
                
                for (var i = 1; i <= period; i++) {
                    current = Math.min((cost - total) * (factor / life), (cost - salvage - total));
                    total += current;
                }

                return current;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //年金的付款总期数。
                var nper = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //每期的付款金额
                var pmt = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(pmt)){
                    return pmt;
                }

                if(!jfgrid.func_methods.isRealNum(pmt)){
                    return jfgrid.formula.error.v;
                }

                pmt = parseFloat(pmt);

                //现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 4){
                    fv = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 5){
                    type = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                //预期利率
                var guess = 0.1;
                if(arguments.length == 6){
                    guess = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(guess)){
                        return guess;
                    }

                    if(!jfgrid.func_methods.isRealNum(guess)){
                        return jfgrid.formula.error.v;
                    }

                    guess = parseFloat(guess);
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var epsMax = 1e-6;

                var iterMax = 100;
                var iter = 0;
                var close = false;
                var rate = guess;

                while (iter < iterMax && !close) {
                    var t1 = Math.pow(rate + 1, nper);
                    var t2 = Math.pow(rate + 1, nper - 1);

                    var f1 = fv + t1 * pv + pmt * (t1 - 1) * (rate * type + 1) / rate;
                    var f2 = nper * t2 * pv - pmt * (t1 - 1) *(rate * type + 1) / Math.pow(rate,2);
                    var f3 = nper * pmt * t2 * (rate * type + 1) / rate + pmt * (t1 - 1) * type / rate;

                    var newRate = rate - f1 / (f2 + f3);

                    if (Math.abs(newRate - rate) < epsMax) close = true;
                    
                    iter++
                    rate = newRate;
                }

                if (!close) return jfgrid.formula.error.nm;
                
                return rate;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CUMPRINC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //年金的现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //首期
                var start_period = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(start_period)){
                    return start_period;
                }

                if(!jfgrid.func_methods.isRealNum(start_period)){
                    return jfgrid.formula.error.v;
                }

                start_period = parseInt(start_period);

                //末期
                var end_period = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(end_period)){
                    return end_period;
                }

                if(!jfgrid.func_methods.isRealNum(end_period)){
                    return jfgrid.formula.error.v;
                }

                end_period = parseInt(end_period);

                //指定各期的付款时间是在期初还是期末
                var type = jfgrid.func_methods.getFirstValue(arguments[5]);
                if(jfgrid.func_methods.valueIsError(type)){
                    return type;
                }

                if(!jfgrid.func_methods.isRealNum(type)){
                    return jfgrid.formula.error.v;
                }

                type = parseFloat(type);

                if(rate <= 0 || nper <= 0 || pv <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(start_period < 1 || end_period < 1 || start_period > end_period){
                    return jfgrid.formula.error.nm;
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var payment = window.jfgrid_function.PMT.f(rate, nper, pv, 0, type);
                var principal = 0;
                
                if (start_period === 1) {
                    if (type === 0) {
                        principal = payment + pv * rate;
                    } 
                    else {
                        principal = payment;
                    }
                    start_period++;
                }

                for (var i = start_period; i <= end_period; i++) {
                    if (type > 0) {
                        principal += payment - (window.jfgrid_function.FV.f(rate, i - 2, payment, pv, 1) - payment) * rate;
                    } 
                    else {
                        principal += payment - window.jfgrid_function.FV.f(rate, i - 1, payment, pv, 0) * rate;
                    }
                }

                return principal;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPNUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    var basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / (360 / frequency);

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            return moment(maturity).diff(moment(settlement), 'days') / (ylength / frequency);
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        result = moment(maturity).diff(moment(settlement), 'days') / (average / frequency);

                        break;
                    case 2: // Actual/360
                        result = moment(maturity).diff(moment(settlement), 'days') / (360 / frequency);

                        break;
                    case 3: // Actual/365
                        result = moment(maturity).diff(moment(settlement), 'days') / (365 / frequency);

                        break;
                    case 4: // European 30/360
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / (360 / frequency);

                        break;
                }

                return Math.round(result);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SYD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //资产原值
                var cost = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(cost)){
                    return cost;
                }

                if(!jfgrid.func_methods.isRealNum(cost)){
                    return jfgrid.formula.error.v;
                }

                cost = parseFloat(cost);

                //资产残值
                var salvage = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(salvage)){
                    return salvage;
                }

                if(!jfgrid.func_methods.isRealNum(salvage)){
                    return jfgrid.formula.error.v;
                }

                salvage = parseFloat(salvage);

                //资产的折旧期数
                var life = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(life)){
                    return life;
                }

                if(!jfgrid.func_methods.isRealNum(life)){
                    return jfgrid.formula.error.v;
                }

                life = parseFloat(life);

                //在使用期限内要计算折旧的折旧期
                var period = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(period)){
                    return period;
                }

                if(!jfgrid.func_methods.isRealNum(period)){
                    return jfgrid.formula.error.v;
                }

                period = parseInt(period);

                if(life == 0){
                    return jfgrid.formula.error.nm;
                }

                if(period < 1 || period > life){
                    return jfgrid.formula.error.nm;
                }

                return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TBILLEQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //债券购买时的贴现率
                var discount = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(discount)){
                    return discount;
                }

                if(!jfgrid.func_methods.isRealNum(discount)){
                    return jfgrid.formula.error.v;
                }

                discount = parseFloat(discount);

                if(discount <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) > 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(maturity) - moment(settlement) > 365 * 24 * 60 * 60 * 1000){
                    return jfgrid.formula.error.nm;
                }

                return (365 * discount) / (360 - discount * moment(maturity).diff(moment(settlement), 'days'));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TBILLYIELD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的价格
                var pr = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pr)){
                    return pr;
                }

                if(!jfgrid.func_methods.isRealNum(pr)){
                    return jfgrid.formula.error.v;
                }

                pr = parseFloat(pr);

                if(pr <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(maturity) - moment(settlement) > 365 * 24 * 60 * 60 * 1000){
                    return jfgrid.formula.error.nm;
                }

                return ((100 - pr) / pr) * (360 / moment(maturity).diff(moment(settlement), 'days'));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TBILLPRICE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的价格
                var discount = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(discount)){
                    return discount;
                }

                if(!jfgrid.func_methods.isRealNum(discount)){
                    return jfgrid.formula.error.v;
                }

                discount = parseFloat(discount);

                if(discount <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) > 0){
                    return jfgrid.formula.error.nm;
                }

                if(moment(maturity) - moment(settlement) > 365 * 24 * 60 * 60 * 1000){
                    return jfgrid.formula.error.nm;
                }

                return 100 * (1 - discount * moment(maturity).diff(moment(settlement), 'days') / 360);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //每期的付款金额
                var pmt = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pmt)){
                    return pmt;
                }

                if(!jfgrid.func_methods.isRealNum(pmt)){
                    return jfgrid.formula.error.v;
                }

                pmt = parseFloat(pmt);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 4){
                    fv = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 5){
                    type = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                if (rate === 0) {
                    var result = -pmt * nper - fv;
                } 
                else {
                    var result = (((1 - Math.pow(1 + rate, nper)) / rate) * pmt * (1 + rate * type) - fv) / Math.pow(1 + rate, nper);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ACCRINT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //有价证券的发行日
                var issue = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(issue)){
                    return issue;
                }

                if(!moment(issue).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的首次计息日
                var first_interest = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(first_interest)){
                    return first_interest;
                }

                if(!moment(first_interest).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[2]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //证券的票面值
                var par = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(par)){
                    return par;
                }

                if(!jfgrid.func_methods.isRealNum(par)){
                    return jfgrid.formula.error.v;
                }

                par = parseFloat(par);

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[5]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length >= 7){
                    basis = jfgrid.func_methods.getFirstValue(arguments[6]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                //当结算日期晚于首次计息日期时用于计算总应计利息的方法
                var calc_method = true;
                if(arguments.length == 8){
                    calc_method = jfgrid.func_methods.getCellBoolen(arguments[7]);
                
                    if(jfgrid.func_methods.valueIsError(calc_method)){
                        return calc_method;
                    }
                }

                if(rate <= 0 || par <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }
                
                if(moment(issue) - moment(settlement) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result;
                if(moment(settlement) - moment(first_interest) >= 0 && !calc_method){
                    var sd = moment(first_interest).date();
                    var sm = moment(first_interest).month() + 1;
                    var sy = moment(first_interest).year();
                    var ed = moment(settlement).date();
                    var em = moment(settlement).month() + 1;
                    var ey = moment(settlement).year();  

                    switch (basis) {
                        case 0: // US (NASD) 30/360
                            if (sd === 31 && ed === 31) {
                                sd = 30;
                                ed = 30;
                            } 
                            else if (sd === 31) {
                                sd = 30;
                            } 
                            else if (sd === 30 && ed === 31) {
                                ed = 30;
                            }
                        
                            result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                            break;
                        case 1: // Actual/actual
                            var ylength = 365;
                            if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                                if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(first_interest, settlement) || (em === 1 && ed === 29)) {
                                    ylength = 366;
                                }

                                return moment(settlement).diff(moment(first_interest), 'days') / ylength;
                            }

                            var years = (ey - sy) + 1;
                            var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                            var average = days / years;

                            result = moment(settlement).diff(moment(first_interest), 'days') / average;

                            break;
                        case 2: // Actual/360
                            result = moment(settlement).diff(moment(first_interest), 'days') / 360;

                            break;
                        case 3: // Actual/365
                            result = moment(settlement).diff(moment(first_interest), 'days') / 365;

                            break;
                        case 4: // European 30/360
                            result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                            break;
                    }
                }
                else{
                    var sd = moment(issue).date();
                    var sm = moment(issue).month() + 1;
                    var sy = moment(issue).year();
                    var ed = moment(settlement).date();
                    var em = moment(settlement).month() + 1;
                    var ey = moment(settlement).year();

                    switch (basis) {
                        case 0: // US (NASD) 30/360
                            if (sd === 31 && ed === 31) {
                                sd = 30;
                                ed = 30;
                            } 
                            else if (sd === 31) {
                                sd = 30;
                            } 
                            else if (sd === 30 && ed === 31) {
                                ed = 30;
                            }
                        
                            result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                            break;
                        case 1: // Actual/actual
                            var ylength = 365;
                            if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                                if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(issue, settlement) || (em === 1 && ed === 29)) {
                                    ylength = 366;
                                }

                                return moment(settlement).diff(moment(issue), 'days') / ylength;
                            }

                            var years = (ey - sy) + 1;
                            var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                            var average = days / years;

                            result = moment(settlement).diff(moment(issue), 'days') / average;

                            break;
                        case 2: // Actual/360
                            result = moment(settlement).diff(moment(issue), 'days') / 360;

                            break;
                        case 3: // Actual/365
                            result = moment(settlement).diff(moment(issue), 'days') / 365;

                            break;
                        case 4: // European 30/360
                            result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                            break;
                    }
                }

                return par * rate * result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ACCRINTM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //有价证券的发行日
                var issue = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(issue)){
                    return issue;
                }

                if(!moment(issue).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的到期日
                var settlement = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //证券的票面值
                var par = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(par)){
                    return par;
                }

                if(!jfgrid.func_methods.isRealNum(par)){
                    return jfgrid.formula.error.v;
                }

                par = parseFloat(par);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(rate <= 0 || par <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }
                
                if(moment(issue) - moment(settlement) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(issue).date();
                var sm = moment(issue).month() + 1;
                var sy = moment(issue).year();
                var ed = moment(settlement).date();
                var em = moment(settlement).month() + 1;
                var ey = moment(settlement).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(issue, settlement) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            return moment(settlement).diff(moment(issue), 'days') / ylength;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        result = moment(settlement).diff(moment(issue), 'days') / average;

                        break;
                    case 2: // Actual/360
                        result = moment(settlement).diff(moment(issue), 'days') / 360;

                        break;
                    case 3: // Actual/365
                        result = moment(settlement).diff(moment(issue), 'days') / 365;

                        break;
                    case 4: // European 30/360
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                        break;
                }

                return par * rate * result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPDAYBS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var interest; //结算日之前的上一个付息日
                
                var maxCount = Math.ceil(moment(maturity).diff(moment(settlement), 'months') / (12 / frequency)) + 1;

                for(var i = 1; i <= maxCount; i++){
                    var di = moment(maturity).subtract((12 / frequency) * i, 'months');

                    if(di <= moment(settlement)){
                        interest = di;
                        break;
                    }
                } 

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        var sd = moment(interest).date();
                        var sm = moment(interest).month() + 1;
                        var sy = moment(interest).year();
                        var ed = moment(settlement).date();
                        var em = moment(settlement).month() + 1;
                        var ey = moment(settlement).year();

                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = (ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360);

                        break;
                    case 1: // Actual/actual
                    case 2: // Actual/360
                    case 3: // Actual/365
                        result = moment(settlement).diff(moment(interest), 'days');
                        
                        break;
                    case 4: // European 30/360
                        var sd = moment(interest).date();
                        var sm = moment(interest).month() + 1;
                        var sy = moment(interest).year();
                        var ed = moment(settlement).date();
                        var em = moment(settlement).month() + 1;
                        var ey = moment(settlement).year();

                        result = (ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360);
                        
                        break;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPDAYS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        result = 360 / frequency;

                        break;
                    case 1: // Actual/actual
                        var maxCount = Math.ceil(moment(maturity).diff(moment(settlement), 'months') / (12 / frequency)) + 1;

                        for(var i = 1; i <= maxCount; i++){
                            var d1 = moment(maturity).subtract((12 / frequency) * i, 'months');
                            if(d1 <= moment(settlement)){
                                var d2 = moment(maturity).subtract((12 / frequency) * (i - 1), 'months');
                                result = moment(d2).diff(moment(d1), 'days');
                                break;
                            }
                        }
                        
                        break;
                    case 2: // Actual/360
                        result = 360 / frequency;

                        break;
                    case 3: // Actual/365
                        result = 365 / frequency;
                        
                        break;
                    case 4: // European 30/360
                        result = 360 / frequency;
                        
                        break;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPDAYSNC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var interest; //结算日之后的下一个付息日

                var maxCount = Math.ceil(moment(maturity).diff(moment(settlement), 'months') / (12 / frequency)) + 1;

                for(var i = 1; i <= maxCount; i++){
                    var di = moment(maturity).subtract((12 / frequency) * i, 'months');

                    if(di <= moment(settlement)){
                        interest = moment(maturity).subtract((12 / frequency) * (i - 1), 'months');
                        break;
                    }
                } 

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        var sd = moment(settlement).date();
                        var sm = moment(settlement).month() + 1;
                        var sy = moment(settlement).year();
                        var ed = moment(interest).date();
                        var em = moment(interest).month() + 1;
                        var ey = moment(interest).year();

                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = (ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360);

                        break;
                    case 1: // Actual/actual
                    case 2: // Actual/360
                    case 3: // Actual/365
                        result = moment(interest).diff(moment(settlement), 'days');
                        
                        break;
                    case 4: // European 30/360
                        var sd = moment(settlement).date();
                        var sm = moment(settlement).month() + 1;
                        var sy = moment(settlement).year();
                        var ed = moment(interest).date();
                        var em = moment(interest).month() + 1;
                        var ey = moment(interest).year();

                        result = (ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360);
                        
                        break;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPNCD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var interest; //结算日之后的下一个付息日

                var maxCount = Math.ceil(moment(maturity).diff(moment(settlement), 'months') / (12 / frequency)) + 1;

                for(var i = 1; i <= maxCount; i++){
                    var di = moment(maturity).subtract((12 / frequency) * i, 'months');

                    if(di <= moment(settlement)){
                        interest = moment(maturity).subtract((12 / frequency) * (i - 1), 'months');
                        break;
                    }
                } 

                return moment(interest).format("YYYY-MM-DD");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COUPPCD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 4){
                    basis = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var interest; //结算日之前的上一个付息日

                var maxCount = Math.ceil(moment(maturity).diff(moment(settlement), 'months') / (12 / frequency)) + 1;

                for(var i = 1; i <= maxCount; i++){
                    var di = moment(maturity).subtract((12 / frequency) * i, 'months');

                    if(di <= moment(settlement)){
                        interest = di;
                        break;
                    }
                } 

                return moment(interest).format("YYYY-MM-DD");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //每期的付款金额
                var pmt = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pmt)){
                    return pmt;
                }

                if(!jfgrid.func_methods.isRealNum(pmt)){
                    return jfgrid.formula.error.v;
                }

                pmt = parseFloat(pmt);

                //现值，或一系列未来付款的当前值的累积和
                var pv = 0;
                if(arguments.length >= 4){
                    pv = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(pv)){
                        return pv;
                    }

                    if(!jfgrid.func_methods.isRealNum(pv)){
                        return jfgrid.formula.error.v;
                    }

                    pv = parseFloat(pv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 5){
                    type = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result;
                if (rate === 0) {
                    result = pv + pmt * nper;
                } 
                else {
                    var term = Math.pow(1 + rate, nper);
                    if (type === 1) {
                        result = pv * term + pmt * (1 + rate) * (term - 1) / rate;
                    } 
                    else {
                        result = pv * term + pmt * (term - 1) / rate;
                    }
                }

                return -result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FVSCHEDULE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //现值
                var principal = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(principal)){
                    return principal;
                }

                if(!jfgrid.func_methods.isRealNum(principal)){
                    return jfgrid.formula.error.v;
                }

                principal = parseFloat(principal);

                //一组利率
                var data_schedule = arguments[1];
                var schedule = [];

                if(jfgrid.getObjType(data_schedule) == "array"){
                    if(jfgrid.getObjType(data_schedule[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_schedule)){
                        return jfgrid.formula.error.v;
                    }

                    schedule = schedule.concat(jfgrid.func_methods.getDataArr(data_schedule, false));
                }
                else if(jfgrid.getObjType(data_schedule) == "object" && data_schedule.startCell != null){
                    schedule = schedule.concat(jfgrid.func_methods.getCellDataArr(data_schedule, "number", false));
                }
                else{
                    schedule.push(data_schedule);
                }

                var schedule_n = [];

                for(var i = 0; i < schedule.length; i++){
                    var number = schedule[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    schedule_n.push(parseFloat(number));
                }

                //计算
                var n = schedule_n.length;
                var future = principal;

                for (var i = 0; i < n; i++) {
                    future *= 1 + schedule_n[i];
                }

                return future;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "YIELD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }
                
                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //有价证券的价格
                var pr = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(pr)){
                    return pr;
                }

                if(!jfgrid.func_methods.isRealNum(pr)){
                    return jfgrid.formula.error.v;
                }

                pr = parseFloat(pr);

                //有价证券的清偿价值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[5]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 7){
                    basis = jfgrid.func_methods.getFirstValue(arguments[6]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(rate < 0){
                    return jfgrid.formula.error.nm;
                }

                if(pr <= 0 || redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var num = window.jfgrid_function.COUPNUM.f(settlement, maturity, frequency, basis);

                if(num > 1){
                    var a = 1;
                    var b = 0;
                    var yld = a;

                    for(var i = 1; i <= 100; i++){
                        var price = window.jfgrid_function.PRICE.f(settlement, maturity, rate, yld, redemption, frequency, basis);

                        if(Math.abs(price - pr) < 0.000001){
                            break;
                        }

                        if(price > pr){
                            b = yld;
                        }
                        else{
                            a = yld;
                        }

                        yld = (a + b) / 2;
                    }

                    var result = yld;
                }
                else{
                    var DSR = window.jfgrid_function.COUPDAYSNC.f(settlement, maturity, frequency, basis);
                    var E = window.jfgrid_function.COUPDAYS.f(settlement, maturity, frequency, basis);
                    var A = window.jfgrid_function.COUPDAYBS.f(settlement, maturity, frequency, basis);

                    var T1 = redemption / 100 + rate / frequency;
                    var T2 = pr / 100 + (A / E) * (rate / frequency);
                    var T3 = frequency * E / DSR;

                    var result = ((T1 - T2) / T2) * T3;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "YIELDDISC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }
                
                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的价格
                var pr = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pr)){
                    return pr;
                }

                if(!jfgrid.func_methods.isRealNum(pr)){
                    return jfgrid.formula.error.v;
                }

                pr = parseFloat(pr);

                //有价证券的清偿价值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(pr <= 0 || redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                var yearfrac = window.jfgrid_function.YEARFRAC.f(settlement, maturity, basis);

                return (redemption / pr - 1) / yearfrac;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NOMINAL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //每年的实际利率
                var effect_rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(effect_rate)){
                    return effect_rate;
                }

                if(!jfgrid.func_methods.isRealNum(effect_rate)){
                    return jfgrid.formula.error.v;
                }

                effect_rate = parseFloat(effect_rate);

                //每年的复利期数
                var npery = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(npery)){
                    return npery;
                }

                if(!jfgrid.func_methods.isRealNum(npery)){
                    return jfgrid.formula.error.v;
                }

                npery = parseInt(npery);

                if(effect_rate <= 0 || npery < 1){
                    return jfgrid.formula.error.nm;
                }

                return (Math.pow(effect_rate + 1, 1 / npery) - 1) * npery;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "XIRR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //投资相关收益或支出的数组或范围
                var data_values = arguments[0];
                var values = [];

                if(jfgrid.getObjType(data_values) == "array"){
                    if(jfgrid.getObjType(data_values[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_values)){
                        return jfgrid.formula.error.v;
                    }

                    values = values.concat(jfgrid.func_methods.getDataArr(data_values, false));
                }
                else if(jfgrid.getObjType(data_values) == "object" && data_values.startCell != null){
                    values = values.concat(jfgrid.func_methods.getCellDataArr(data_values, "number", false));
                }
                else{
                    values.push(data_values);
                }

                var values_n = [];

                for(var i = 0; i < values.length; i++){
                    var number = values[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    values_n.push(parseFloat(number));
                }

                //与现金流数额参数中的现金流对应的日期数组或范围
                var dates = jfgrid.func_methods.getCellrangeDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(dates)){
                    return dates;
                }

                for(var i = 0; i < dates.length; i++){
                    if(!moment(dates[i]).isValid()){
                        return jfgrid.formula.error.v;
                    }
                }

                //对内部回报率的估算值
                var guess = 0.1;
                if(arguments.length == 3){
                    guess = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(guess)){
                        return guess;
                    }

                    if(!jfgrid.func_methods.isRealNum(guess)){
                        return jfgrid.formula.error.v;
                    }

                    guess = parseFloat(guess);
                }

                var positive = false;
                var negative = false;
                for (var i = 0; i < values_n.length; i++) {
                    if (values_n[i] > 0) {
                        positive = true;
                    }

                    if (values_n[i] < 0) {
                        negative = true;
                    }

                    if(positive && negative){
                        break;
                    }
                }

                if(!positive || !negative){
                    return jfgrid.formula.error.nm;
                }

                if(values_n.length != dates.length){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var irrResult = function(values, dates, rate) {
                    var r = rate + 1;
                    var result = values[0];
                    
                    for (var i = 1; i < values.length; i++) {
                        result += values[i] / Math.pow(r, window.jfgrid_function.DAYS.f(dates[i], dates[0]) / 365);
                    }

                    return result;
                };

                var irrResultDeriv = function(values, dates, rate) {
                    var r = rate + 1;
                    var result = 0;

                    for (var i = 1; i < values.length; i++) {
                        var frac = window.jfgrid_function.DAYS.f(dates[i], dates[0]) / 365;
                        result -= frac * values[i] / Math.pow(r, frac + 1);
                    }

                    return result;
                };

                var resultRate = guess;
                var epsMax = 1e-10;

                var newRate, epsRate, resultValue;
                var contLoop = true;
                
                do {
                    resultValue = irrResult(values_n, dates, resultRate);
                    newRate = resultRate - resultValue / irrResultDeriv(values_n, dates, resultRate);
                    epsRate = Math.abs(newRate - resultRate);
                    resultRate = newRate;
                    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
                } 
                while (contLoop);

                return resultRate;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MIRR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //投资相关收益或支出的数组或范围
                var data_values = arguments[0];
                var values = [];

                if(jfgrid.getObjType(data_values) == "array"){
                    if(jfgrid.getObjType(data_values[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_values)){
                        return jfgrid.formula.error.v;
                    }

                    values = values.concat(jfgrid.func_methods.getDataArr(data_values, false));
                }
                else if(jfgrid.getObjType(data_values) == "object" && data_values.startCell != null){
                    values = values.concat(jfgrid.func_methods.getCellDataArr(data_values, "number", false));
                }
                else{
                    values.push(data_values);
                }

                var values_n = [];

                for(var i = 0; i < values.length; i++){
                    var number = values[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    values_n.push(parseFloat(number));
                }

                //现金流中使用的资金支付的利率
                var finance_rate = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(finance_rate)){
                    return finance_rate;
                }

                if(!jfgrid.func_methods.isRealNum(finance_rate)){
                    return jfgrid.formula.error.v;
                }

                finance_rate = parseFloat(finance_rate);

                //将现金流再投资的收益率
                var reinvest_rate = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(reinvest_rate)){
                    return reinvest_rate;
                }

                if(!jfgrid.func_methods.isRealNum(reinvest_rate)){
                    return jfgrid.formula.error.v;
                }

                reinvest_rate = parseFloat(reinvest_rate);

                //计算
                var n = values_n.length;
                var payments = [];
                var incomes = [];
                
                for (var i = 0; i < n; i++) {
                    if (values_n[i] < 0) {
                        payments.push(values_n[i]);
                    } 
                    else {
                        incomes.push(values_n[i]);
                    }
                }

                if(payments.length == 0 || incomes.length == 0){
                    return jfgrid.formula.error.d;
                }

                var num = -window.jfgrid_function.NPV.f(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);
                var den = window.jfgrid_function.NPV.f(finance_rate, payments) * (1 + finance_rate);

                return Math.pow(num / den, 1 / (n - 1)) - 1;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IRR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //投资相关收益或支出的数组或范围
                var data_values = arguments[0];
                var values = [];

                if(jfgrid.getObjType(data_values) == "array"){
                    if(jfgrid.getObjType(data_values[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_values)){
                        return jfgrid.formula.error.v;
                    }

                    values = values.concat(jfgrid.func_methods.getDataArr(data_values, false));
                }
                else if(jfgrid.getObjType(data_values) == "object" && data_values.startCell != null){
                    values = values.concat(jfgrid.func_methods.getCellDataArr(data_values, "number", false));
                }
                else{
                    values.push(data_values);
                }

                var values_n = [];

                for(var i = 0; i < values.length; i++){
                    var number = values[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    values_n.push(parseFloat(number));
                }

                //对内部回报率的估算值
                var guess = 0.1;
                if(arguments.length == 2){
                    guess = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(guess)){
                        return guess;
                    }

                    if(!jfgrid.func_methods.isRealNum(guess)){
                        return jfgrid.formula.error.v;
                    }

                    guess = parseFloat(guess);
                }

                var dates = [];
                var positive = false;
                var negative = false;
                
                for (var i = 0; i < values.length; i++) {
                    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;
                    
                    if (values[i] > 0) {
                        positive = true;
                    }
                    
                    if (values[i] < 0) {
                        negative = true;
                    }
                }

                if(!positive || !negative){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var irrResult = function(values, dates, rate) {
                    var r = rate + 1;
                    var result = values[0];
                    
                    for (var i = 1; i < values.length; i++) {
                        // result += values[i] / Math.pow(r, window.jfgrid_function.DAYS.f(dates[i], dates[0]) / 365);
                        result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);
                    }

                    return result;
                };

                var irrResultDeriv = function(values, dates, rate) {
                    var r = rate + 1;
                    var result = 0;

                    for (var i = 1; i < values.length; i++) {
                        // var frac = window.jfgrid_function.DAYS.f(dates[i], dates[0]) / 365;
                        var frac = (dates[i] - dates[0]) / 365;
                        result -= frac * values[i] / Math.pow(r, frac + 1);
                    }

                    return result;
                };

                var resultRate = guess;
                var epsMax = 1e-10;

                var newRate, epsRate, resultValue;
                var contLoop = true;
                
                do {
                    resultValue = irrResult(values_n, dates, resultRate);
                    newRate = resultRate - resultValue / irrResultDeriv(values_n, dates, resultRate);
                    epsRate = Math.abs(newRate - resultRate);
                    resultRate = newRate;
                    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
                } 
                while (contLoop);

                return resultRate;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NPV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //某一期间的贴现率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //支出（负值）和收益（正值）
                var values = [];

                for(var i = 1; i < arguments.length; i++){
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        values = values.concat(jfgrid.func_methods.getDataArr(data, true));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        values = values.concat(jfgrid.func_methods.getCellDataArr(data, "number", true));
                    }
                    else{
                        values.push(data);
                    }
                }

                var values_n = [];

                for(var i = 0; i < values.length; i++){
                    var number = values[i];

                    if(jfgrid.func_methods.isRealNum(number)){
                        values_n.push(parseFloat(number));
                    }
                }

                //计算
                var result = 0;

                if(values_n.length > 0){
                    for(var i = 0; i < values_n.length; i++){
                        result += values_n[i] / Math.pow(1 + rate, i + 1);
                    }
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "XNPV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //应用于现金流的贴现率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //与 dates 中的支付时间相对应的一系列现金流
                var data_values = arguments[1];
                var values = [];

                if(jfgrid.getObjType(data_values) == "array"){
                    if(jfgrid.getObjType(data_values[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_values)){
                        return jfgrid.formula.error.v;
                    }

                    values = values.concat(jfgrid.func_methods.getDataArr(data_values, false));
                }
                else if(jfgrid.getObjType(data_values) == "object" && data_values.startCell != null){
                    values = values.concat(jfgrid.func_methods.getCellDataArr(data_values, "number", false));
                }
                else{
                    values.push(data_values);
                }

                var values_n = [];

                for(var i = 0; i < values.length; i++){
                    var number = values[i];

                    if(!jfgrid.func_methods.isRealNum(number)){
                        return jfgrid.formula.error.v;
                    }

                    values_n.push(parseFloat(number));
                }

                //与现金流支付相对应的支付日期表
                var dates = jfgrid.func_methods.getCellrangeDate(arguments[2]);
                if(jfgrid.func_methods.valueIsError(dates)){
                    return dates;
                }

                for(var i = 0; i < dates.length; i++){
                    if(!moment(dates[i]).isValid()){
                        return jfgrid.formula.error.v;
                    }
                }

                if(values_n.length != dates.length){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result = 0;
                for (var i = 0; i < values_n.length; i++) {
                    result += values_n[i] / Math.pow(1 + rate, window.jfgrid_function.DAYS.f(dates[i], dates[0]) / 365);
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CUMIPMT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //年金的现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //首期
                var start_period = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(start_period)){
                    return start_period;
                }

                if(!jfgrid.func_methods.isRealNum(start_period)){
                    return jfgrid.formula.error.v;
                }

                start_period = parseInt(start_period);

                //末期
                var end_period = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(end_period)){
                    return end_period;
                }

                if(!jfgrid.func_methods.isRealNum(end_period)){
                    return jfgrid.formula.error.v;
                }

                end_period = parseInt(end_period);

                //指定各期的付款时间是在期初还是期末
                var type = jfgrid.func_methods.getFirstValue(arguments[5]);
                if(jfgrid.func_methods.valueIsError(type)){
                    return type;
                }

                if(!jfgrid.func_methods.isRealNum(type)){
                    return jfgrid.formula.error.v;
                }

                type = parseFloat(type);

                if(rate <= 0 || nper <= 0 || pv <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(start_period < 1 || end_period < 1 || start_period > end_period){
                    return jfgrid.formula.error.nm;
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var payment = window.jfgrid_function.PMT.f(rate, nper, pv, 0, type);
                var interest = 0;

                if (start_period === 1) {
                    if (type === 0) {
                        interest = -pv;
                        start_period++;
                    }
                }

                for (var i = start_period; i <= end_period; i++) {
                    if (type === 1) {
                        interest += window.jfgrid_function.FV.f(rate, i - 2, payment, pv, 1) - payment;
                    } 
                    else {
                        interest += window.jfgrid_function.FV.f(rate, i - 1, payment, pv, 0);
                    }
                }

                interest *= rate;

                return interest;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PMT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //贷款利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //该项贷款的付款总数
                var nper = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 4){
                    fv = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length == 5){
                    type = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result;
                
                if (rate === 0) {
                    result = (pv + fv) / nper;
                } 
                else {
                    var term = Math.pow(1 + rate, nper);
                    
                    if (type === 1) {
                        result = (fv * rate / (term - 1) + pv * rate / (1 - 1 / term)) / (1 + rate);
                    } 
                    else {
                        result = fv * rate / (term - 1) + pv * rate / (1 - 1 / term);
                    }
                }

                return -result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IPMT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //用于计算其利息数额的期数
                var per = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(per)){
                    return per;
                }

                if(!jfgrid.func_methods.isRealNum(per)){
                    return jfgrid.formula.error.v;
                }

                per = parseFloat(per);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 5){
                    fv = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 6){
                    type = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(per < 1 || per > nper){
                    return jfgrid.formula.error.nm;
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var payment = window.jfgrid_function.PMT.f(rate, nper, pv, fv, type);
                var interest;
                
                if (per === 1) {
                    if (type === 1) {
                        interest = 0;
                    } 
                    else {
                        interest = -pv;
                    }
                } 
                else {
                    if (type === 1) {
                        interest = window.jfgrid_function.FV.f(rate, per - 2, payment, pv, 1) - payment;
                    } 
                    else {
                        interest = window.jfgrid_function.FV.f(rate, per - 1, payment, pv, 0);
                    }
                }

                var result = interest * rate;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PPMT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //用于计算其利息数额的期数
                var per = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(per)){
                    return per;
                }

                if(!jfgrid.func_methods.isRealNum(per)){
                    return jfgrid.formula.error.v;
                }

                per = parseFloat(per);

                //总付款期数
                var nper = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(nper)){
                    return nper;
                }

                if(!jfgrid.func_methods.isRealNum(nper)){
                    return jfgrid.formula.error.v;
                }

                nper = parseFloat(nper);

                //现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 5){
                    fv = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 6){
                    type = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(per < 1 || per > nper){
                    return jfgrid.formula.error.nm;
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var payment = window.jfgrid_function.PMT.f(rate, nper, pv, fv, type);
                var payment2 = window.jfgrid_function.IPMT.f(rate, per, nper, pv, fv, type);

                return payment - payment2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "INTRATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的投资额
                var investment = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(investment)){
                    return investment;
                }

                if(!jfgrid.func_methods.isRealNum(investment)){
                    return jfgrid.formula.error.v;
                }

                investment = parseFloat(investment);

                //有价证券到期时的兑换值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(investment <= 0 || redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }
                
                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }
                    
                        result = 360 / ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            result = ylength / moment(maturity).diff(moment(settlement), 'days');
                            result = ((redemption - investment) / investment) * result;

                            return result;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        result = average / moment(maturity).diff(moment(settlement), 'days');
                        
                        break;
                    case 2: // Actual/360
                        result = 360 / moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 3: // Actual/365
                        result = 365 / moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 4: // European 30/360
                        result = 360 / ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));
                        
                        break;
                }

                result = ((redemption - investment) / investment) * result;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PRICE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //有价证券的年收益率
                var yld = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(yld)){
                    return yld;
                }

                if(!jfgrid.func_methods.isRealNum(yld)){
                    return jfgrid.formula.error.v;
                }

                yld = parseFloat(yld);

                //有价证券的清偿价值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[5]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 7){
                    basis = jfgrid.func_methods.getFirstValue(arguments[6]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(rate < 0 || yld < 0){
                    return jfgrid.formula.error.nm;
                }

                if(redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var DSC = window.jfgrid_function.COUPDAYSNC.f(settlement, maturity, frequency, basis);
                var E = window.jfgrid_function.COUPDAYS.f(settlement, maturity, frequency, basis);
                var A = window.jfgrid_function.COUPDAYBS.f(settlement, maturity, frequency, basis);
                var num = window.jfgrid_function.COUPNUM.f(settlement, maturity, frequency, basis);

                if(num > 1){
                    var T1 = redemption / Math.pow(1 + yld / frequency, num - 1 + DSC / E);

                    var T2 = 0;
                    for(var i = 1; i <= num; i++){
                        T2 += (100 * rate / frequency) / Math.pow(1 + yld / frequency, i - 1 + DSC / E);
                    }

                    var T3 = 100 * (rate / frequency) * (A / E);

                    var result = T1 + T2 - T3;
                }
                else{
                    var DSR = E - A;
                    var T1 = 100 * (rate / frequency) + redemption;
                    var T2 = (yld / frequency) * (DSR / E) + 1;
                    var T3 = 100 * (rate / frequency) * (A / E);

                    var result = T1 / T2 - T3;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PRICEDISC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的贴现率
                var discount = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(discount)){
                    return discount;
                }

                if(!jfgrid.func_methods.isRealNum(discount)){
                    return jfgrid.formula.error.v;
                }

                discount = parseFloat(discount);

                //有价证券的清偿价值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(discount <= 0 || redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if (sd === 31 && ed === 31) {
                            sd = 30;
                            ed = 30;
                        } 
                        else if (sd === 31) {
                            sd = 30;
                        } 
                        else if (sd === 30 && ed === 31) {
                            ed = 30;
                        }

                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;
                        
                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            result = moment(maturity).diff(moment(settlement), 'days') / ylength;
                            result = redemption - discount * redemption * result;

                            return result;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        result = moment(maturity).diff(moment(settlement), 'days') / average;
                        
                        break;
                    case 2: // Actual/360
                        result = moment(maturity).diff(moment(settlement), 'days') / 360;

                        break;
                    case 3: // Actual/365
                        result = moment(maturity).diff(moment(settlement), 'days') / 365;

                        break;
                    case 4: // European 30/360
                        result = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;

                        break;
                }

                result = redemption - discount * redemption * result;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PRICEMAT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //发行日
                var issue = jfgrid.func_methods.getCellDate(arguments[2]);
                if(jfgrid.func_methods.valueIsError(issue)){
                    return issue;
                }

                if(!moment(issue).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券在发行日的利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //有价证券的年收益率
                var yld = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(yld)){
                    return yld;
                }

                if(!jfgrid.func_methods.isRealNum(yld)){
                    return jfgrid.formula.error.v;
                }

                yld = parseFloat(yld);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 6){
                    basis = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(rate < 0 || yld < 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();
                var td = moment(issue).date();
                var tm = moment(issue).month() + 1;
                var ty = moment(issue).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if(sd == 31){
                            sd = 30;
                        }

                        if(ed == 31){
                            ed = 30;
                        }

                        if(td == 31){
                            td = 30;
                        }

                        var B = 360;
                        var DSM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));
                        var DIM = ((ed + em * 30 + ey * 360) - (td + tm * 30 + ty * 360));
                        var A = ((sd + sm * 30 + sy * 360) - (td + tm * 30 + ty * 360));

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            var B = ylength;
                            var DSM = moment(maturity).diff(moment(settlement), 'days');
                            var DIM = moment(settlement).diff(moment(issue), 'days');
                            var A = moment(maturity).diff(moment(issue), 'days');

                            result = (100 + (DIM / B * rate * 100)) / (1 + DSM / B * yld) - (A / B * rate * 100);

                            return result;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        var B = average;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');
                        var DIM = moment(settlement).diff(moment(issue), 'days');
                        var A = moment(maturity).diff(moment(issue), 'days');

                        break;
                    case 2: // Actual/360
                        var B = 360;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');
                        var DIM = moment(settlement).diff(moment(issue), 'days');
                        var A = moment(maturity).diff(moment(issue), 'days');

                        break;
                    case 3: // Actual/365
                        var B = 365;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');
                        var DIM = moment(settlement).diff(moment(issue), 'days');
                        var A = moment(maturity).diff(moment(issue), 'days');

                        break;
                    case 4: // European 30/360
                        var B = 360;
                        var DSM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));
                        var DIM = ((ed + em * 30 + ey * 360) - (td + tm * 30 + ty * 360));
                        var A = ((sd + sm * 30 + sy * 360) - (td + tm * 30 + ty * 360));

                        break;
                }

                result = (100 + (DIM / B * rate * 100)) / (1 + (DSM / B * yld)) - (A / B * rate * 100);

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RECEIVED": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的投资额
                var investment = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(investment)){
                    return investment;
                }

                if(!jfgrid.func_methods.isRealNum(investment)){
                    return jfgrid.formula.error.v;
                }

                investment = parseFloat(investment);

                //有价证券的贴现率
                var discount = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(discount)){
                    return discount;
                }

                if(!jfgrid.func_methods.isRealNum(discount)){
                    return jfgrid.formula.error.v;
                }

                discount = parseFloat(discount);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseFloat(basis);
                }

                if(investment <= 0 || discount <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if(sd == 31){
                            sd = 30;
                        }

                        if(ed == 31){
                            ed = 30;
                        }

                        var B = 360;
                        var DIM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            var B = ylength;
                            var DIM = moment(maturity).diff(moment(settlement), 'days');

                            result = investment / (1 - discount * DIM / B);

                            return result;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, 'date': 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        var B = average;
                        var DIM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 2: // Actual/360
                        var B = 360;
                        var DIM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 3: // Actual/365
                        var B = 365;
                        var DIM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 4: // European 30/360
                        var B = 360;
                        var DIM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));

                        break;
                }

                result = investment / (1 - discount * DIM / B);

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DISC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的价格
                var pr = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pr)){
                    return pr;
                }

                if(!jfgrid.func_methods.isRealNum(pr)){
                    return jfgrid.formula.error.v;
                }

                pr = parseFloat(pr);

                //有价证券的清偿价值
                var redemption = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(redemption)){
                    return redemption;
                }

                if(!jfgrid.func_methods.isRealNum(redemption)){
                    return jfgrid.formula.error.v;
                }

                redemption = parseFloat(redemption);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 5){
                    basis = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseFloat(basis);
                }

                if(pr <= 0 || redemption <= 0){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var sd = moment(settlement).date();
                var sm = moment(settlement).month() + 1;
                var sy = moment(settlement).year();
                var ed = moment(maturity).date();
                var em = moment(maturity).month() + 1;
                var ey = moment(maturity).year();

                var result;
                switch (basis) {
                    case 0: // US (NASD) 30/360
                        if(sd == 31){
                            sd = 30;
                        }

                        if(ed == 31){
                            ed = 30;
                        }

                        var B = 360;
                        var DSM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));

                        break;
                    case 1: // Actual/actual
                        var ylength = 365;
                        if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
                            if ((sy === ey && jfgrid.func_methods.isLeapYear(sy)) || jfgrid.func_methods.feb29Between(settlement, maturity) || (em === 1 && ed === 29)) {
                                ylength = 366;
                            }

                            var B = ylength;
                            var DSM = moment(maturity).diff(moment(settlement), 'days');

                            result = ((redemption - pr) / redemption) * (B / DSM); 

                            return result;
                        }

                        var years = (ey - sy) + 1;
                        var days = (moment().set({ 'year': ey + 1, 'month': 0, 'date': 1 }) - moment().set({ 'year': sy, 'month': 0, "date": 1 })) / 1000 / 60 / 60 / 24;
                        var average = days / years;

                        var B = average;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 2: // Actual/360
                        var B = 360;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 3: // Actual/365
                        var B = 365;
                        var DSM = moment(maturity).diff(moment(settlement), 'days');

                        break;
                    case 4: // European 30/360
                        var B = 360;
                        var DSM = ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360));

                        break;
                }

                result = ((redemption - pr) / redemption) * (B / DSM);

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NPER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //利率
                var rate = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rate)){
                    return rate;
                }

                if(!jfgrid.func_methods.isRealNum(rate)){
                    return jfgrid.formula.error.v;
                }

                rate = parseFloat(rate);

                //各期所应支付的金额
                var pmt = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(pmt)){
                    return pmt;
                }

                if(!jfgrid.func_methods.isRealNum(pmt)){
                    return jfgrid.formula.error.v;
                }

                pmt = parseFloat(pmt);

                //现值
                var pv = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(pv)){
                    return pv;
                }

                if(!jfgrid.func_methods.isRealNum(pv)){
                    return jfgrid.formula.error.v;
                }

                pv = parseFloat(pv);

                //最后一次付款后希望得到的现金余额
                var fv = 0;
                if(arguments.length >= 4){
                    fv = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(fv)){
                        return fv;
                    }

                    if(!jfgrid.func_methods.isRealNum(fv)){
                        return jfgrid.formula.error.v;
                    }

                    fv = parseFloat(fv);
                }

                //指定各期的付款时间是在期初还是期末
                var type = 0;
                if(arguments.length >= 5){
                    type = jfgrid.func_methods.getFirstValue(arguments[4]);
                    if(jfgrid.func_methods.valueIsError(type)){
                        return type;
                    }

                    if(!jfgrid.func_methods.isRealNum(type)){
                        return jfgrid.formula.error.v;
                    }

                    type = parseFloat(type);
                }

                if(type != 0 && type != 1){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var num = pmt * (1 + rate * type) - fv * rate;
                var den = (pv * rate + pmt * (1 + rate * type));

                return Math.log(num / den) / Math.log(1 + rate);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SLN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //资产原值
                var cost = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(cost)){
                    return cost;
                }

                if(!jfgrid.func_methods.isRealNum(cost)){
                    return jfgrid.formula.error.v;
                }

                cost = parseFloat(cost);

                //资产残值
                var salvage = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(salvage)){
                    return salvage;
                }

                if(!jfgrid.func_methods.isRealNum(salvage)){
                    return jfgrid.formula.error.v;
                }

                salvage = parseFloat(salvage);

                //资产的折旧期数
                var life = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(life)){
                    return life;
                }

                if(!jfgrid.func_methods.isRealNum(life)){
                    return jfgrid.formula.error.v;
                }

                life = parseFloat(life);

                if(life == 0){
                    return jfgrid.formula.error.d;
                }

                return (cost - salvage) / life;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DURATION": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var coupon = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(coupon)){
                    return coupon;
                }

                if(!jfgrid.func_methods.isRealNum(coupon)){
                    return jfgrid.formula.error.v;
                }

                coupon = parseFloat(coupon);

                //有价证券的年收益率
                var yld = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(yld)){
                    return yld;
                }

                if(!jfgrid.func_methods.isRealNum(yld)){
                    return jfgrid.formula.error.v;
                }

                yld = parseFloat(yld);

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 6){
                    basis = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(coupon < 0 || yld < 0){
                    return jfgrid.formula.error.nm;
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                var nper = window.jfgrid_function.COUPNUM.f(settlement, maturity, frequency, basis);

                var sum1 = 0;
                var sum2 = 0;
                for(var i = 1; i <= nper; i++){
                    sum1 += 100 * (coupon / frequency) * i / Math.pow(1 + (yld / frequency), i);
                    sum2 += 100 * (coupon / frequency) / Math.pow(1 + (yld / frequency), i);
                }

                var result = (sum1 + 100 * nper / Math.pow(1 + (yld / frequency), nper)) / (sum2 + 100 / Math.pow(1 + (yld / frequency), nper));
                result = result / frequency;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MDURATION": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //结算日
                var settlement = jfgrid.func_methods.getCellDate(arguments[0]);
                if(jfgrid.func_methods.valueIsError(settlement)){
                    return settlement;
                }

                if(!moment(settlement).isValid()){
                    return jfgrid.formula.error.v;
                }

                //到期日
                var maturity = jfgrid.func_methods.getCellDate(arguments[1]);
                if(jfgrid.func_methods.valueIsError(maturity)){
                    return maturity;
                }

                if(!moment(maturity).isValid()){
                    return jfgrid.formula.error.v;
                }

                //有价证券的年息票利率
                var coupon = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(coupon)){
                    return coupon;
                }

                if(!jfgrid.func_methods.isRealNum(coupon)){
                    return jfgrid.formula.error.v;
                }

                coupon = parseFloat(coupon);

                //有价证券的年收益率
                var yld = jfgrid.func_methods.getFirstValue(arguments[3]);
                if(jfgrid.func_methods.valueIsError(yld)){
                    return yld;
                }

                if(!jfgrid.func_methods.isRealNum(yld)){
                    return jfgrid.formula.error.v;
                }

                yld = parseFloat(yld);

                //年付息次数
                var frequency = jfgrid.func_methods.getFirstValue(arguments[4]);
                if(jfgrid.func_methods.valueIsError(frequency)){
                    return frequency;
                }

                if(!jfgrid.func_methods.isRealNum(frequency)){
                    return jfgrid.formula.error.v;
                }

                frequency = parseInt(frequency);

                //日计数基准类型
                var basis = 0;
                if(arguments.length == 6){
                    basis = jfgrid.func_methods.getFirstValue(arguments[5]);
                    if(jfgrid.func_methods.valueIsError(basis)){
                        return basis;
                    }

                    if(!jfgrid.func_methods.isRealNum(basis)){
                        return jfgrid.formula.error.v;
                    }

                    basis = parseInt(basis);
                }

                if(coupon < 0 || yld < 0){
                    return jfgrid.formula.error.nm;
                }

                if(frequency != 1 && frequency != 2 && frequency != 4){
                    return jfgrid.formula.error.nm;
                }

                if(basis < 0 || basis > 4){
                    return jfgrid.formula.error.nm;
                }

                if(moment(settlement) - moment(maturity) >= 0){
                    return jfgrid.formula.error.nm;
                }

                var duration = window.jfgrid_function.DURATION.f(settlement, maturity, coupon, yld, frequency, basis);

                return duration / (1 + yld / frequency);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BIN2DEC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //二进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!/^[01]{1,10}$/g.test(number)){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result = parseInt(number, 2);
                var stringified = number.toString();
      
                if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
                    return parseInt(stringified.substring(1), 2) - 512;
                } 
                else {
                    return result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BIN2HEX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //二进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }
                
                if(!/^[01]{1,10}$/g.test(number)){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var result = parseInt(number, 2).toString(16).toUpperCase();

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BIN2OCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //二进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }
                
                if(!/^[01]{1,10}$/g.test(number)){
                    return jfgrid.formula.error.nm;
                }

                //计算
                var stringified = number.toString();
                if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
                    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);
                }

                var result = parseInt(number, 2).toString(8);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DEC2BIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                if (number < 0) {
                    return '1' + new Array(9 - (512 + number).toString(2).length).join('0') + (512 + number).toString(2);
                }

                var result = parseInt(number, 10).toString(2);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DEC2HEX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                if (number < 0) {
                    return (1099511627776 + number).toString(16).toUpperCase();
                }

                var result = parseInt(number, 10).toString(16).toUpperCase();

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DEC2OCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                if (number < 0) {
                    return (1073741824 + number).toString(8);
                }
                
                var result = parseInt(number, 10).toString(8);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HEX2BIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十六进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;

                var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);

                if (decimal < -512 || decimal > 511) {
                    return jfgrid.formula.error.nm;
                }

                if (negative) {
                    return '1' + new Array(9 - (512 + decimal).toString(2).length).join('0') + (512 + decimal).toString(2);
                }

                var result = decimal.toString(2);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HEX2DEC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十六进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                var decimal = parseInt(number, 16);

                return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "HEX2OCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //十六进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                var decimal = parseInt(number, 16);

                if (decimal > 536870911 && decimal < 1098974756864) {
                    return jfgrid.formula.error.nm;
                }

                if (decimal >= 1098974756864) {
                    return (decimal - 1098437885952).toString(8);
                }

                var result = decimal.toString(8);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "OCT2BIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //八进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^[0-7]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                number = number.toString();

                var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;

                var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);

                if (decimal < -512 || decimal > 511) {
                    return error.num;
                }

                if (negative) {
                    return '1' + new Array(9 - (512 + decimal).toString(2).length).join('0') + (512 + decimal).toString(2);
                }

                var result = decimal.toString(2);

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "OCT2DEC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //八进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if (!/^[0-7]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                var decimal = parseInt(number, 8);

                return (decimal >= 536870912) ? decimal - 1073741824 : decimal;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "OCT2HEX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //八进制数
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                //有效位数
                var places = null;
                if(arguments.length == 2){
                    places = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(places)){
                        return places;
                    }

                    if(!jfgrid.func_methods.isRealNum(places)){
                        return jfgrid.formula.error.v;
                    }

                    places = parseInt(places);
                }

                if (!/^[0-7]{1,10}$/.test(number)) {
                    return jfgrid.formula.error.nm;
                }

                //计算
                var decimal = parseInt(number, 8);

                if (decimal >= 536870912) {
                    return 'FF' + (decimal + 3221225472).toString(16).toUpperCase();
                }

                var result = decimal.toString(16).toUpperCase();

                if (places == null) {
                    return result;
                } 
                else {
                    if(places < 0 || places < result.length){
                        return jfgrid.formula.error.nm;
                    }

                    return new Array(places - result.length + 1).join('0') + result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COMPLEX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //复数的实系数
                var real_num = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(real_num)){
                    return real_num;
                }

                if(!jfgrid.func_methods.isRealNum(real_num)){
                    return jfgrid.formula.error.v;
                }

                real_num = parseFloat(real_num);

                //复数的虚系数
                var i_num = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(i_num)){
                    return i_num;
                }

                if(!jfgrid.func_methods.isRealNum(i_num)){
                    return jfgrid.formula.error.v;
                }

                i_num = parseFloat(i_num);

                //复数中虚系数的后缀
                var suffix = "i";
                if(arguments.length == 3){
                    suffix = arguments[2].toString();
                }

                if(suffix != "i" && suffix != "j"){
                    return jfgrid.formula.error.v;
                }

                //计算
                if (real_num === 0 && i_num === 0) {
                    return 0;
                } 
                else if (real_num === 0) {
                    return (i_num === 1) ? suffix : i_num.toString() + suffix;
                } 
                else if (i_num === 0) {
                    return real_num.toString();
                } 
                else {
                    var sign = (i_num > 0) ? '+' : '';
                    return real_num.toString() + sign + ((i_num === 1) ? suffix : i_num.toString() + suffix);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMREAL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //复数
                var inumber = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(inumber)){
                    return inumber;
                }

                inumber = inumber.toString();

                if(inumber.toLowerCase() == "true" || inumber.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                //计算
                if(inumber == "0"){
                    return 0;
                }

                if(['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0){
                    return 0;
                }

                var plus = inumber.indexOf('+');
                var minus = inumber.indexOf('-');
      
                if (plus === 0) {
                    plus = inumber.indexOf('+', 1);
                }

                if (minus === 0) {
                    minus = inumber.indexOf('-', 1);
                }

                var last = inumber.substring(inumber.length - 1, inumber.length);
                var unit = (last === 'i' || last === 'j');

                if (plus >= 0 || minus >= 0) {
                    if (!unit) {
                        return jfgrid.formula.error.nm;
                    }

                    if (plus >= 0) {
                        return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ? jfgrid.formula.error.nm : Number(inumber.substring(0, plus));
                    } 
                    else {
                        return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ? jfgrid.formula.error.nm : Number(inumber.substring(0, minus));
                    }
                } 
                else {
                    if (unit) {
                        return (isNaN(inumber.substring(0, inumber.length - 1))) ? jfgrid.formula.error.nm : 0;
                    } 
                    else {
                        return (isNaN(inumber)) ? jfgrid.formula.error.nm : inumber;
                    }
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMAGINARY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //复数
                var inumber = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(inumber)){
                    return inumber;
                }

                inumber = inumber.toString();

                if(inumber.toLowerCase() == "true" || inumber.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                //计算
                if(inumber == "0"){
                    return 0;
                }

                if (['i', 'j'].indexOf(inumber) >= 0) {
                    return 1;
                }

                inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');

                var plus = inumber.indexOf('+');
                var minus = inumber.indexOf('-');
      
                if (plus === 0) {
                    plus = inumber.indexOf('+', 1);
                }

                if (minus === 0) {
                    minus = inumber.indexOf('-', 1);
                }

                var last = inumber.substring(inumber.length - 1, inumber.length);
                var unit = (last === 'i' || last === 'j');

                if (plus >= 0 || minus >= 0) {
                    if (!unit) {
                        return jfgrid.formula.error.nm;
                    }

                    if (plus >= 0) {
                        return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ? jfgrid.formula.error.nm : Number(inumber.substring(plus + 1, inumber.length - 1));
                    }           
                    else {
                        return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ? jfgrid.formula.error.nm : -Number(inumber.substring(minus + 1, inumber.length - 1));
                    }
                } 
                else {
                    if (unit) {
                        return (isNaN(inumber.substring(0, inumber.length - 1))) ? jfgrid.formula.error.nm : inumber.substring(0, inumber.length - 1);
                    } 
                    else {
                        return (isNaN(inumber)) ? jfgrid.formula.error.nm : 0;
                    }
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMCONJUGATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //复数
                var inumber = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(inumber)){
                    return inumber;
                }

                inumber = inumber.toString();

                var x = window.jfgrid_function.IMREAL.f(inumber);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                var y = window.jfgrid_function.IMAGINARY.f(inumber);
                if(jfgrid.func_methods.valueIsError(y)){
                    return y;
                }

                var unit = inumber.substring(inumber.length - 1);
                unit = (unit === 'i' || unit === 'j') ? unit : 'i';

                return (y !== 0) ? window.jfgrid_function.COMPLEX.f(x, -y, unit) : inumber;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMABS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var x = window.jfgrid_function.IMREAL.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                var y = window.jfgrid_function.IMAGINARY.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(y)){
                    return y;
                }

                return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DELTA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //第一个数字
                var number1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number1)){
                    return number1;
                }

                if(!jfgrid.func_methods.isRealNum(number1)){
                    return jfgrid.formula.error.v;
                }

                number1 = parseFloat(number1);

                //第二个数字
                var number2 = 0;
                if(arguments.length == 2){
                    number2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(number2)){
                        return number2;
                    }

                    if(!jfgrid.func_methods.isRealNum(number2)){
                        return jfgrid.formula.error.v;
                    }

                    number2 = parseFloat(number2);
                }

                return (number1 === number2) ? 1 : 0;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMSUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var x = window.jfgrid_function.IMREAL.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                var y = window.jfgrid_function.IMAGINARY.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(y)){
                    return y;
                }

                var result = arguments[0];

                for(var i = 1; i < arguments.length; i++){
                    var a = window.jfgrid_function.IMREAL.f(result);
                    if(jfgrid.func_methods.valueIsError(a)){
                        return a;
                    }

                    var b = window.jfgrid_function.IMAGINARY.f(result);
                    if(jfgrid.func_methods.valueIsError(b)){
                        return b;
                    }

                    var c = window.jfgrid_function.IMREAL.f(arguments[i]);
                    if(jfgrid.func_methods.valueIsError(c)){
                        return c;
                    }

                    var d = window.jfgrid_function.IMAGINARY.f(arguments[i]);
                    if(jfgrid.func_methods.valueIsError(d)){
                        return d;
                    }

                    result = window.jfgrid_function.COMPLEX.f(a + c, b + d);
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMSUB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //inumber1
                var inumber1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(inumber1)){
                    return inumber1;
                }

                inumber1 = inumber1.toString();

                if(inumber1.toLowerCase() == "true" || inumber1.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                var a = window.jfgrid_function.IMREAL.f(inumber1);
                if(jfgrid.func_methods.valueIsError(a)){
                    return a;
                }

                var b = window.jfgrid_function.IMAGINARY.f(inumber1);
                if(jfgrid.func_methods.valueIsError(b)){
                    return b;
                }

                //inumber2
                var inumber2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(inumber2)){
                    return inumber2;
                }

                inumber2 = inumber2.toString();

                if(inumber2.toLowerCase() == "true" || inumber2.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                var c = window.jfgrid_function.IMREAL.f(inumber2);
                if(jfgrid.func_methods.valueIsError(c)){
                    return c;
                }

                var d = window.jfgrid_function.IMAGINARY.f(inumber2);
                if(jfgrid.func_methods.valueIsError(d)){
                    return d;
                }

                //计算
                var unit1 = inumber1.substring(inumber1.length - 1);
                var unit2 = inumber2.substring(inumber2.length - 1);

                var unit = 'i';
                
                if (unit1 === 'j') {
                    unit = 'j';
                } 
                else if (unit2 === 'j') {
                    unit = 'j';
                }

                return window.jfgrid_function.COMPLEX.f(a - c, b - d, unit);                
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMPRODUCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var x = window.jfgrid_function.IMREAL.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(x)){
                    return x;
                }

                var y = window.jfgrid_function.IMAGINARY.f(arguments[0]);
                if(jfgrid.func_methods.valueIsError(y)){
                    return y;
                }

                var result = arguments[0];

                for(var i = 1; i < arguments.length; i++){
                    var a = window.jfgrid_function.IMREAL.f(result);
                    if(jfgrid.func_methods.valueIsError(a)){
                        return a;
                    }

                    var b = window.jfgrid_function.IMAGINARY.f(result);
                    if(jfgrid.func_methods.valueIsError(b)){
                        return b;
                    }

                    var c = window.jfgrid_function.IMREAL.f(arguments[i]);
                    if(jfgrid.func_methods.valueIsError(c)){
                        return c;
                    }

                    var d = window.jfgrid_function.IMAGINARY.f(arguments[i]);
                    if(jfgrid.func_methods.valueIsError(d)){
                        return d;
                    }

                    result = window.jfgrid_function.COMPLEX.f(a * c - b * d, a * d + b * c);
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IMDIV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //inumber1
                var inumber1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(inumber1)){
                    return inumber1;
                }

                inumber1 = inumber1.toString();

                if(inumber1.toLowerCase() == "true" || inumber1.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                var a = window.jfgrid_function.IMREAL.f(inumber1);
                if(jfgrid.func_methods.valueIsError(a)){
                    return a;
                }

                var b = window.jfgrid_function.IMAGINARY.f(inumber1);
                if(jfgrid.func_methods.valueIsError(b)){
                    return b;
                }

                //inumber2
                var inumber2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(inumber2)){
                    return inumber2;
                }

                inumber2 = inumber2.toString();

                if(inumber2.toLowerCase() == "true" || inumber2.toLowerCase() == "false"){
                    return jfgrid.formula.error.v;
                }

                var c = window.jfgrid_function.IMREAL.f(inumber2);
                if(jfgrid.func_methods.valueIsError(c)){
                    return c;
                }

                var d = window.jfgrid_function.IMAGINARY.f(inumber2);
                if(jfgrid.func_methods.valueIsError(d)){
                    return d;
                }

                //计算
                var unit1 = inumber1.substring(inumber1.length - 1);
                var unit2 = inumber2.substring(inumber2.length - 1);

                var unit = 'i';
                
                if (unit1 === 'j') {
                    unit = 'j';
                } 
                else if (unit2 === 'j') {
                    unit = 'j';
                }

                if (c === 0 && d === 0) {
                    return jfgrid.formula.error.nm;
                }

                var den = c * c + d * d;

                return window.jfgrid_function.COMPLEX.f((a * c + b * d) / den, (b * c - a * d) / den, unit);                
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NOT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //logical
                var logical = jfgrid.func_methods.getCellBoolen(arguments[0]);
                
                if(jfgrid.func_methods.valueIsError(logical)){
                    return logical;
                }

                return !logical;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return true;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FALSE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return false;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var result = true;

                for(var i = 0; i < arguments.length; i++){
                    var logical = jfgrid.func_methods.getCellBoolen(arguments[i]);
                
                    if(jfgrid.func_methods.valueIsError(logical)){
                        return logical;
                    }

                    if(!logical){
                        result = false;
                        break;
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IFERROR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var value_if_error = jfgrid.func_methods.getFirstValue(arguments[1], "text");

                var value = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(value)){
                    return value_if_error;
                }

                return value;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "IF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要测试的条件
                var logical_test = jfgrid.func_methods.getCellBoolen(arguments[0]);
                if(jfgrid.func_methods.valueIsError(logical_test)){
                    return logical_test;
                }

                //结果为 TRUE 
                var value_if_true = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(value_if_true)){
                    return value_if_true;
                }

                //结果为 FALSE 
                var value_if_false = "";
                if(arguments.length == 3){
                    value_if_false = jfgrid.func_methods.getFirstValue(arguments[2], "text");
                    if(jfgrid.func_methods.valueIsError(value_if_false)){
                        return value_if_false;
                    }
                }

                if(logical_test){
                    return value_if_true;
                }
                else{
                    return value_if_false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "OR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var result = false;

                for(var i = 0; i < arguments.length; i++){
                    var logical = jfgrid.func_methods.getCellBoolen(arguments[i]);
                
                    if(jfgrid.func_methods.valueIsError(logical)){
                        return logical;
                    }

                    if(logical){
                        result = true;
                        break;
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                return value1 != value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EQ": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                return value1 == value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 > value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GTE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 >= value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 < value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LTE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 <= value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ADD": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 + value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MINUS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 - value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MULTIPLY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                return value1 * value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DIVIDE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                if(!jfgrid.func_methods.isRealNum(value1)){
                    return jfgrid.formula.error.v;
                }

                value1 = parseFloat(value1);

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                if(!jfgrid.func_methods.isRealNum(value2)){
                    return jfgrid.formula.error.v;
                }

                value2 = parseFloat(value2);

                if(value2 == 0){
                    return jfgrid.formula.error.d;
                }

                return value1 / value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CONCAT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //value1
                var value1 = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(value1)){
                    return value1;
                }

                //value2
                var value2 = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(value2)){
                    return value2;
                }

                return value1 + "" + value2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "UNARY_PERCENT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要作为百分比解释的数值
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                var result = number / 100;

                return Math.round(result * 100) / 100;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CONCATENATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var result = "";

                for(var i = 0; i < arguments.length; i++){
                    var text = jfgrid.func_methods.getFirstValue(arguments[i], "text");
                    if(jfgrid.func_methods.valueIsError(text)){
                        return text;
                    }

                    result = result + "" + text;
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CODE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                if(text == ""){
                    return jfgrid.formula.error.v;
                }

                return text.charCodeAt(0);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CHAR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);

                if(number < 1 || number > 255){
                    return jfgrid.formula.error.v;
                }

                return String.fromCharCode(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ARABIC": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString().toUpperCase();

                if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {
                    return jfgrid.formula.error.v;
                }

                var r = 0;
                text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {
                    r += {
                        M: 1000,
                        CM: 900,
                        D: 500,
                        CD: 400,
                        C: 100,
                        XC: 90,
                        L: 50,
                        XL: 40,
                        X: 10,
                        IX: 9,
                        V: 5,
                        IV: 4,
                        I: 1
                    }[i];
                });

                return r;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ROMAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseInt(number);

                if(number == 0){
                    return "";
                }
                else if(number < 1 || number > 3999){
                    return jfgrid.formula.error.v;
                }
                
                //计算
                function convert(num) {
                    var a=[
                        ["","I","II","III","IV","V","VI","VII","VIII","IX"],  
                        ["","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"],  
                        ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"],
                        ["","M","MM","MMM"]
                    ];  
                    
                    var i = a[3][Math.floor(num / 1000)];
                    var j = a[2][Math.floor(num % 1000 / 100)];
                    var k = a[1][Math.floor(num % 100 / 10)];
                    var l = a[0][num % 10];
                    
                    return  i + j + k + l;
                }

                return convert(number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "REGEXEXTRACT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //输入文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //表达式
                var regular_expression = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(regular_expression)){
                    return regular_expression;
                }

                var match = text.match(new RegExp(regular_expression));
                return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "REGEXMATCH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //输入文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //表达式
                var regular_expression = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(regular_expression)){
                    return regular_expression;
                }

                var match = text.match(new RegExp(regular_expression));
                return match ? true : false;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "REGEXREPLACE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //输入文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                //表达式
                var regular_expression = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(regular_expression)){
                    return regular_expression;
                }

                //插入文本
                var replacement = jfgrid.func_methods.getFirstValue(arguments[2], "text");
                if(jfgrid.func_methods.valueIsError(replacement)){
                    return replacement;
                }

                return text.replace(new RegExp(regular_expression), replacement);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "T": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //文本
                var value = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                return jfgrid.getObjType(value) == "string" ? value : '';
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FIXED": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要进行舍入并转换为文本的数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);

                //小数位数
                var decimals = 2;
                if(arguments.length >= 2){
                    decimals = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(decimals)){
                        return decimals;
                    }

                    if(!jfgrid.func_methods.isRealNum(decimals)){
                        return jfgrid.formula.error.v;
                    }

                    decimals = parseInt(decimals);
                }

                //逻辑值
                var no_commas = false;
                if(arguments.length == 3){
                    no_commas = jfgrid.func_methods.getCellBoolen(arguments[2]);
                
                    if(jfgrid.func_methods.valueIsError(no_commas)){
                        return no_commas;
                    }
                }

                if(decimals > 127){
                    return jfgrid.formula.error.v;
                }
                
                //计算
                var format = no_commas ? '0' : '#,##0';
                
                if (decimals <= 0) {
                    number = Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
                } 
                else if (decimals > 0) {
                    format += '.' + new Array(decimals + 1).join('0');
                }
                
                return jfgrid.mask.update(format, number);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FIND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要查找的文本
                var find_text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(find_text)){
                    return find_text;
                }

                find_text = find_text.toString();

                //包含要查找文本的文本
                var within_text = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(within_text)){
                    return within_text;
                }

                within_text = within_text.toString();

                //指定开始进行查找的字符
                var start_num = 1;
                if(arguments.length == 3){
                    start_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(start_num)){
                        return start_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(start_num)){
                        return jfgrid.formula.error.v;
                    }

                    start_num = parseFloat(start_num);
                }

                if(start_num < 0 || start_num > within_text.length){
                    return jfgrid.formula.error.v;
                }

                if(find_text == ""){
                    return start_num;
                }

                if(within_text.indexOf(find_text) == -1){
                    return jfgrid.formula.error.v;
                }

                var result = within_text.indexOf(find_text, start_num - 1) + 1;

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FINDB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //要查找的文本
                var find_text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(find_text)){
                    return find_text;
                }

                find_text = find_text.toString();

                //包含要查找文本的文本
                var within_text = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(within_text)){
                    return within_text;
                }

                within_text = within_text.toString();

                //指定开始进行查找的字符
                var start_num = 1;
                if(arguments.length == 3){
                    start_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(start_num)){
                        return start_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(start_num)){
                        return jfgrid.formula.error.v;
                    }

                    start_num = parseFloat(start_num);
                }

                if(start_num < 0 || start_num > within_text.length){
                    return jfgrid.formula.error.v;
                }

                if(find_text == ""){
                    return start_num;
                }

                if(within_text.indexOf(find_text) == -1){
                    return jfgrid.formula.error.v;
                }

                var strArr = within_text.split("");
                var index = within_text.indexOf(find_text, start_num - 1);

                var result = 0;
                for(var i = 0; i < index; i++){
                    if(/[^\x00-\xff]/g.test(strArr[i])){
                        result += 2;
                    }
                    else{
                        result += 1;
                    }
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "JOIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //定界符
                var separator = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(separator)){
                    return separator;
                }

                //值或数组
                var dataArr = [];

                for(var i = 1; i < arguments.length; i++){
                    var data = arguments[i];

                    if(jfgrid.getObjType(data) == "array"){
                        if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                            return jfgrid.formula.error.v;
                        }

                        dataArr = dataArr.concat(jfgrid.func_methods.getDataArr(data, false));
                    }
                    else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                        dataArr = dataArr.concat(jfgrid.func_methods.getCellDataArr(data, "text", false));
                    }
                    else{
                        dataArr.push(data);
                    }
                }

                return dataArr.join(separator);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LEFT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //包含要提取的字符的文本字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                //提取的字符的数量
                var num_chars = 1;
                if(arguments.length == 2){
                    num_chars = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(num_chars)){
                        return num_chars;
                    }

                    if(!jfgrid.func_methods.isRealNum(num_chars)){
                        return jfgrid.formula.error.v;
                    }

                    num_chars = parseInt(num_chars);
                }

                if(num_chars < 0){
                    return jfgrid.formula.error.v;
                }

                //计算
                if(num_chars >= text.length){
                    return text;
                }
                else if(num_chars == 0){
                    return "";
                }
                else{
                    return text.substr(0, num_chars);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RIGHT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //包含要提取的字符的文本字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                //提取的字符的数量
                var num_chars = 1;
                if(arguments.length == 2){
                    num_chars = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(num_chars)){
                        return num_chars;
                    }

                    if(!jfgrid.func_methods.isRealNum(num_chars)){
                        return jfgrid.formula.error.v;
                    }

                    num_chars = parseInt(num_chars);
                }

                if(num_chars < 0){
                    return jfgrid.formula.error.v;
                }

                //计算
                if(num_chars >= text.length){
                    return text;
                }
                else if(num_chars == 0){
                    return "";
                }
                else{
                    return text.substr(-num_chars, num_chars);
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MID": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //包含要提取的字符的文本字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                //开始提取的位置
                var start_num = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(start_num)){
                    return start_num;
                }

                if(!jfgrid.func_methods.isRealNum(start_num)){
                    return jfgrid.formula.error.v;
                }

                start_num = parseInt(start_num);

                //提取的字符的数量
                var num_chars = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(num_chars)){
                    return num_chars;
                }

                if(!jfgrid.func_methods.isRealNum(num_chars)){
                    return jfgrid.formula.error.v;
                }

                num_chars = parseInt(num_chars);

                if(start_num < 1 || num_chars < 0){
                    return jfgrid.formula.error.v;
                }

                //计算
                if(start_num > text.length){
                    return "";
                }

                if(start_num + num_chars > text.length){
                    return text.substr(start_num - 1, text.length - start_num + 1);
                }

                return text.substr(start_num - 1, num_chars);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LEN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return text.length;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LENB": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return text.replace(/[^\x00-\xff]/g, "aa").length;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOWER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return text ? text.toLowerCase() : text;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "UPPER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return text ? text.toUpperCase() : text;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "EXACT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串1
                var text1 = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text1)){
                    return text1;
                }

                text1 = text1.toString();

                //字符串2
                var text2 = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(text2)){
                    return text2;
                }

                text2 = text2.toString();

                return text1 === text2;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "REPLACE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串1
                var old_text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(old_text)){
                    return old_text;
                }

                old_text = old_text.toString();

                //进行替换操作的位置
                var start_num = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(start_num)){
                    return start_num;
                }

                if(!jfgrid.func_methods.isRealNum(start_num)){
                    return jfgrid.formula.error.v;
                }

                start_num = parseInt(start_num);

                //要在文本中替换的字符个数
                var num_chars = jfgrid.func_methods.getFirstValue(arguments[2]);
                if(jfgrid.func_methods.valueIsError(num_chars)){
                    return num_chars;
                }

                if(!jfgrid.func_methods.isRealNum(num_chars)){
                    return jfgrid.formula.error.v;
                }

                num_chars = parseInt(num_chars);

                //字符串2
                var new_text = jfgrid.func_methods.getFirstValue(arguments[3], "text");
                if(jfgrid.func_methods.valueIsError(new_text)){
                    return new_text;
                }

                new_text = new_text.toString();

                return old_text.substr(0, start_num - 1) + new_text + old_text.substr(start_num - 1 + num_chars);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "REPT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串1
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                //重复次数
                var number_times = jfgrid.func_methods.getFirstValue(arguments[1]);
                if(jfgrid.func_methods.valueIsError(number_times)){
                    return number_times;
                }

                if(!jfgrid.func_methods.isRealNum(number_times)){
                    return jfgrid.formula.error.v;
                }

                number_times = parseInt(number_times);

                if(number_times < 0){
                    return jfgrid.formula.error.v;
                }

                if(number_times > 100){
                    number_times = 100;
                }
                
                return new Array(number_times + 1).join(text);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SEARCH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串1
                var find_text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(find_text)){
                    return find_text;
                }

                find_text = find_text.toString();

                //字符串2
                var within_text = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(within_text)){
                    return within_text;
                }

                within_text = within_text.toString();

                //开始位置
                var start_num = 1;
                if(arguments.length == 3){
                    start_num = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(start_num)){
                        return start_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(start_num)){
                        return jfgrid.formula.error.v;
                    }

                    start_num = parseInt(start_num);
                }
                
                if(start_num <= 0 || start_num > within_text.length){
                    return jfgrid.formula.error.v;
                }
                
                var foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), start_num - 1) + 1;

                return (foundAt === 0) ? jfgrid.formula.error.v : foundAt;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUBSTITUTE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //需要替换其中字符的文本
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                //需要替换的文本
                var old_text = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(old_text)){
                    return old_text;
                }

                old_text = old_text.toString();

                //用于替换 old_text 的文本
                var new_text = jfgrid.func_methods.getFirstValue(arguments[2], "text");
                if(jfgrid.func_methods.valueIsError(new_text)){
                    return new_text;
                }

                new_text = new_text.toString();

                //instance_num
                var instance_num = null;
                if(arguments.length == 4){
                    instance_num = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(instance_num)){
                        return instance_num;
                    }

                    if(!jfgrid.func_methods.isRealNum(instance_num)){
                        return jfgrid.formula.error.v;
                    }

                    instance_num = parseInt(instance_num);
                }

                //计算
                var reg = new RegExp(old_text, "g");

                var result;

                if(instance_num == null){
                    result = text.replace(reg, new_text);
                }
                else{
                    if(instance_num <= 0){
                        return jfgrid.formula.error.v;
                    }

                    var match = text.match(reg);

                    if(match == null || instance_num > match.length){
                        return text;
                    }
                    else{
                        var len = old_text.length;
                        var index = 0;

                        for(var i = 1; i <= instance_num; i++){
                            index = text.indexOf(old_text, index) + 1;
                        }

                        result = text.substring(0, index - 1) + new_text + text.substring(index - 1 + len);
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CLEAN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                var textArr = [];
                for(var i = 0; i < text.length; i++){
                    var code = text.charCodeAt(i);

                    if(/[\u4e00-\u9fa5]/g.test(text.charAt(i)) || (code > 31 && code < 127)){
                        textArr.push(text.charAt(i));
                    }
                }
                
                return textArr.join("");
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TEXT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //数字
                var value = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                if(!jfgrid.func_methods.isRealNum(value)){
                    return jfgrid.formula.error.v;
                }

                value = parseFloat(value);
                
                //格式
                var format_text = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(format_text)){
                    return format_text;
                }

                format_text = format_text.toString();

                return jfgrid.mask.update(format_text, value);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRIM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return text.replace(/ +/g, ' ').trim();
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "VALUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString();

                return jfgrid.mask.genarate(text)[2];
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PROPER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //字符串
                var text = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(text)){
                    return text;
                }

                text = text.toString().toLowerCase();

                return text.replace(/[a-zA-Z]+/g, function(word){ return word.substring(0,1).toUpperCase() + word.substring(1); })
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CONVERT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }
            
            try {
                //数字
                var number = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(number)){
                    return number;
                }

                if(!jfgrid.func_methods.isRealNum(number)){
                    return jfgrid.formula.error.v;
                }

                number = parseFloat(number);
                
                //数值的单位
                var from_unit = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(from_unit)){
                    return from_unit;
                }

                from_unit = from_unit.toString();

                //结果的单位
                var to_unit = jfgrid.func_methods.getFirstValue(arguments[2], "text");
                if(jfgrid.func_methods.valueIsError(to_unit)){
                    return to_unit;
                }

                to_unit = to_unit.toString();

                //计算
                var units = [
                    ["a.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
                    ["a.u. of charge", "e", null, "electric_charge", false, false, 1.60217653141414e-19],
                    ["a.u. of energy", "Eh", null, "energy", false, false, 4.35974417757576e-18],
                    ["a.u. of length", "a?", null, "length", false, false, 5.29177210818182e-11],
                    ["a.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
                    ["a.u. of time", "?/Eh", null, "time", false, false, 2.41888432650516e-17],
                    ["admiralty knot", "admkn", null, "speed", false, true, 0.514773333],
                    ["ampere", "A", null, "electric_current", true, false, 1],
                    ["ampere per meter", "A/m", null, "magnetic_field_intensity", true, false, 1],
                    ["ångström", "Å", ["ang"], "length", false, true, 1e-10],
                    ["are", "ar", null, "area", false, true, 100],
                    ["astronomical unit", "ua", null, "length", false, false, 1.49597870691667e-11],
                    ["bar", "bar", null, "pressure", false, false, 100000],
                    ["barn", "b", null, "area", false, false, 1e-28],
                    ["becquerel", "Bq", null, "radioactivity", true, false, 1],
                    ["bit", "bit", ["b"], "information", false, true, 1],
                    ["btu", "BTU", ["btu"], "energy", false, true, 1055.05585262],
                    ["byte", "byte", null, "information", false, true, 8],
                    ["candela", "cd", null, "luminous_intensity", true, false, 1],
                    ["candela per square metre", "cd/m?", null, "luminance", true, false, 1],
                    ["coulomb", "C", null, "electric_charge", true, false, 1],
                    ["cubic ångström", "ang3", ["ang^3"], "volume", false, true, 1e-30],
                    ["cubic foot", "ft3", ["ft^3"], "volume", false, true, 0.028316846592],
                    ["cubic inch", "in3", ["in^3"], "volume", false, true, 0.000016387064],
                    ["cubic light-year", "ly3", ["ly^3"], "volume", false, true, 8.46786664623715e-47],
                    ["cubic metre", "m?", null, "volume", true, true, 1],
                    ["cubic mile", "mi3", ["mi^3"], "volume", false, true, 4168181825.44058],
                    ["cubic nautical mile", "Nmi3", ["Nmi^3"], "volume", false, true, 6352182208],
                    ["cubic Pica", "Pica3", ["Picapt3", "Pica^3", "Picapt^3"], "volume", false, true, 7.58660370370369e-8],
                    ["cubic yard", "yd3", ["yd^3"], "volume", false, true, 0.764554857984],
                    ["cup", "cup", null, "volume", false, true, 0.0002365882365],
                    ["dalton", "Da", ["u"], "mass", false, false, 1.66053886282828e-27],
                    ["day", "d", ["day"], "time", false, true, 86400],
                    ["degree", "°", null, "angle", false, false, 0.0174532925199433],
                    ["degrees Rankine", "Rank", null, "temperature", false, true, 0.555555555555556],
                    ["dyne", "dyn", ["dy"], "force", false, true, 0.00001],
                    ["electronvolt", "eV", ["ev"], "energy", false, true, 1.60217656514141],
                    ["ell", "ell", null, "length", false, true, 1.143],
                    ["erg", "erg", ["e"], "energy", false, true, 1e-7],
                    ["farad", "F", null, "electric_capacitance", true, false, 1],
                    ["fluid ounce", "oz", null, "volume", false, true, 0.0000295735295625],
                    ["foot", "ft", null, "length", false, true, 0.3048],
                    ["foot-pound", "flb", null, "energy", false, true, 1.3558179483314],
                    ["gal", "Gal", null, "acceleration", false, false, 0.01],
                    ["gallon", "gal", null, "volume", false, true, 0.003785411784],
                    ["gauss", "G", ["ga"], "magnetic_flux_density", false, true, 1],
                    ["grain", "grain", null, "mass", false, true, 0.0000647989],
                    ["gram", "g", null, "mass", false, true, 0.001],
                    ["gray", "Gy", null, "absorbed_dose", true, false, 1],
                    ["gross registered ton", "GRT", ["regton"], "volume", false, true, 2.8316846592],
                    ["hectare", "ha", null, "area", false, true, 10000],
                    ["henry", "H", null, "inductance", true, false, 1],
                    ["hertz", "Hz", null, "frequency", true, false, 1],
                    ["horsepower", "HP", ["h"], "power", false, true, 745.69987158227],
                    ["horsepower-hour", "HPh", ["hh", "hph"], "energy", false, true, 2684519.538],
                    ["hour", "h", ["hr"], "time", false, true, 3600],
                    ["imperial gallon (U.K.)", "uk_gal", null, "volume", false, true, 0.00454609],
                    ["imperial hundredweight", "lcwt", ["uk_cwt", "hweight"], "mass", false, true, 50.802345],
                    ["imperial quart (U.K)", "uk_qt", null, "volume", false, true, 0.0011365225],
                    ["imperial ton", "brton", ["uk_ton", "LTON"], "mass", false, true, 1016.046909],
                    ["inch", "in", null, "length", false, true, 0.0254],
                    ["international acre", "uk_acre", null, "area", false, true, 4046.8564224],
                    ["IT calorie", "cal", null, "energy", false, true, 4.1868],
                    ["joule", "J", null, "energy", true, true, 1],
                    ["katal", "kat", null, "catalytic_activity", true, false, 1],
                    ["kelvin", "K", ["kel"], "temperature", true, true, 1],
                    ["kilogram", "kg", null, "mass", true, true, 1],
                    ["knot", "kn", null, "speed", false, true, 0.514444444444444],
                    ["light-year", "ly", null, "length", false, true, 9460730472580800],
                    ["litre", "L", ["l", "lt"], "volume", false, true, 0.001],
                    ["lumen", "lm", null, "luminous_flux", true, false, 1],
                    ["lux", "lx", null, "illuminance", true, false, 1],
                    ["maxwell", "Mx", null, "magnetic_flux", false, false, 1e-18],
                    ["measurement ton", "MTON", null, "volume", false, true, 1.13267386368],
                    ["meter per hour", "m/h", ["m/hr"], "speed", false, true, 0.00027777777777778],
                    ["meter per second", "m/s", ["m/sec"], "speed", true, true, 1],
                    ["meter per second squared", "m?s??", null, "acceleration", true, false, 1],
                    ["parsec", "pc", ["parsec"], "length", false, true, 30856775814671900],
                    ["meter squared per second", "m?/s", null, "kinematic_viscosity", true, false, 1],
                    ["metre", "m", null, "length", true, true, 1],
                    ["miles per hour", "mph", null, "speed", false, true, 0.44704],
                    ["millimetre of mercury", "mmHg", null, "pressure", false, false, 133.322],
                    ["minute", "?", null, "angle", false, false, 0.000290888208665722],
                    ["minute", "min", ["mn"], "time", false, true, 60],
                    ["modern teaspoon", "tspm", null, "volume", false, true, 0.000005],
                    ["mole", "mol", null, "amount_of_substance", true, false, 1],
                    ["morgen", "Morgen", null, "area", false, true, 2500],
                    ["n.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
                    ["n.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
                    ["n.u. of speed", "c?", null, "speed", false, false, 299792458],
                    ["n.u. of time", "?/(me?c??)", null, "time", false, false, 1.28808866778687e-21],
                    ["nautical mile", "M", ["Nmi"], "length", false, true, 1852],
                    ["newton", "N", null, "force", true, true, 1],
                    ["œrsted", "Oe ", null, "magnetic_field_intensity", false, false, 79.5774715459477],
                    ["ohm", "Ω", null, "electric_resistance", true, false, 1],
                    ["ounce mass", "ozm", null, "mass", false, true, 0.028349523125],
                    ["pascal", "Pa", null, "pressure", true, false, 1],
                    ["pascal second", "Pa?s", null, "dynamic_viscosity", true, false, 1],
                    ["pferdestärke", "PS", null, "power", false, true, 735.49875],
                    ["phot", "ph", null, "illuminance", false, false, 0.0001],
                    ["pica (1/6 inch)", "pica", null, "length", false, true, 0.00035277777777778],
                    ["pica (1/72 inch)", "Pica", ["Picapt"], "length", false, true, 0.00423333333333333],
                    ["poise", "P", null, "dynamic_viscosity", false, false, 0.1],
                    ["pond", "pond", null, "force", false, true, 0.00980665],
                    ["pound force", "lbf", null, "force", false, true, 4.4482216152605],
                    ["pound mass", "lbm", null, "mass", false, true, 0.45359237],
                    ["quart", "qt", null, "volume", false, true, 0.000946352946],
                    ["radian", "rad", null, "angle", true, false, 1],
                    ["second", "?", null, "angle", false, false, 0.00000484813681109536],
                    ["second", "s", ["sec"], "time", true, true, 1],
                    ["short hundredweight", "cwt", ["shweight"], "mass", false, true, 45.359237],
                    ["siemens", "S", null, "electrical_conductance", true, false, 1],
                    ["sievert", "Sv", null, "equivalent_dose", true, false, 1],
                    ["slug", "sg", null, "mass", false, true, 14.59390294],
                    ["square ångström", "ang2", ["ang^2"], "area", false, true, 1e-20],
                    ["square foot", "ft2", ["ft^2"], "area", false, true, 0.09290304],
                    ["square inch", "in2", ["in^2"], "area", false, true, 0.00064516],
                    ["square light-year", "ly2", ["ly^2"], "area", false, true, 8.95054210748189e+31],
                    ["square meter", "m?", null, "area", true, true, 1],
                    ["square mile", "mi2", ["mi^2"], "area", false, true, 2589988.110336],
                    ["square nautical mile", "Nmi2", ["Nmi^2"], "area", false, true, 3429904],
                    ["square Pica", "Pica2", ["Picapt2", "Pica^2", "Picapt^2"], "area", false, true, 0.00001792111111111],
                    ["square yard", "yd2", ["yd^2"], "area", false, true, 0.83612736],
                    ["statute mile", "mi", null, "length", false, true, 1609.344],
                    ["steradian", "sr", null, "solid_angle", true, false, 1],
                    ["stilb", "sb", null, "luminance", false, false, 0.0001],
                    ["stokes", "St", null, "kinematic_viscosity", false, false, 0.0001],
                    ["stone", "stone", null, "mass", false, true, 6.35029318],
                    ["tablespoon", "tbs", null, "volume", false, true, 0.0000147868],
                    ["teaspoon", "tsp", null, "volume", false, true, 0.00000492892],
                    ["tesla", "T", null, "magnetic_flux_density", true, true, 1],
                    ["thermodynamic calorie", "c", null, "energy", false, true, 4.184],
                    ["ton", "ton", null, "mass", false, true, 907.18474],
                    ["tonne", "t", null, "mass", false, false, 1000],
                    ["U.K. pint", "uk_pt", null, "volume", false, true, 0.00056826125],
                    ["U.S. bushel", "bushel", null, "volume", false, true, 0.03523907],
                    ["U.S. oil barrel", "barrel", null, "volume", false, true, 0.158987295],
                    ["U.S. pint", "pt", ["us_pt"], "volume", false, true, 0.000473176473],
                    ["U.S. survey mile", "survey_mi", null, "length", false, true, 1609.347219],
                    ["U.S. survey/statute acre", "us_acre", null, "area", false, true, 4046.87261],
                    ["volt", "V", null, "voltage", true, false, 1],
                    ["watt", "W", null, "power", true, true, 1],
                    ["watt-hour", "Wh", ["wh"], "energy", false, true, 3600],
                    ["weber", "Wb", null, "magnetic_flux", true, false, 1],
                    ["yard", "yd", null, "length", false, true, 0.9144],
                    ["year", "yr", null, "time", false, true, 31557600]
                ];

                var binary_prefixes = {
                    Yi: ["yobi", 80, 1208925819614629174706176, "Yi", "yotta"],
                    Zi: ["zebi", 70, 1180591620717411303424, "Zi", "zetta"],
                    Ei: ["exbi", 60, 1152921504606846976, "Ei", "exa"],
                    Pi: ["pebi", 50, 1125899906842624, "Pi", "peta"],
                    Ti: ["tebi", 40, 1099511627776, "Ti", "tera"],
                    Gi: ["gibi", 30, 1073741824, "Gi", "giga"],
                    Mi: ["mebi", 20, 1048576, "Mi", "mega"],
                    ki: ["kibi", 10, 1024, "ki", "kilo"]
                };

                var unit_prefixes = {
                    Y: ["yotta", 1e+24, "Y"],
                    Z: ["zetta", 1e+21, "Z"],
                    E: ["exa", 1e+18, "E"],
                    P: ["peta", 1e+15, "P"],
                    T: ["tera", 1e+12, "T"],
                    G: ["giga", 1e+09, "G"],
                    M: ["mega", 1e+06, "M"],
                    k: ["kilo", 1e+03, "k"],
                    h: ["hecto", 1e+02, "h"],
                    e: ["dekao", 1e+01, "e"],
                    d: ["deci", 1e-01, "d"],
                    c: ["centi", 1e-02, "c"],
                    m: ["milli", 1e-03, "m"],
                    u: ["micro", 1e-06, "u"],
                    n: ["nano", 1e-09, "n"],
                    p: ["pico", 1e-12, "p"],
                    f: ["femto", 1e-15, "f"],
                    a: ["atto", 1e-18, "a"],
                    z: ["zepto", 1e-21, "z"],
                    y: ["yocto", 1e-24, "y"]
                };

                var from = null;
                var to = null;
                var base_from_unit = from_unit;
                var base_to_unit = to_unit;
                var from_multiplier = 1;
                var to_multiplier = 1;
                var alt;

                for (var i = 0; i < units.length; i++) {
                    alt = (units[i][2] === null) ? [] : units[i][2];
                    
                    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
                        from = units[i];
                    }
                    
                    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
                        to = units[i];
                    }
                }

                if (from === null) {
                    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];
                    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];

                    if (from_unit.substring(0, 2) === 'da') {
                        from_unit_prefix = ["dekao", 1e+01, "da"];
                    }

                    if (from_binary_prefix) {
                        from_multiplier = from_binary_prefix[2];
                        base_from_unit = from_unit.substring(2);
                    } 
                    else if (from_unit_prefix) {
                        from_multiplier = from_unit_prefix[1];
                        base_from_unit = from_unit.substring(from_unit_prefix[2].length);
                    }

                    for (var j = 0; j < units.length; j++) {
                        alt = (units[j][2] === null) ? [] : units[j][2];
          
                        if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
                            from = units[j];
                        }
                    }
                }

                if (to === null) {
                    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];
                    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];

                    if (to_unit.substring(0, 2) === 'da') {
                        to_unit_prefix = ["dekao", 1e+01, "da"];
                    }

                    if (to_binary_prefix) {
                        to_multiplier = to_binary_prefix[2];
                        base_to_unit = to_unit.substring(2);
                    } 
                    else if (to_unit_prefix) {
                        to_multiplier = to_unit_prefix[1];
                        base_to_unit = to_unit.substring(to_unit_prefix[2].length);
                    }

                    for (var k = 0; k < units.length; k++) {
                        alt = (units[k][2] === null) ? [] : units[k][2];
          
                        if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
                            to = units[k];
                        }
                    }
                }

                if (from === null || to === null) {
                    return jfgrid.formula.error.na;
                }

                if (from[3] !== to[3]) {
                    return jfgrid.formula.error.na;
                }

                return number * from[6] * from_multiplier / (to[6] * to_multiplier);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMX2MY2": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //第一个数组或数值区域
                var data_array_x = arguments[0];
                var array_x = [];

                if(jfgrid.getObjType(data_array_x) == "array"){
                    if(jfgrid.getObjType(data_array_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_x)){
                        return jfgrid.formula.error.v;
                    }

                    array_x = array_x.concat(jfgrid.func_methods.getDataArr(data_array_x, false));
                }
                else if(jfgrid.getObjType(data_array_x) == "object" && data_array_x.startCell != null){
                    array_x = array_x.concat(jfgrid.func_methods.getCellDataArr(data_array_x, "text", false));
                }
                else{
                    array_x.push(data_array_x);
                }

                //第二个数组或数值区域
                var data_array_y = arguments[1];
                var array_y = [];

                if(jfgrid.getObjType(data_array_y) == "array"){
                    if(jfgrid.getObjType(data_array_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_y)){
                        return jfgrid.formula.error.v;
                    }

                    array_y = array_y.concat(jfgrid.func_methods.getDataArr(data_array_y, false));
                }
                else if(jfgrid.getObjType(data_array_y) == "object" && data_array_y.startCell != null){
                    array_y = array_y.concat(jfgrid.func_methods.getCellDataArr(data_array_y, "text", false));
                }
                else{
                    array_y.push(data_array_y);
                }

                if(array_x.length != array_y.length){
                    return jfgrid.formula.error.na;
                }

                //array_x 和 array_y 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < array_x.length; i++){
                    var num_x = array_x[i];
                    var num_y = array_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                //计算
                var sum = 0;
                
                for (var i = 0; i < data_x.length; i++) {
                    sum += Math.pow(data_x[i], 2) - Math.pow(data_y[i], 2);
                }
                
                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMX2PY2": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //第一个数组或数值区域
                var data_array_x = arguments[0];
                var array_x = [];

                if(jfgrid.getObjType(data_array_x) == "array"){
                    if(jfgrid.getObjType(data_array_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_x)){
                        return jfgrid.formula.error.v;
                    }

                    array_x = array_x.concat(jfgrid.func_methods.getDataArr(data_array_x, false));
                }
                else if(jfgrid.getObjType(data_array_x) == "object" && data_array_x.startCell != null){
                    array_x = array_x.concat(jfgrid.func_methods.getCellDataArr(data_array_x, "text", false));
                }
                else{
                    array_x.push(data_array_x);
                }

                //第二个数组或数值区域
                var data_array_y = arguments[1];
                var array_y = [];

                if(jfgrid.getObjType(data_array_y) == "array"){
                    if(jfgrid.getObjType(data_array_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_y)){
                        return jfgrid.formula.error.v;
                    }

                    array_y = array_y.concat(jfgrid.func_methods.getDataArr(data_array_y, false));
                }
                else if(jfgrid.getObjType(data_array_y) == "object" && data_array_y.startCell != null){
                    array_y = array_y.concat(jfgrid.func_methods.getCellDataArr(data_array_y, "text", false));
                }
                else{
                    array_y.push(data_array_y);
                }

                if(array_x.length != array_y.length){
                    return jfgrid.formula.error.na;
                }

                //array_x 和 array_y 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < array_x.length; i++){
                    var num_x = array_x[i];
                    var num_y = array_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                //计算
                var sum = 0;
                
                for (var i = 0; i < data_x.length; i++) {
                    sum += Math.pow(data_x[i], 2) + Math.pow(data_y[i], 2);
                }
                
                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMXMY2": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //第一个数组或数值区域
                var data_array_x = arguments[0];
                var array_x = [];

                if(jfgrid.getObjType(data_array_x) == "array"){
                    if(jfgrid.getObjType(data_array_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_x)){
                        return jfgrid.formula.error.v;
                    }

                    array_x = array_x.concat(jfgrid.func_methods.getDataArr(data_array_x, false));
                }
                else if(jfgrid.getObjType(data_array_x) == "object" && data_array_x.startCell != null){
                    array_x = array_x.concat(jfgrid.func_methods.getCellDataArr(data_array_x, "text", false));
                }
                else{
                    array_x.push(data_array_x);
                }

                //第二个数组或数值区域
                var data_array_y = arguments[1];
                var array_y = [];

                if(jfgrid.getObjType(data_array_y) == "array"){
                    if(jfgrid.getObjType(data_array_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array_y)){
                        return jfgrid.formula.error.v;
                    }

                    array_y = array_y.concat(jfgrid.func_methods.getDataArr(data_array_y, false));
                }
                else if(jfgrid.getObjType(data_array_y) == "object" && data_array_y.startCell != null){
                    array_y = array_y.concat(jfgrid.func_methods.getCellDataArr(data_array_y, "text", false));
                }
                else{
                    array_y.push(data_array_y);
                }

                if(array_x.length != array_y.length){
                    return jfgrid.formula.error.na;
                }

                //array_x 和 array_y 只取数值
                var data_x = [], data_y = [];

                for(var i = 0; i < array_x.length; i++){
                    var num_x = array_x[i];
                    var num_y = array_y[i];

                    if(jfgrid.func_methods.isRealNum(num_x) && jfgrid.func_methods.isRealNum(num_y)){
                        data_x.push(parseFloat(num_x));
                        data_y.push(parseFloat(num_y));
                    }
                }

                //计算
                var sum = 0;
                
                for (var i = 0; i < data_x.length; i++) {
                    sum += Math.pow(data_x[i] - data_y[i], 2);
                }
                
                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRANSPOSE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //从其返回唯一值的数组或区域
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "number");
                }

                array = array[0].map(function(col, a){
                    return array.map(function(row){
                        return row[a];
                    });
                });

                return array;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TREND": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //已知的 y 值集合
                var data_known_y = arguments[0];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = jfgrid.func_methods.getDataDyadicArr(data_known_y);
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = jfgrid.func_methods.getCellDataDyadicArr(data_known_y, "text");
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    var rowArr = [];

                    rowArr.push(parseFloat(data_known_y));

                    known_y.push(rowArr);
                }

                var known_y_rowlen = known_y.length;
                var known_y_collen = known_y[0].length;

                for(var i = 0; i < known_y_rowlen; i++){
                    for(var j = 0; j < known_y_collen; j++){
                        if(!jfgrid.func_methods.isRealNum(known_y[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        known_y[i][j] = parseFloat(known_y[i][j]);
                    }
                }

                //可选 x 值集合
                var known_x = [];
                for(var i = 1; i <= known_y_rowlen; i++){
                    for(var j = 1; j <= known_y_collen; j++){
                        var number = (i - 1) * known_y_collen + j;
                        known_x.push(number);
                    }
                }

                if(arguments.length >= 2){
                    var data_known_x = arguments[1];
                    known_x = [];

                    if(jfgrid.getObjType(data_known_x) == "array"){
                        if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                            return jfgrid.formula.error.v;
                        }

                        known_x = jfgrid.func_methods.getDataDyadicArr(data_known_x);
                    }
                    else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                        known_x = jfgrid.func_methods.getCellDataDyadicArr(data_known_x, "text");
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data_known_x)){
                            return jfgrid.formula.error.v;
                        }

                        var rowArr = [];

                        rowArr.push(parseFloat(data_known_x));

                        known_x.push(rowArr);
                    }

                    for(var i = 0; i < known_x.length; i++){
                        for(var j = 0; j < known_x[0].length; j++){
                            if(!jfgrid.func_methods.isRealNum(known_x[i][j])){
                                return jfgrid.formula.error.v;
                            }

                            known_x[i][j] = parseFloat(known_x[i][j]);
                        }
                    }
                }

                var known_x_rowlen = known_x.length;
                var known_x_collen = known_x[0].length;

                //新 x 值
                var new_x = known_x;

                if(arguments.length >= 3){
                    var data_new_x = arguments[2];
                    new_x = [];

                    if(jfgrid.getObjType(data_new_x) == "array"){
                        if(jfgrid.getObjType(data_new_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_new_x)){
                            return jfgrid.formula.error.v;
                        }

                        new_x = jfgrid.func_methods.getDataDyadicArr(data_new_x);
                    }
                    else if(jfgrid.getObjType(data_new_x) == "object" && data_new_x.startCell != null){
                        new_x = jfgrid.func_methods.getCellDataDyadicArr(data_new_x, "text");
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data_new_x)){
                            return jfgrid.formula.error.v;
                        }

                        var rowArr = [];

                        rowArr.push(parseFloat(data_new_x));

                        new_x.push(rowArr);
                    }

                    for(var i = 0; i < new_x.length; i++){
                        for(var j = 0; j < new_x[0].length; j++){
                            if(!jfgrid.func_methods.isRealNum(new_x[i][j])){
                                return jfgrid.formula.error.v;
                            }

                            new_x[i][j] = parseFloat(new_x[i][j]);
                        }
                    }
                }

                //逻辑值
                var const_b = true;
                
                if(arguments.length == 4){
                    const_b = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                    if(jfgrid.func_methods.valueIsError(const_b)){
                        return const_b;
                    }
                }

                if(known_y_rowlen != known_x_rowlen || known_y_collen != known_x_collen){
                    return jfgrid.formula.error.r;
                }

                //计算
                function leastSquare(arr_x, arr_y){
                    var xSum = 0, ySum = 0, xySum = 0, x2Sum = 0;
                    
                    for(var i = 0; i < arr_x.length; i++){
                        for(var j = 0; j < arr_x[i].length; j++){
                            xSum += arr_x[i][j];
                            ySum += arr_y[i][j];
                            xySum += arr_x[i][j] * arr_y[i][j];
                            x2Sum += arr_x[i][j] * arr_x[i][j];
                        }
                    }

                    var n = arr_x.length * arr_x[0].length;

                    var xMean = xSum / n;
                    var yMean = ySum / n;
                    var xyMean = xySum / n;
                    var x2Mean = x2Sum / n;
    
                    var m = (xyMean - xMean * yMean) / (x2Mean - xMean * xMean);
                    var b = yMean - m * xMean;

                    return [m, b];
                }

                var ls = leastSquare(known_x, known_y);
                var m = ls[0];

                if(const_b){
                    var b = ls[1];
                }
                else{
                    var b = 0;
                }

                var result = [];

                for(var i = 0; i < new_x.length; i++){
                    for(var j = 0; j < new_x[i].length; j++){
                        var x = new_x[i][j];
                        var y = m * x + b;

                        result.push(Math.round(y * 1000000000) / 1000000000);
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FREQUENCY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //频率数组
                var data_data_array = arguments[0];
                var data_array = [];

                if(jfgrid.getObjType(data_data_array) == "array"){
                    if(jfgrid.getObjType(data_data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_data_array)){
                        return jfgrid.formula.error.v;
                    }

                    data_array = data_array.concat(jfgrid.func_methods.getDataArr(data_data_array, true));
                }
                else if(jfgrid.getObjType(data_data_array) == "object" && data_data_array.startCell != null){
                    data_array = data_array.concat(jfgrid.func_methods.getCellDataArr(data_data_array, "number", true));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_data_array)){
                        return jfgrid.formula.error.v;
                    }

                    data_array.push(data_data_array);
                }

                var data_array_n = [];

                for(var i = 0; i < data_array.length; i++){
                    if(jfgrid.func_methods.isRealNum(data_array[i])){
                        data_array_n.push(parseFloat(data_array[i]));
                    }
                }

                //间隔数组
                var data_bins_array = arguments[1];
                var bins_array = [];

                if(jfgrid.getObjType(data_bins_array) == "array"){
                    if(jfgrid.getObjType(data_bins_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_bins_array)){
                        return jfgrid.formula.error.v;
                    }

                    bins_array = bins_array.concat(jfgrid.func_methods.getDataArr(data_bins_array, true));
                }
                else if(jfgrid.getObjType(data_bins_array) == "object" && data_bins_array.startCell != null){
                    bins_array = bins_array.concat(jfgrid.func_methods.getCellDataArr(data_bins_array, "number", true));
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_bins_array)){
                        return jfgrid.formula.error.v;
                    }

                    bins_array.push(data_bins_array);
                }

                var bins_array_n = [];

                for(var i = 0; i < bins_array.length; i++){
                    if(jfgrid.func_methods.isRealNum(bins_array[i])){
                        bins_array_n.push(parseFloat(bins_array[i]));
                    }
                }

                //计算
                if(data_array_n.length == 0 && bins_array_n.length == 0){
                    return [[0], [0]];
                }
                else if(data_array_n.length == 0){
                    var result = [[0]];

                    for(var i = 0; i < bins_array_n.length; i++){
                        result.push([0]);
                    }

                    return result;
                }
                else if(bins_array_n.length == 0){
                    return [[0], [data_array_n.length]];
                }
                else{
                    bins_array_n.sort(function(a, b){
                        return a - b;
                    });

                    var result = [];

                    for(var i = 0; i < bins_array_n.length; i++){
                        if(i == 0){
                            var count = 0;
                            
                            for(var j = 0; j < data_array_n.length; j++){
                                if(data_array_n[j] <= bins_array_n[0]){
                                    count++;
                                }
                            }

                            result.push([count]);
                        }
                        else if(i == bins_array_n.length - 1){
                            var count1 = 0, count2 = 0;
                            
                            for(var j = 0; j < data_array_n.length; j++){
                                if(data_array_n[j] <= bins_array_n[i] && data_array_n[j] > bins_array_n[i - 1]){
                                    count1++;
                                }

                                if(data_array_n[j] > bins_array_n[i]){
                                    count2++;
                                }
                            }

                            result.push([count1]);
                            result.push([count2]);
                        }
                        else{
                            var count = 0;
                            
                            for(var j = 0; j < data_array_n.length; j++){
                                if(data_array_n[j] <= bins_array_n[i] && data_array_n[j] > bins_array_n[i - 1]){
                                    count++;
                                }
                            }

                            result.push([count]);
                        }
                    }

                    return result;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "GROWTH": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //已知的 y 值集合
                var data_known_y = arguments[0];
                var known_y = [];

                if(jfgrid.getObjType(data_known_y) == "array"){
                    if(jfgrid.getObjType(data_known_y[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    known_y = jfgrid.func_methods.getDataDyadicArr(data_known_y);
                }
                else if(jfgrid.getObjType(data_known_y) == "object" && data_known_y.startCell != null){
                    known_y = jfgrid.func_methods.getCellDataDyadicArr(data_known_y, "text");
                }
                else{
                    if(!jfgrid.func_methods.isRealNum(data_known_y)){
                        return jfgrid.formula.error.v;
                    }

                    var rowArr = [];

                    rowArr.push(parseFloat(data_known_y));

                    known_y.push(rowArr);
                }

                var known_y_rowlen = known_y.length;
                var known_y_collen = known_y[0].length;

                for(var i = 0; i < known_y_rowlen; i++){
                    for(var j = 0; j < known_y_collen; j++){
                        if(!jfgrid.func_methods.isRealNum(known_y[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        known_y[i][j] = parseFloat(known_y[i][j]);
                    }
                }

                //可选 x 值集合
                var known_x = [];
                for(var i = 1; i <= known_y_rowlen; i++){
                    for(var j = 1; j <= known_y_collen; j++){
                        var number = (i - 1) * known_y_collen + j;
                        known_x.push(number);
                    }
                }

                if(arguments.length >= 2){
                    var data_known_x = arguments[1];
                    known_x = [];

                    if(jfgrid.getObjType(data_known_x) == "array"){
                        if(jfgrid.getObjType(data_known_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_known_x)){
                            return jfgrid.formula.error.v;
                        }

                        known_x = jfgrid.func_methods.getDataDyadicArr(data_known_x);
                    }
                    else if(jfgrid.getObjType(data_known_x) == "object" && data_known_x.startCell != null){
                        known_x = jfgrid.func_methods.getCellDataDyadicArr(data_known_x, "text");
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data_known_x)){
                            return jfgrid.formula.error.v;
                        }

                        var rowArr = [];

                        rowArr.push(parseFloat(data_known_x));

                        known_x.push(rowArr);
                    }

                    for(var i = 0; i < known_x.length; i++){
                        for(var j = 0; j < known_x[0].length; j++){
                            if(!jfgrid.func_methods.isRealNum(known_x[i][j])){
                                return jfgrid.formula.error.v;
                            }

                            known_x[i][j] = parseFloat(known_x[i][j]);
                        }
                    }
                }

                var known_x_rowlen = known_x.length;
                var known_x_collen = known_x[0].length;

                //新 x 值
                var new_x = known_x;

                if(arguments.length >= 3){
                    var data_new_x = arguments[2];
                    new_x = [];

                    if(jfgrid.getObjType(data_new_x) == "array"){
                        if(jfgrid.getObjType(data_new_x[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_new_x)){
                            return jfgrid.formula.error.v;
                        }

                        new_x = jfgrid.func_methods.getDataDyadicArr(data_new_x);
                    }
                    else if(jfgrid.getObjType(data_new_x) == "object" && data_new_x.startCell != null){
                        new_x = jfgrid.func_methods.getCellDataDyadicArr(data_new_x, "text");
                    }
                    else{
                        if(!jfgrid.func_methods.isRealNum(data_new_x)){
                            return jfgrid.formula.error.v;
                        }

                        var rowArr = [];

                        rowArr.push(parseFloat(data_new_x));

                        new_x.push(rowArr);
                    }

                    for(var i = 0; i < new_x.length; i++){
                        for(var j = 0; j < new_x[0].length; j++){
                            if(!jfgrid.func_methods.isRealNum(new_x[i][j])){
                                return jfgrid.formula.error.v;
                            }

                            new_x[i][j] = parseFloat(new_x[i][j]);
                        }
                    }
                }

                //逻辑值
                var const_b = true;
                
                if(arguments.length == 4){
                    const_b = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                    if(jfgrid.func_methods.valueIsError(const_b)){
                        return const_b;
                    }
                }

                if(known_y_rowlen != known_x_rowlen || known_y_collen != known_x_collen){
                    return jfgrid.formula.error.r;
                }

                //计算
                function leastSquare(arr_x, arr_y){
                    var xSum = 0, ySum = 0, xySum = 0, x2Sum = 0;
                    
                    for(var i = 0; i < arr_x.length; i++){
                        for(var j = 0; j < arr_x[i].length; j++){
                            xSum += arr_x[i][j];
                            // ySum += arr_y[i][j];
                            ySum += Math.log(arr_y[i][j]);
                            // xySum += arr_x[i][j] * arr_y[i][j];
                            xySum += arr_x[i][j] * Math.log(arr_y[i][j]);
                            x2Sum += arr_x[i][j] * arr_x[i][j];
                        }
                    }

                    var n = arr_x.length * arr_x[0].length;

                    var xMean = xSum / n;
                    var yMean = ySum / n;
                    var xyMean = xySum / n;
                    var x2Mean = x2Sum / n;
    
                    var m = (xyMean - xMean * yMean) / (x2Mean - xMean * xMean);
                    var b = yMean - m * xMean;

                    return [Math.exp(m), Math.exp(b)];
                }

                var ls = leastSquare(known_x, known_y);
                var m = ls[0];

                if(const_b){
                    var b = ls[1];
                }
                else{
                    var b = 1;
                }

                var result = [];

                for(var i = 0; i < new_x.length; i++){
                    for(var j = 0; j < new_x[i].length; j++){
                        var x = new_x[i][j];
                        var y = b * Math.pow(m, x);
                        // var y = Math.exp(b + m * x);

                        result.push(Math.round(y * 1000000000) / 1000000000);
                    }
                }

                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LINEST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return jfgrid.formula.error.v; 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LOGEST": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return jfgrid.formula.error.v; 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MDETERM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数组
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "text");
                }
                else{
                    var rowArr = [];
                    rowArr.push(data_array);
                    array.push(rowArr);
                }

                for(var i = 0; i < array.length; i++){
                    for(var j = 0; j < array[i].length; j++){
                        if(!jfgrid.func_methods.isRealNum(array[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        array[i][j] = parseFloat(array[i][j]);
                    }
                }

                if(array.length != array[0].length){
                    return jfgrid.formula.error.v;
                }

                //计算
                function Ma(a, n){
                    var A;
                    var b = new Array();
                    
                    if(n == 1){
                        A = a[0][0];

                        return A;
                    }
                    else if(n == 2){
                        A = a[0][0] * a[1][1] - a[0][1] * a[1][0]; 

                        return A;
                    }
                    else if(n == 3){
                        A = a[0][0]*a[1][1]*a[2][2] + a[1][0]*a[2][1]*a[0][2] + a[2][0]*a[0][1]*a[1][2] - a[2][0]*a[1][1]*a[0][2] - a[0]      [0]*a[2][1]*a[1][2] - a[1][0]*a[0][1]*a[2][2];

                        return A; 
                    }
                    else{
                        A = 0;
                        var c = new Array();
                        var e = new Array();

                        for(var i = 0; i < n; i++){
                            b[i] = a[i][0] * Math.pow(-1, i + 1 + 1);
                        }

                        for(var i = 0; i < n; i++){
                            e[i] = new Array();
                            
                            for(var j = 0; j < n - 1; j++){
                                e[i][j] = a[i][j + 1];
                            }
                        }

                        for(var i = 0; i < n; i++){
                            for(var j = 0; j < n; j++){
                                c[j] = new Array();
                                
                                for(var k = 0; k < n - 1; k++){
                                    if(i > j){
                                        c[j][k] = e[j][k];
                                    }
                                    else if(i < j){
                                        c[j - 1][k] = e[j][k];
                                    }
                                }
                            }

                            A += b[i] * arguments.callee(c, n - 1);
                        }

                        return A;
                    }
                } 

                return Ma(array, array.length);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MINVERSE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数组
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "text");
                }
                else{
                    var rowArr = [];
                    rowArr.push(data_array);
                    array.push(rowArr);
                }

                for(var i = 0; i < array.length; i++){
                    for(var j = 0; j < array[i].length; j++){
                        if(!jfgrid.func_methods.isRealNum(array[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        array[i][j] = parseFloat(array[i][j]);
                    }
                }

                if(array.length != array[0].length){
                    return jfgrid.formula.error.v;
                }

                //计算
                return jfgrid.matrix_methods.inverse(array);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "MMULT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数组1
                var data_array1 = arguments[0];
                var array1 = [];

                if(jfgrid.getObjType(data_array1) == "array"){
                    if(jfgrid.getObjType(data_array1[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array1)){
                        return jfgrid.formula.error.v;
                    }

                    array1 = jfgrid.func_methods.getDataDyadicArr(data_array1);
                }
                else if(jfgrid.getObjType(data_array1) == "object" && data_array1.startCell != null){
                    array1 = jfgrid.func_methods.getCellDataDyadicArr(data_array1, "text");
                }
                else{
                    var rowArr = [];
                    rowArr.push(data_array1);
                    array1.push(rowArr);
                }

                for(var i = 0; i < array1.length; i++){
                    for(var j = 0; j < array1[i].length; j++){
                        if(!jfgrid.func_methods.isRealNum(array1[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        array1[i][j] = parseFloat(array1[i][j]);
                    }
                }

                //数组2
                var data_array2 = arguments[1];
                var array2 = [];

                if(jfgrid.getObjType(data_array2) == "array"){
                    if(jfgrid.getObjType(data_array2[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array2)){
                        return jfgrid.formula.error.v;
                    }

                    array2 = jfgrid.func_methods.getDataDyadicArr(data_array2);
                }
                else if(jfgrid.getObjType(data_array2) == "object" && data_array2.startCell != null){
                    array2 = jfgrid.func_methods.getCellDataDyadicArr(data_array2, "text");
                }
                else{
                    var rowArr = [];
                    rowArr.push(data_array2);
                    array2.push(rowArr);
                }

                for(var i = 0; i < array2.length; i++){
                    for(var j = 0; j < array2[i].length; j++){
                        if(!jfgrid.func_methods.isRealNum(array2[i][j])){
                            return jfgrid.formula.error.v;
                        }

                        array2[i][j] = parseFloat(array2[i][j]);
                    }
                }

                //计算
                if(array1[0].length != array2.length){
                    return jfgrid.formula.error.v;
                }

                var rowlen = array1.length;
                var collen = array2[0].length;

                var result = [];

                for(var m = 0; m < rowlen; m++){
                    var rowArr = [];

                    for(var n = 0; n < collen; n++){
                        var value = 0;

                        for(var p = 0; p < array1[0].length; p++){
                            value += array1[m][p] * array2[p][n];
                        }

                        rowArr.push(value);
                    }

                    result.push(rowArr);
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SUMPRODUCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //第一个数组
                //数组1
                var data_array1 = arguments[0];
                var array1 = [];

                if(jfgrid.getObjType(data_array1) == "array"){
                    if(jfgrid.getObjType(data_array1[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array1)){
                        return jfgrid.formula.error.v;
                    }

                    array1 = jfgrid.func_methods.getDataDyadicArr(data_array1);
                }
                else if(jfgrid.getObjType(data_array1) == "object" && data_array1.startCell != null){
                    array1 = jfgrid.func_methods.getCellDataDyadicArr(data_array1, "text");
                }
                else{
                    var rowArr = [];
                    rowArr.push(data_array1);
                    array1.push(rowArr);
                }

                for(var i = 0; i < array1.length; i++){
                    for(var j = 0; j < array1[i].length; j++){
                        if(!jfgrid.func_methods.isRealNum(array1[i][j])){
                            array1[i][j] = 0;
                        }
                        else{
                            array1[i][j] = parseFloat(array1[i][j]);
                        }
                    }
                }

                var rowlen = array1.length;
                var collen = array1[0].length;

                if(arguments.length >= 2){
                    for(var i = 1; i < arguments.length; i++){
                        var data = arguments[i];
                        var arr = [];

                        if(jfgrid.getObjType(data) == "array"){
                            if(jfgrid.getObjType(data[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data)){
                                return jfgrid.formula.error.v;
                            }

                            arr = jfgrid.func_methods.getDataDyadicArr(data);
                        }
                        else if(jfgrid.getObjType(data) == "object" && data.startCell != null){
                            arr = jfgrid.func_methods.getCellDataDyadicArr(data, "text");
                        }
                        else{
                            var rowArr = [];
                            rowArr.push(data);
                            arr.push(rowArr);
                        }

                        if(arr.length != rowlen || arr[0].length != collen){
                            return jfgrid.formula.error.v;
                        }

                        for(var m = 0; m < rowlen; m++){
                            for(var n = 0; n < collen; n++){
                                if(!jfgrid.func_methods.isRealNum(arr[m][n])){
                                    array1[m][n] = 0;
                                }
                                else{
                                    array1[m][n] = array1[m][n] * parseFloat(arr[m][n]);
                                }
                            }
                        }
                    }
                }

                var sum = 0;

                for(var m = 0; m < rowlen; m++){
                    for(var n = 0; n < collen; n++){
                        sum += array1[m][n];
                    }
                }

                return sum;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISFORMULA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var data_cell = arguments[0];
                var cell;

                if(jfgrid.getObjType(data_cell) == "object" && data_cell.startCell != null){
                    if(data_cell.data == null){
                        return false;
                    }

                    if(jfgrid.getObjType(data_cell.data) == "array"){
                        cell = data_cell.data[0][0];
                    }
                    else{
                        cell = data_cell.data;
                    }

                    if(cell != null && cell.f != null){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                else{
                    return jfgrid.formula.error.v;    
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "CELL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格信息的类型
                var data_info_type = arguments[0];
                var info_type;

                if(jfgrid.getObjType(data_info_type) == "array"){
                    if(jfgrid.getObjType(data_info_type[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_info_type)){
                            return jfgrid.formula.error.v;
                        }

                        info_type = data_info_type[0][0];
                    }
                    else{
                        info_type = data_info_type[0];   
                    }
                }
                else if(jfgrid.getObjType(data_info_type) == "object" && data_info_type.startCell != null){
                    if(data_info_type.data == null){
                        return jfgrid.formula.error.v;
                    }
                    else{
                        if(jfgrid.getObjType(data_info_type.data) == "array"){
                            return jfgrid.formula.error.v;
                        }

                        info_type = data_info_type.data.v;

                        if(jfgrid.func_methods.isRealNull(info_type)){
                            return jfgrid.formula.error.v;
                        }
                    }
                }
                else{
                    info_type = data_info_type;
                }

                //单元格
                var data_reference = arguments[1];
                var reference;

                if(jfgrid.getObjType(data_reference) == "object" && data_reference.startCell != null){
                    reference = data_reference.startCell;
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if(["address", "col", "color", "contents", "filename", "format", "parentheses", "prefix", "protect", "row", "type", "width"].indexOf(info_type) == -1){
                    return jfgrid.formula.error.v;
                }

                var file = jfgrid.getjfgridfile()[jfgrid.sheetmanage.getSheetIndex(jfgrid.currentSheetIndex)];

                var cellrange = jfgrid.formula.getcellrange(reference);
                var row_index = cellrange.row[0];
                var col_index = cellrange.column[0];

                switch(info_type){
                    case "address":
                        return reference;
                        break;
                    case "col":
                        return col_index + 1;
                        break;  
                    case "color":
                        return 0;
                        break;  
                    case "contents":
                        if(jfgrid.flowdata[row_index][col_index] == null || jfgrid.flowdata[row_index][col_index].v == null || jfgrid.flowdata[row_index][col_index].v ==""){
                            return 0;
                        }

                        return jfgrid.flowdata[row_index][col_index].v;
                        break;
                    case "filename":
                        return file.name;
                        break;
                    case "format":
                        if(jfgrid.flowdata[row_index][col_index] == null || jfgrid.flowdata[row_index][col_index].ct == null){
                            return "G";
                        }

                        return jfgrid.flowdata[row_index][col_index].ct.fa;
                        break;
                    case "parentheses":
                        if(jfgrid.flowdata[row_index][col_index] == null || jfgrid.flowdata[row_index][col_index].v == null || jfgrid.flowdata[row_index][col_index].v ==""){
                            return 0;
                        }

                        if(jfgrid.flowdata[row_index][col_index].v > 0){
                            return 1;
                        }
                        else{
                            return 0;
                        }
                        break;
                    case "prefix":
                        if(jfgrid.flowdata[row_index][col_index] == null || jfgrid.flowdata[row_index][col_index].ht == null || jfgrid.flowdata[row_index][col_index].v == null || jfgrid.flowdata[row_index][col_index].v ==""){
                            return "";
                        }

                        if(jfgrid.flowdata[row_index][col_index].ht == 0){//居中对齐
                            return "^";
                        }
                        else if(jfgrid.flowdata[row_index][col_index].ht == 1){//左对齐
                            return "'";
                        }
                        else if(jfgrid.flowdata[row_index][col_index].ht == 2){//右对齐
                            return '"';
                        }
                        else{
                            return "";
                        }
                        break;
                    case "protect":
                        return 0;
                        break;
                    case "row":
                        return row_index + 1;
                        break;
                    case "type":
                        if(jfgrid.flowdata[row_index][col_index] == null || jfgrid.flowdata[row_index][col_index].v == null || jfgrid.flowdata[row_index][col_index].v ==""){
                            return "b";
                        }

                        return "l";
                        break;
                    case "width":
                        var cfg = file.config;

                        if(cfg["columlen"] != null && col_index in cfg["columlen"]){
                            return cfg["columlen"][col_index];
                        }

                        return jfgrid.defaultcollen;
                        break;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "NA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                return jfgrid.formula.error.na; 
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ERROR_TYPE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_error_val = arguments[0];
                var error_val;

                if(jfgrid.getObjType(data_error_val) == "array"){
                    if(jfgrid.getObjType(data_error_val[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_error_val)){
                            return jfgrid.formula.error.v;
                        }

                        error_val = data_error_val[0][0];
                    }
                    else{
                        error_val = data_error_val[0];
                    }
                }
                else if(jfgrid.getObjType(data_error_val) == "object" && data_error_val.startCell != null){
                    if(data_error_val.data == null){
                        return jfgrid.formula.error.na;
                    }

                    if(jfgrid.getObjType(data_error_val.data) == "array"){
                        error_val = data_error_val.data[0][0];

                        if(error_val == null || jfgrid.func_methods.isRealNull(error_val.v)){
                            return jfgrid.formula.error.na;
                        }

                        error_val = error_val.v;
                    }
                    else{
                        if(jfgrid.func_methods.isRealNull(data_error_val.data.v)){
                            return jfgrid.formula.error.na;
                        }

                        error_val = data_error_val.data.v;
                    }
                }
                else{
                    error_val = data_error_val;
                }

                var error_obj = {
                    "#NULL!": 1,
                    "#DIV/0!": 2,
                    "#VALUE!": 3,
                    "#REF!": 4,
                    "#NAME?": 5,
                    "#NUM!": 6,
                    "#N/A": 7,
                    "#GETTING_DATA": 8
                }

                if(error_val in error_obj){
                    return error_obj[error_val];
                }
                else{
                    return jfgrid.formula.error.na;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISBLANK": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                //单元格
                var data_error_val = arguments[0];
                var error_val;

                if(jfgrid.getObjType(data_error_val) == "object" && data_error_val.startCell != null){
                    if(data_error_val.data == null){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISERR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return true;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }

                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(["#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISERROR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return true;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }

                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(["#N/A", "#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISLOGICAL": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return false
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }
                    
                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(value.toString().toLowerCase() == "true" || value.toString().toLowerCase() == "false"){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISNA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return false;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }
                    
                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(value.toString() == "#N/A"){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISNONTEXT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return true;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return true;
                    }

                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(["#N/A", "#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return true;
                }
                else if(value.toString().toLowerCase() == "true" || value.toString().toLowerCase() == "false"){
                    return true;
                }
                else if(jfgrid.func_methods.isRealNum(value)){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISNUMBER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return false;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }
                    
                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(jfgrid.func_methods.isRealNum(value)){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISREF": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                if(jfgrid.getObjType(arguments[0]) == "object" && arguments[0].startCell != null){
                    return true;
                }
                else{
                    return false;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "ISTEXT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return false;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return false;
                    }
                    
                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(["#N/A", "#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return false;
                }
                else if(value.toString().toLowerCase() == "true" || value.toString().toLowerCase() == "false"){
                    return false;
                }
                else if(jfgrid.func_methods.isRealNum(value)){
                    return false;
                }
                else{
                    return true;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TYPE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    return 64;
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        return 16;
                    }

                    if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                        return 1;
                    }
                    
                    value = data_value.data.v;
                }
                else{
                    value = data_value;
                }

                if(["#N/A", "#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return 16;
                }
                else if(value.toString().toLowerCase() == "true" || value.toString().toLowerCase() == "false"){
                    return 4;
                }
                else if(jfgrid.func_methods.isRealNum(value)){
                    return 1;
                }
                else{
                    return 2;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "N": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //单元格
                var data_value = arguments[0];
                var value;

                if(jfgrid.getObjType(data_value) == "array"){
                    if(jfgrid.getObjType(data_value[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_value)){
                            return jfgrid.formula.error.v;
                        }

                        value = data_value[0][0];
                    }
                    else{
                        value = data_value[0];
                    }
                }
                else if(jfgrid.getObjType(data_value) == "object" && data_value.startCell != null){
                    if(jfgrid.getObjType(data_value.data) == "array"){
                        value = data_value.data[0][0];

                        if(value == null || jfgrid.func_methods.isRealNull(value.v)){
                            return 0;
                        }

                        value = value.v;
                    }
                    else{
                        if(data_value.data == null || jfgrid.func_methods.isRealNull(data_value.data.v)){
                            return 0;
                        }

                        value = data_value.data.v;
                    }
                }
                else{
                    value = data_value;
                }

                if(["#N/A", "#VALUE!", "#REF!", "#DIV/0!", "#NUM!", "#NAME?", "#NULL!"].indexOf(value) > -1){
                    return value;
                }
                else if(value.toString().toLowerCase() == "true" || value.toString().toLowerCase() == "false"){
                    if(value.toString().toLowerCase() == "true"){
                        return 1;
                    }
                    else{
                        return 0;
                    }
                }
                else if(jfgrid.func_methods.isRealNum(value)){
                    return parseFloat(value);
                }
                else{
                    return 0;
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TO_DATE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数字
                var value = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                if(!jfgrid.func_methods.isRealNum(value)){
                    return jfgrid.formula.error.v;
                }

                value = parseFloat(value);

                return jfgrid.mask.update("yyyy-mm-dd", value);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TO_PURE_NUMBER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var value = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }
                
                if(moment(value).isValid()){
                    return jfgrid.mask.genarate(value)[2];
                }
                else{
                    return numeral(value).value() == null ? value : numeral(value).value();
                }
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TO_TEXT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                var value = jfgrid.func_methods.getFirstValue(arguments[0], "text");
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                return jfgrid.mask.update("@", value);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TO_DOLLARS": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数字
                var value = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                if(!jfgrid.func_methods.isRealNum(value)){
                    return jfgrid.formula.error.v;
                }

                value = parseFloat(value);

                return jfgrid.mask.update("$ 0.00", value);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TO_PERCENT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数字
                var value = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(value)){
                    return value;
                }

                if(!jfgrid.func_methods.isRealNum(value)){
                    return jfgrid.formula.error.v;
                }

                value = parseFloat(value);

                return jfgrid.mask.update("0%", value);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DGET": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                if (resultIndexes.length === 0) {
                    return jfgrid.formula.error.v;
                }
      
                if (resultIndexes.length > 1) {
                    return jfgrid.formula.error.nm;
                }

                return targetFields[resultIndexes[0]];
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DMAX": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var maxValue = targetFields[resultIndexes[0]];
                
                for (var i = 1; i < resultIndexes.length; i++) {
                    if (maxValue < targetFields[resultIndexes[i]]) {
                        maxValue = targetFields[resultIndexes[i]];
                    }
                }
                
                return maxValue;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DMIN": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = findField(database, field);
                    targetFields = rest(database[index]);
                } 
                else {
                    targetFields = rest(database[field]);
                }
                
                var minValue = targetFields[resultIndexes[0]];
      
                for (var i = 1; i < resultIndexes.length; i++) {
                    if (minValue > targetFields[resultIndexes[i]]) {
                        minValue = targetFields[resultIndexes[i]];
                    }
                }
                
                return minValue;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DAVERAGE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var sum = 0;
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    sum += targetFields[resultIndexes[i]];
                }
                
                return resultIndexes.length === 0 ? jfgrid.formula.error.d : sum / resultIndexes.length;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DCOUNT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
      
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                return window.jfgrid_function.COUNT.f.apply(window.jfgrid_function.COUNT, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DCOUNTA": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
      
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                return window.jfgrid_function.COUNTA.f.apply(window.jfgrid_function.COUNTA, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DPRODUCT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                var result = 1;
                
                for (i = 0; i < targetValues.length; i++) {
                    result *= targetValues[i];
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DSTDEV": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                return window.jfgrid_function.STDEVA.f.apply(window.jfgrid_function.STDEVA, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DSTDEVP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                return window.jfgrid_function.STDEVP.f.apply(window.jfgrid_function.STDEVP, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DSUM": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                var result = 0;
                
                for (i = 0; i < targetValues.length; i++) {
                    result += targetValues[i];
                }
                
                return result;
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DVAR": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                return window.jfgrid_function.VAR_S.f.apply(window.jfgrid_function.VAR_S, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DVARP": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //数据库的单元格区域
                var data_database = arguments[0];
                var database = [];

                if(jfgrid.getObjType(data_database) == "object" && data_database.startCell != null){
                    if(data_database.data == null){
                        return jfgrid.formula.error.v;
                    }

                    database = jfgrid.func_methods.getCellDataDyadicArr(data_database, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //列
                var field = jfgrid.func_methods.getFirstValue(arguments[1], "text");
                if(jfgrid.func_methods.valueIsError(field)){
                    return field;
                }

                if(jfgrid.func_methods.isRealNull(field)){
                    return jfgrid.formula.error.v;
                }

                //条件的单元格区域
                var data_criteria = arguments[2];
                var criteria = [];

                if(jfgrid.getObjType(data_criteria) == "object" && data_criteria.startCell != null){
                    if(data_criteria.data == null){
                        return jfgrid.formula.error.v;
                    }

                    criteria = jfgrid.func_methods.getCellDataDyadicArr(data_criteria, "text");
                }
                else{
                    return jfgrid.formula.error.v;
                }

                if (!jfgrid.func_methods.isRealNum(field) && jfgrid.getObjType(field) !== "string") {
                    return jfgrid.formula.error.v;
                }

                var resultIndexes = jfgrid.func_methods.findResultIndex(database, criteria);
                var targetFields = [];
      
                if (jfgrid.getObjType(field) === "string") {
                    var index = jfgrid.func_methods.findField(database, field);
                    targetFields = jfgrid.func_methods.rest(database[index]);
                } 
                else {
                    targetFields = jfgrid.func_methods.rest(database[field]);
                }
                
                var targetValues = [];
                
                for (var i = 0; i < resultIndexes.length; i++) {
                    targetValues[i] = targetFields[resultIndexes[i]];
                }
                
                targetValues = jfgrid.func_methods.compact(targetValues);
                
                return window.jfgrid_function.VAR_P.f.apply(window.jfgrid_function.VAR_P, targetValues);
            } 
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "LINESPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];
                var lineColor = arguments[1];
                var lineWidth = arguments[2];
                var normalValue = arguments[3];
                var normalColor = arguments[4];
                var maxSpot = arguments[5];
                var minSpot = arguments[6];
                var spotRadius = arguments[7];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                if(lineWidth==null){
                    lineWidth = 1;
                }
                sparksetting["lineWidth"] = lineWidth;
                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting["offsetY"] = lineWidth+1;
                sparksetting.height = height-(lineWidth+1);
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                if(lineColor==null){
                    lineColor = "#2ec7c9";
                }
                sparkColorSetting("lineColor", lineColor);
                //sparkColorSetting("fillColor", fillColor);
                sparksetting["fillColor"] = 0;


                

                //设置辅助线，可以支持min、max、avg、median等几个字符变量，或者具体的数值。
                if(!!normalValue){
                    if(typeof(normalValue)=="string"){
                        normalValue = normalValue.toLowerCase();
                        var nv = null;
                        if(normalValue=="min"){
                            nv = window.jfgrid_function.MIN.f({"data":dataformat});
                        }
                        else if(normalValue=="max"){
                            nv = window.jfgrid_function.MAX.f({"data":dataformat});
                        }
                        else if(normalValue=="avg" || normalValue=="mean"){
                            nv = window.jfgrid_function.AVERAGE.f({"data":dataformat});
                        }
                        else if(normalValue=="median"){
                            nv = window.jfgrid_function.MEDIAN.f({"data":dataformat});
                        } 

                        if(!!nv){
                            sparksetting["normalRangeMin"] = nv;
                            sparksetting["normalRangeMax"] = nv;
                        }
                    }
                    else{
                        sparksetting["normalRangeMin"] = normalValue;
                        sparksetting["normalRangeMax"] = normalValue;
                    }
                    
                }

                if(normalColor==null){
                    normalColor = "#000";
                }
                sparkColorSetting("normalRangeColor", normalColor);

                sparkColorSetting("maxSpotColor", maxSpot);
                sparkColorSetting("minSpotColor", minSpot);

                if(spotRadius==null){
                    spotRadius = "1.5";
                }
                sparksetting["spotRadius"] = spotRadius;


                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
                // { 
                //     height:rowlen,
                //     width:firstcolumlen,
                //     normalRangeMin:6,
                //     normalRangeMax:6,
                //     normalRangeColor:"#000" 
                // }
                //return "";
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "AREASPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];
                var lineColor = arguments[1];
                var fillColor = arguments[2];
                var lineWidth = arguments[3];
                var normalValue = arguments[4];
                var normalColor = arguments[5];
                // var maxSpot = arguments[5];
                // var minSpot = arguments[6];
                // var spotRadius = arguments[7];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                if(lineWidth==null){
                    lineWidth = 1;
                }
                sparksetting["lineWidth"] = lineWidth;
                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting["offsetY"] = lineWidth+1;
                sparksetting.height = height-(lineWidth+1);
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                if(lineColor==null){
                    lineColor = "#2ec7c9";
                }
                sparkColorSetting("lineColor", lineColor);
                sparkColorSetting("fillColor", fillColor);
                // sparksetting["fillColor"] = 0;

                if(lineWidth==null){
                    lineWidth = "1";
                }
                sparksetting["lineWidth"] = lineWidth;

                //设置辅助线，可以支持min、max、avg、median等几个字符变量，或者具体的数值。
                if(!!normalValue){
                    if(typeof(normalValue)=="string"){
                        normalValue = normalValue.toLowerCase();
                        var nv = null;
                        if(normalValue=="min"){
                            nv = window.jfgrid_function.MIN.f({"data":dataformat});
                        }
                        else if(normalValue=="max"){
                            nv = window.jfgrid_function.MAX.f({"data":dataformat});
                        }
                        else if(normalValue=="avg" || normalValue=="mean"){
                            nv = window.jfgrid_function.AVERAGE.f({"data":dataformat});
                        }
                        else if(normalValue=="median"){
                            nv = window.jfgrid_function.MEDIAN.f({"data":dataformat});
                        } 

                        if(!!nv){
                            sparksetting["normalRangeMin"] = nv;
                            sparksetting["normalRangeMax"] = nv;
                        }
                    }
                    else{
                        sparksetting["normalRangeMin"] = normalValue;
                        sparksetting["normalRangeMax"] = normalValue;
                    }
                    
                }

                if(normalColor==null){
                    normalColor = "#000";
                }
                sparkColorSetting("normalRangeColor", normalColor);

                // sparkColorSetting("maxSpotColor", maxSpot);
                // sparkColorSetting("minSpotColor", minSpot);

                // if(spotRadius==null){
                //     spotRadius = "1.5";
                // }
                // sparksetting["spotRadius"] = spotRadius;


                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
                // { 
                //     height:rowlen,
                //     width:firstcolumlen,
                //     normalRangeMin:6,
                //     normalRangeMax:6,
                //     normalRangeColor:"#000" 
                // }
                //return "";
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "COLUMNSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var barSpacing = arguments[1];
                var barColor = arguments[2];
                var negBarColor = arguments[3];
                var chartRangeMax = arguments[4];

                ////具体实现
                sparksetting["type"] = "column"; 
                if(barSpacing==null){
                    barSpacing = "1";
                }
                sparksetting["barSpacing"] = barSpacing;

                if(barColor==null){
                    barColor = "#fc5c5c";
                }
                sparkColorSetting("barColor", barColor);

                if(negBarColor==null){
                    negBarColor = "#97b552";
                }
                sparkColorSetting("negBarColor", negBarColor);

                if(chartRangeMax==null || chartRangeMax===false || typeof chartRangeMax !="number" ){
                    sparksetting["chartRangeMax"] = undefined;
                }
                else{
                    sparksetting["chartRangeMax"] = chartRangeMax;
                }

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STACKCOLUMNSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                //var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                var dataformat = [];

                var data = [];
                if(rangeValue!=null && rangeValue.data!=null){
                    data = rangeValue.data;
                }

                if(jfgrid.getObjType(data) == "array"){
                    data = jfgrid.formula.getPureValueByData(data);
                }
                else if(jfgrid.getObjType(data) == "object"){
                    data = data.v;

                    return [data];
                }
                else{
                    if(/\{.*?\}/.test(data)){
                        data = data.replace(/\{/g, "[").replace(/\}/g, "]");
                    }
                    data = eval('('+ data +')');
                }

                var stackconfig = arguments[1];
                var offsetY = data.length;
                if(stackconfig==null || !!stackconfig){
                    for(var c=0;c<data[0].length;c++){
                        var colstr = "";
                        for(var r=0;r<data.length;r++){
                            colstr += data[r][c] + ":";
                        }
                        colstr = colstr.substr(0, colstr.length-1);
                        dataformat.push(colstr);
                    }
                }
                else{
                    for(var r=0;r<data.length;r++){
                        var rowstr = "";
                        for(var c=0;c<data[0].length;c++){
                            rowstr += data[r][c] + ":";
                        }
                        rowstr = rowstr.substr(0, rowstr.length-1);
                        dataformat.push(rowstr);
                    } 
                    var offsetY = data[0].length;
                }
                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1];

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;
                //sparksetting.offsetY = offsetY;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var barSpacing = arguments[2];
                var chartRangeMax = arguments[3];

                ////具体实现
                sparksetting["type"] = "column"; 
                if(barSpacing==null){
                    barSpacing = "1";
                }
                sparksetting["barSpacing"] = barSpacing;

                if(chartRangeMax==null || chartRangeMax===false || typeof chartRangeMax !="number" ){
                    sparksetting["chartRangeMax"] = undefined;
                }
                else{
                    sparksetting["chartRangeMax"] = chartRangeMax;
                }

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments, 4);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现


                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BARSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var barSpacing = arguments[1];
                var barColor = arguments[2];
                var negBarColor = arguments[3];
                var chartRangeMax = arguments[4];

                ////具体实现
                sparksetting["type"] = "bar"; 
                if(barSpacing==null){
                    barSpacing = "1";
                }
                sparksetting["barSpacing"] = barSpacing;

                if(barColor==null){
                    barColor = "#fc5c5c";
                }
                sparkColorSetting("barColor", barColor);

                if(negBarColor==null){
                    negBarColor = "#97b552";
                }
                sparkColorSetting("negBarColor", negBarColor);

                if(chartRangeMax==null || chartRangeMax===false || typeof chartRangeMax !="number" ){
                    sparksetting["chartRangeMax"] = undefined;
                }
                else{
                    sparksetting["chartRangeMax"] = chartRangeMax;
                }

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "STACKBARSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                //var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                var dataformat = [];

                var data = [];
                if(rangeValue!=null && rangeValue.data!=null){
                    data = rangeValue.data;
                }

                if(jfgrid.getObjType(data) == "array"){
                    data = jfgrid.formula.getPureValueByData(data);
                }
                else if(jfgrid.getObjType(data) == "object"){
                    data = data.v;
                    return [data];
                }
                else{
                    if(/\{.*?\}/.test(data)){
                        data = data.replace(/\{/g, "[").replace(/\}/g, "]");
                    }
                    data = eval('('+ data +')');
                }

                var stackconfig = arguments[1];
                var offsetY = data.length;
                if(stackconfig==null || !!stackconfig){
                    for(var c=0;c<data[0].length;c++){
                        var colstr = "";
                        for(var r=0;r<data.length;r++){
                            colstr += data[r][c] + ":";
                        }
                        colstr = colstr.substr(0, colstr.length-1);
                        dataformat.push(colstr);
                    }
                }
                else{
                    for(var r=0;r<data.length;r++){
                        var rowstr = "";
                        for(var c=0;c<data[0].length;c++){
                            rowstr += data[r][c] + ":";
                        }
                        rowstr = rowstr.substr(0, rowstr.length-1);
                        dataformat.push(rowstr);
                    } 
                    var offsetY = data[0].length;
                }
                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1];

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;
                //sparksetting.offsetY = offsetY;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var barSpacing = arguments[2];
                var chartRangeMax = arguments[3];

                ////具体实现
                sparksetting["type"] = "bar"; 
                if(barSpacing==null){
                    barSpacing = "1";
                }
                sparksetting["barSpacing"] = barSpacing;

                if(chartRangeMax==null || chartRangeMax===false || typeof chartRangeMax !="number" ){
                    sparksetting["chartRangeMax"] = undefined;
                }
                else{
                    sparksetting["chartRangeMax"] = chartRangeMax;
                }

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments, 4);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现


                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "DISCRETESPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var thresholdValue = arguments[1];
                var barColor = arguments[2];
                var negBarColor = arguments[3];

                ////具体实现
                sparksetting["type"] = "discrete"; 

                if(thresholdValue==null){
                    thresholdValue = 0;
                }
                sparksetting["thresholdValue"] = thresholdValue;

                if(barColor==null){
                    barColor = "#2ec7c9";
                }
                sparkColorSetting("lineColor", barColor);

                if(negBarColor==null){
                    negBarColor = "#fc5c5c";
                }
                sparkColorSetting("thresholdColor", negBarColor);
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "TRISTATESPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var barSpacing = arguments[1];
                var barColor = arguments[2];
                var negBarColor = arguments[3];
                var zeroBarColor = arguments[4];

                ////具体实现
                sparksetting["type"] = "tristate"; 
                if(barSpacing==null){
                    barSpacing = "1";
                }
                sparksetting["barSpacing"] = barSpacing;

                if(barColor==null){
                    barColor = "#fc5c5c";
                }
                sparkColorSetting("barColor", barColor);

                if(negBarColor==null){
                    negBarColor = "#97b552";
                }
                sparkColorSetting("negBarColor", negBarColor);

                if(zeroBarColor==null){
                    zeroBarColor = "#999";
                }
                sparkColorSetting("zeroBarColor", zeroBarColor);

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "PIESPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var offset = arguments[1];
                var borderWidth = arguments[2];
                var borderColor = arguments[3];

                ////具体实现
                sparksetting["type"] = "pie"; 
                if(offset==null){
                    offset = 0;
                }
                sparksetting["offset"] = offset;

                if(borderWidth==null){
                    borderWidth = 0;
                }
                sparkColorSetting("borderWidth", borderWidth);

                if(borderColor==null){
                    borderColor = "#97b552";
                }
                sparkColorSetting("borderColor", borderColor);

                var colorLists = jfgrid.formula.sparklinesColorMap(arguments, 4);
                if(!!colorLists){
                    sparksetting["colorMap"] = colorLists;
                }
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BOXSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                var rangeValue = arguments[0];

                //定义需要格式化data数据
                var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                var outlierIQR = arguments[1];
                var target = arguments[2];
                var spotRadius = arguments[3];

                ////具体实现
                sparksetting["type"] = "box"; 
                if(outlierIQR==null){
                    outlierIQR = 1.5;
                }
                sparksetting["outlierIQR"] = outlierIQR;

                if(target==null){
                    target = 0;
                }
                else{
                    sparkColorSetting("target", target);
                }
                
                if(spotRadius==null){
                    spotRadius = 1.5;
                }
                sparkColorSetting("spotRadius", spotRadius);
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "BULLETSPLINES": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try {
                var cell_r = window.jfgridCurrentRow;
                var cell_c = window.jfgridCurrentColumn;
                var cell_fp = window.jfgridCurrentFunction;
                //色表，接下来会用到
                var colorList = jfgrid.formula.colorList;
                //var rangeValue = arguments[0];

                //定义需要格式化data数据
                //var dataformat = jfgrid.formula.readCellDataToOneArray(rangeValue);

                //在下面获得该单元格的长度和宽度,同时考虑了合并单元格问题
                var cellSize = jfgrid.menuButton.getCellRealSize(jfgrid.flowdata, cell_r, cell_c);
                var width = cellSize[0];
                var height = cellSize[1]; 

                //开始进行sparklines的详细设置，宽和高为单元格的宽高。
                var sparksetting = {};

                //设置sparklines图表的宽高，线图的高会随着粗细而超出单元格高度，所以减去一个量，设置offsetY或者offsetX为渲染偏移量，传给jfgridDrawMain使用。默认为0。=LINESPLINES(D9:E24,3,5)
                sparksetting.height = height;
                sparksetting.width = width;

                //定义sparklines的通用色彩设置函数，可以设置 色表【colorList】索引数值 或者 具体颜色值
                var sparkColorSetting = function(attr, value){
                    if(!!value){
                        if(typeof(value)=="number"){
                            if(value>19){
                                value = value % 20;
                            }
                            value = colorList[value];
                        }
                        sparksetting[attr] = value;
                    }
                }

                ////具体实现
                var dataformat = [];
                jfgrid_getValue(arguments);

                var data1 = jfgrid.formula.getValueByFuncData(arguments[0]);
                var data2 = jfgrid.formula.getValueByFuncData(arguments[1]);

                dataformat.push(data1);
                dataformat.push(data2);

                for(var i=2;i<arguments.length;i++){
                    dataformat.push(jfgrid.formula.getValueByFuncData(arguments[i]));
                }
                
                sparksetting["type"] = "bullet"; 
                ////具体实现

                var temp1 = jfgrid.sparkline.init(dataformat, sparksetting);

                return temp1;
            } 
            catch (e) {
                var err = e;
                //计算错误检测
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        //动态数组公式
        "SORT": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要排序的范围或数组
                var data_array = arguments[0];
                var array = [], rowlen = 1, collen = 1;

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_array)){
                            return jfgrid.formula.error.v;
                        }

                        for(var i = 0; i < data_array.length; i++){
                            var rowArr = [];

                            for(var j = 0; j < data_array[i].length; j++){
                                var number = data_array[i][j];

                                rowArr.push(number);
                            }

                            array.push(rowArr);
                        }

                        rowlen = array.length;
                        collen = array[0].length;
                    }
                    else{
                        for(var i = 0; i < data_array.length; i++){
                            var number = data_array[i];

                            array.push(number);
                        }

                        rowlen = array.length;
                    }
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    if(data_array.data != null){
                        if(jfgrid.getObjType(data_array.data) == "array"){
                            for(var i = 0; i < data_array.data.length; i++){
                                var rowArr = [];

                                for(var j = 0; j < data_array.data[i].length; j++){
                                    if(data_array.data[i][j] != null){
                                        var number = data_array.data[i][j].v;

                                        if(jfgrid.func_methods.isRealNull(number)){
                                            number = 0;
                                        }
                                        
                                        rowArr.push(number);
                                    }
                                    else{
                                        rowArr.push(0);
                                    }
                                }

                                array.push(rowArr);
                            }

                            rowlen = array.length;
                            collen = array[0].length;
                        }
                        else{
                            var number = data_array.data.v;

                            if(jfgrid.func_methods.isRealNull(number)){
                                number = 0;
                            }

                            array.push(number);
                        }
                    }
                    else{
                        array.push(0);
                    }
                }
                else{
                    var number = data_array;

                    array.push(number);
                }

                //表示要排序的行或列的数字（默认row1/col1）
                var sort_index = 1;
                if(arguments.length >= 2){
                    sort_index = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(sort_index)){
                        return sort_index;
                    }

                    if(!jfgrid.func_methods.isRealNum(sort_index)){
                        return jfgrid.formula.error.v;
                    }

                    sort_index = parseInt(sort_index);
                }

                //表示所需排序顺序的数字；1表示升序（默认），-1表示降序。
                var sort_order = 1;
                if(arguments.length >= 3){
                    sort_order = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(sort_order)){
                        return sort_order;
                    }

                    if(!jfgrid.func_methods.isRealNum(sort_order)){
                        return jfgrid.formula.error.v;
                    }

                    sort_order = Math.floor(parseFloat(sort_order));
                }
                
                //表示所需排序方向的逻辑值；按行排序为FALSE（默认），按列排序为TRUE。
                var by_col = false;
                if(arguments.length == 4){
                    by_col = jfgrid.func_methods.getCellBoolen(arguments[3]);
                
                    if(jfgrid.func_methods.valueIsError(by_col)){
                        return by_col;
                    }
                }
                
                if(by_col){
                    if(sort_index < 1 || sort_index > rowlen){
                        return jfgrid.formula.error.v;
                    }
                }
                else{
                    if(sort_index < 1 || sort_index > collen){
                        return jfgrid.formula.error.v;
                    }
                }

                if(sort_order != 1 && sort_order != -1){
                    return jfgrid.formula.error.v;
                }

                //计算
                var asc = function(x, y){
                    if(jfgrid.getObjType(x) == "array"){
                        x = x[sort_index - 1];
                    }

                    if(jfgrid.getObjType(y) == "array"){
                        y = y[sort_index - 1];
                    }

                    if(!isNaN(x) && !isNaN(y)){
                        return x - y;
                    }
                    else if(!isNaN(x)){
                        return -1;
                    }
                    else if(!isNaN(y)){
                        return 1;
                    }
                    else{
                        if(x > y){
                            return 1;
                        }
                        else if(x < y){
                            return -1;
                        }
                    }
                }

                var desc = function(x, y){
                    if(jfgrid.getObjType(x) == "array"){
                        x = x[sort_index - 1];
                    }

                    if(jfgrid.getObjType(y) == "array"){
                        y = y[sort_index - 1];
                    }

                    if(!isNaN(x) && !isNaN(y)){
                        return y - x;
                    }
                    else if(!isNaN(x)){
                        return 1;
                    }
                    else if(!isNaN(y)){
                        return -1;
                    }
                    else{
                        if(x > y){
                            return -1;
                        }
                        else if(x < y){
                            return 1;
                        }
                    }
                }

                if(by_col){
                    array = array[0].map(function(col, a){
                        return array.map(function(row){
                            return row[a];
                        });
                    });

                    if(sort_order == 1){
                        array.sort(asc);
                    }

                    if(sort_order == -1){
                        array.sort(desc);
                    }

                    array = array[0].map(function(col, b){
                        return array.map(function(row){
                            return row[b];
                        });
                    });
                }
                else{
                    if(sort_order == 1){
                        array.sort(asc);
                    }

                    if(sort_order == -1){
                        array.sort(desc);
                    }
                }

                return array;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "FILTER": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要筛选的数组或范围
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "number");
                }
                else{
                    var rowArr = [];

                    rowArr.push(parseFloat(data_array));

                    array.push(rowArr);
                }

                var rowlen = array.length,
                    collen = array[0].length;

                //布尔数组，其高度或宽度与数组相同
                var data_include = arguments[1];
                var include = [];
                var type = "row"; //筛选方式 row - 行，col - 列

                if(jfgrid.getObjType(data_include) == "array"){
                    if(jfgrid.getObjType(data_include[0]) == "array"){
                        if(!jfgrid.func_methods.isDyadicArr(data_include)){
                            return jfgrid.formula.error.v;
                        }

                        if(data_include.length > 1 && data_include[0].length > 1){
                            return jfgrid.formula.error.v;        
                        }

                        if(data_include.length > 1){
                            if(data_include.length != array.length){
                                return jfgrid.formula.error.v;
                            }

                            type = "row";

                            for(var i = 0; i < data_include.length; i++){
                                var txt = data_include[i][0];

                                if(jfgrid.getObjType(txt) == "boolean"){
                                    
                                }
                                else if(jfgrid.getObjType(txt) == "string" && (txt.toLowerCase() == "true" || txt.toLowerCase() == "false")){
                                    if(txt.toLowerCase() == "true"){
                                        txt = true;
                                    }
                                    else if(txt.toLowerCase() == "false"){
                                        txt = false;
                                    }
                                }
                                else if(jfgrid.func_methods.isRealNum(txt)){
                                    txt = parseFloat(txt);

                                    txt = txt == 0 ? false : true;
                                }
                                else{
                                    return jfgrid.formula.error.v;
                                }

                                include.push(txt);
                            }
                        }

                        if(data_include[0].length > 1){
                            if(data_include[0].length != array[0].length){
                                return jfgrid.formula.error.v;
                            }

                            type = "col";

                            for(var i = 0; i < data_include[0].length; i++){
                                var txt = data_include[0][i];

                                if(jfgrid.getObjType(txt) == "boolean"){
                                    
                                }
                                else if(jfgrid.getObjType(txt) == "string" && (txt.toLowerCase() == "true" || txt.toLowerCase() == "false")){
                                    if(txt.toLowerCase() == "true"){
                                        txt = true;
                                    }
                                    else if(txt.toLowerCase() == "false"){
                                        txt = false;
                                    }
                                }
                                else if(jfgrid.func_methods.isRealNum(txt)){
                                    txt = parseFloat(txt);

                                    txt = txt == 0 ? false : true;
                                }
                                else{
                                    return jfgrid.formula.error.v;
                                }

                                include.push(txt);
                            }
                        }
                    }
                    else{
                        if(data_include.length != array[0].length){
                            return jfgrid.formula.error.v;
                        }

                        type = "col";

                        for(var i = 0; i < data_include.length; i++){
                            var txt = data_include[i];

                            if(jfgrid.getObjType(txt) == "boolean"){
                                    
                            }
                            else if(jfgrid.getObjType(txt) == "string" && (txt.toLowerCase() == "true" || txt.toLowerCase() == "false")){
                                if(txt.toLowerCase() == "true"){
                                    txt = true;
                                }
                                else if(txt.toLowerCase() == "false"){
                                    txt = false;
                                }
                            }
                            else if(jfgrid.func_methods.isRealNum(txt)){
                                txt = parseFloat(txt);

                                txt = txt == 0 ? false : true;
                            }
                            else{
                                return jfgrid.formula.error.v;
                            }

                            include.push(txt);
                        }
                    }
                }
                else if(jfgrid.getObjType(data_include) == "object" && data_include.data != null && jfgrid.getObjType(data_include.data) == "array"){
                    if(data_include.data.length > 1 && data_include.data[0].length > 1){
                        return jfgrid.formula.error.v;        
                    }

                    if(data_include.data.length > 1){
                        if(data_include.data.length != array.length){
                            return jfgrid.formula.error.v;
                        }

                        type = "row";

                        for(var i = 0; i < data_include.data.length; i++){
                            var txt = data_include.data[i][0].v;

                            if(jfgrid.func_methods.isRealNull(txt)){
                                txt = 0;
                            }

                            if(jfgrid.getObjType(txt) == "boolean"){
                                    
                            }
                            else if(jfgrid.getObjType(txt) == "string" && (txt.toLowerCase() == "true" || txt.toLowerCase() == "false")){
                                if(txt.toLowerCase() == "true"){
                                    txt = true;
                                }
                                else if(txt.toLowerCase() == "false"){
                                    txt = false;
                                }
                            }
                            else if(jfgrid.func_methods.isRealNum(txt)){
                                txt = parseFloat(txt);

                                txt = txt == 0 ? false : true;
                            }
                            else{
                                return jfgrid.formula.error.v;
                            }

                            include.push(txt);
                        }
                    }

                    if(data_include.data[0].length > 1){
                        if(data_include.data[0].length != array[0].length){
                            return jfgrid.formula.error.v;
                        }

                        type = "col";

                        for(var i = 0; i < data_include.data[0].length; i++){
                            var txt = data_include.data[0][i].v;

                            if(jfgrid.func_methods.isRealNull(txt)){
                                txt = 0;
                            }

                            if(jfgrid.getObjType(txt) == "boolean"){
                                    
                            }
                            else if(jfgrid.getObjType(txt) == "string" && (txt.toLowerCase() == "true" || txt.toLowerCase() == "false")){
                                if(txt.toLowerCase() == "true"){
                                    txt = true;
                                }
                                else if(txt.toLowerCase() == "false"){
                                    txt = false;
                                }
                            }
                            else if(jfgrid.func_methods.isRealNum(txt)){
                                txt = parseFloat(txt);

                                txt = txt == 0 ? false : true;
                            }
                            else{
                                return jfgrid.formula.error.v;
                            }

                            include.push(txt);
                        }
                    }
                }
                else{
                    return jfgrid.formula.error.v;
                }

                //如果包含数组中的所有值都为空(filter不返回任何值)，则返回的值
                var if_empty = "";
                if(arguments.length == 3){
                    if_empty = jfgrid.func_methods.getFirstValue(arguments[2], "text");
                    if(jfgrid.func_methods.valueIsError(if_empty)){
                        return if_empty;
                    }
                }

                //计算
                var result = [];
                if(type == "row"){
                    for(var i = 0; i < array.length; i++){
                        if(include[i]){
                            result.push(array[i]);
                        }
                    }
                }
                else{
                    for(var i = 0; i < array.length; i++){
                        var rowArr = [];

                        for(var j = 0; j < array[0].length; j++){
                            if(include[j]){
                                rowArr.push(array[i][j]);
                            }
                        }

                        if(rowArr.length > 0){
                            result.push(rowArr);
                        }
                    }
                }

                if(result.length == 0){
                    return if_empty;
                }

                return result;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "UNIQUE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //从其返回唯一值的数组或区域
                var data_array = arguments[0];
                var array = [];

                if(jfgrid.getObjType(data_array) == "array"){
                    if(jfgrid.getObjType(data_array[0]) == "array" && !jfgrid.func_methods.isDyadicArr(data_array)){
                        return jfgrid.formula.error.v;
                    }

                    array = jfgrid.func_methods.getDataDyadicArr(data_array);
                }
                else if(jfgrid.getObjType(data_array) == "object" && data_array.startCell != null){
                    array = jfgrid.func_methods.getCellDataDyadicArr(data_array, "number");
                }
                else{
                    var rowArr = [];

                    rowArr.push(parseFloat(data_array));

                    array.push(rowArr);
                }
                
                //逻辑值，指示如何比较；按行 = FALSE 或省略；按列 = TRUE
                var by_col = false;
                if(arguments.length >= 2){
                    by_col = jfgrid.func_methods.getCellBoolen(arguments[1]);
                
                    if(jfgrid.func_methods.valueIsError(by_col)){
                        return by_col;
                    }
                }

                //逻辑值，仅返回唯一值中出现一次 = TRUE；包括所有唯一值 = FALSE 或省略
                var occurs_once = false;
                if(arguments.length == 3){
                    occurs_once = jfgrid.func_methods.getCellBoolen(arguments[2]);
                
                    if(jfgrid.func_methods.valueIsError(occurs_once)){
                        return occurs_once;
                    }
                }
                
                //计算
                if(by_col){
                    array = array[0].map(function(col, a){
                        return array.map(function(row){
                            return row[a];
                        });
                    });

                    var strObj = {}, strArr = [];
                    var allUnique = [];

                    for(var i = 0; i < array.length; i++){
                        var str = '';

                        for(var j = 0; j < array[i].length; j++){
                            str += array[i][j].toString() + "|||";
                        }

                        strArr.push(str);

                        if(!(str in strObj)){
                            strObj[str] = 0;

                            allUnique.push(array[i]);
                        }
                    }

                    if(occurs_once){
                        var oneUnique = [];

                        for(var i = 0; i < strArr.length; i++){
                            if(strArr.indexOf(strArr[i]) == strArr.lastIndexOf(strArr[i])){
                                oneUnique.push(array[i]);
                            }
                        }

                        oneUnique = oneUnique[0].map(function(col, a){
                            return oneUnique.map(function(row){
                                return row[a];
                            });
                        });

                        return oneUnique;
                    }
                    else{
                        allUnique = allUnique[0].map(function(col, a){
                            return allUnique.map(function(row){
                                return row[a];
                            });
                        });

                        return allUnique;
                    }
                }
                else{
                    var strObj = {}, strArr = [];
                    var allUnique = [];

                    for(var i = 0; i < array.length; i++){
                        var str = '';

                        for(var j = 0; j < array[i].length; j++){
                            str += array[i][j].toString() + "|||";
                        }

                        strArr.push(str);

                        if(!(str in strObj)){
                            strObj[str] = 0;

                            allUnique.push(array[i]);
                        }
                    }

                    if(occurs_once){
                        var oneUnique = [];

                        for(var i = 0; i < strArr.length; i++){
                            if(strArr.indexOf(strArr[i]) == strArr.lastIndexOf(strArr[i])){
                                oneUnique.push(array[i]);
                            }
                        }

                        return oneUnique;
                    }
                    else{
                        return allUnique;
                    }
                }
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "RANDARRAY": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要返回的行数
                var rows = 1;
                if(arguments.length >= 1){
                    rows = jfgrid.func_methods.getFirstValue(arguments[0]);
                    if(jfgrid.func_methods.valueIsError(rows)){
                        return rows;
                    }

                    if(!jfgrid.func_methods.isRealNum(rows)){
                        return jfgrid.formula.error.v;
                    }

                    rows = parseInt(rows);
                }

                //要返回的列数
                var cols = 1;
                if(arguments.length == 2){
                    cols = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(cols)){
                        return cols;
                    }

                    if(!jfgrid.func_methods.isRealNum(cols)){
                        return jfgrid.formula.error.v;
                    }

                    cols = parseInt(cols);
                }

                if(rows <= 0 || cols <= 0){
                    return jfgrid.formula.error.v;
                }

                //计算
                var result = [];

                for(var i = 0; i < rows; i++){
                    var result_row = [];

                    for(var j = 0; j < cols; j++){
                        result_row.push(Math.random().toFixed(9));
                    }

                    result.push(result_row);
                }

                return result;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
        "SEQUENCE": function() {
            //必要参数个数错误检测
            if (arguments.length < this.m[0] || arguments.length > this.m[1]) {
                return jfgrid.formula.error.na;
            }

            //参数类型错误检测
            for (var i = 0; i < arguments.length; i++) {
                var p = jfgrid.formula.errorParamCheck(this.p, arguments[i], i);
                
                if (!p[0]) {
                    return jfgrid.formula.error.v;
                }
            }

            try { 
                //要返回的行数
                var rows = jfgrid.func_methods.getFirstValue(arguments[0]);
                if(jfgrid.func_methods.valueIsError(rows)){
                    return rows;
                }

                if(!jfgrid.func_methods.isRealNum(rows)){
                    return jfgrid.formula.error.v;
                }

                rows = parseInt(rows);

                //要返回的列数
                var cols = 1;
                if(arguments.length >= 2){
                    cols = jfgrid.func_methods.getFirstValue(arguments[1]);
                    if(jfgrid.func_methods.valueIsError(cols)){
                        return cols;
                    }

                    if(!jfgrid.func_methods.isRealNum(cols)){
                        return jfgrid.formula.error.v;
                    }

                    cols = parseInt(cols);
                }

                //序列中的第一个数字
                var start = 1;
                if(arguments.length >= 3){
                    start = jfgrid.func_methods.getFirstValue(arguments[2]);
                    if(jfgrid.func_methods.valueIsError(start)){
                        return start;
                    }

                    if(!jfgrid.func_methods.isRealNum(start)){
                        return jfgrid.formula.error.v;
                    }

                    start = parseFloat(start);
                }

                //序列中每个序列值的增量
                var step = 1;
                if(arguments.length == 4){
                    step = jfgrid.func_methods.getFirstValue(arguments[3]);
                    if(jfgrid.func_methods.valueIsError(step)){
                        return step;
                    }

                    if(!jfgrid.func_methods.isRealNum(step)){
                        return jfgrid.formula.error.v;
                    }

                    step = parseFloat(step);
                }

                if(rows <= 0 || cols <= 0){
                    return jfgrid.formula.error.v;
                }

                //计算
                var result = [];

                for(var i = 0; i < rows; i++){
                    var result_row = [];

                    for(var j = 0; j < cols; j++){
                        var number = start + step * (j + cols * i);
                        result_row.push(number);
                    }

                    result.push(result_row);
                }

                return result;
            }    
            catch (e) {
                var err = e;
                err = jfgrid.formula.errorInfo(err);
                return [jfgrid.formula.error.v, err];
            }
        },
    };

    for(var i = 0; i < jfgrid.functionlist.length; i++){
        var func = jfgrid.functionlist[i];
        func.f = jfgrid.functionImplementation[func.n];
    }

    jfgrid.matrix_methods = (function(){
        var matrix = ({});

        var init = function init(matrix){
            var sylvester_matrix = function() {};

            sylvester_matrix.precision = 1e-6;

            sylvester_matrix.create = function(elements) {
                var M = new sylvester_matrix();
                return M.setElements(elements);
            };
            var $M = sylvester_matrix.create;
            
            sylvester_matrix.I = function(n) {
                var els = [], i = n, j;
                while (i--) { j = n;
                    els[i] = [];
                    while (j--) {
                        els[i][j] = (i === j) ? 1 : 0;
                    }
                }
                return sylvester_matrix.create(els);
            };

            sylvester_matrix.prototype = {
                e: function(i,j) {
                    if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
                    return this.elements[i-1][j-1];
                },
                dimensions: function() {
                    var cols = (this.elements.length === 0) ? 0 : this.elements[0].length;
                    return {rows: this.elements.length, cols: cols};
                },
                rows: function() {
                    return this.elements.length;
                },
                cols: function() {
                    if (this.elements.length === 0) { return 0; }
                    return this.elements[0].length;
                },
                eql: function(matrix) {
                    var M = matrix.elements || matrix;
                    if (!M[0] || typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    if (this.elements.length === 0 || M.length === 0) {
                        return this.elements.length === M.length;
                    }
                    if (this.elements.length !== M.length) { return false; }
                    if (this.elements[0].length !== M[0].length) { return false; }
                    var i = this.elements.length, nj = this.elements[0].length, j;
                    while (i--) { j = nj;
                        while (j--) {
                            if (Math.abs(this.elements[i][j] - M[i][j]) > sylvester_matrix.precision) { return false; }
                        }
                    }
                    return true;
                },
                dup: function() {
                    return sylvester_matrix.create(this.elements);
                },
                map: function(fn, context) {
                    if (this.elements.length === 0) { 
                        return sylvester_matrix.create([]); 
                    }
                    var els = [], i = this.elements.length, nj = this.elements[0].length, j;
                    while (i--) { 
                        j = nj;
                        els[i] = [];
                        while (j--) {
                            els[i][j] = fn.call(context, this.elements[i][j], i + 1, j + 1);
                        }
                    }
                    return sylvester_matrix.create(els);
                },
                isSameSizeAs: function(matrix) {
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { 
                        M = sylvester_matrix.create(M).elements; 
                    }
                    if (this.elements.length === 0) { 
                        return M.length === 0; 
                    }
                    return (this.elements.length === M.length && this.elements[0].length === M[0].length);
                },
                add: function(matrix) {
                    if (this.elements.length === 0) return this.map(function(x) { return x });
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    if (!this.isSameSizeAs(M)) { return null; }
                    return this.map(function(x, i, j) { return x + M[i-1][j-1]; });
                },
                subtract: function(matrix) {
                    if (this.elements.length === 0) return this.map(function(x) { return x });
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    if (!this.isSameSizeAs(M)) { return null; }
                    return this.map(function(x, i, j) { return x - M[i-1][j-1]; });
                },
                canMultiplyFromLeft: function(matrix) {
                    if (this.elements.length === 0) { return false; }
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    // this.columns should equal matrix.rows
                    return (this.elements[0].length === M.length);
                },
                multiply: function(matrix) {
                    if (this.elements.length === 0) { return null; }
                    if (!matrix.elements) {
                        return this.map(function(x) { return x * matrix; });
                    }
                    var returnVector = matrix.modulus ? true : false;
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    if (!this.canMultiplyFromLeft(M)) { return null; }
                    var i = this.elements.length, nj = M[0].length, j;
                    var cols = this.elements[0].length, c, elements = [], sum;
                    while (i--) { j = nj;
                        elements[i] = [];
                        while (j--) { c = cols;
                            sum = 0;
                            while (c--) {
                                sum += this.elements[i][c] * M[c][j];
                            }
                            elements[i][j] = sum;
                        }
                    }
                    var M = sylvester_matrix.create(elements);
                    return returnVector ? M.col(1) : M;
                },
                minor: function(a, b, c, d) {
                    if (this.elements.length === 0) { return null; }
                    var elements = [], ni = c, i, nj, j;
                    var rows = this.elements.length, cols = this.elements[0].length;
                    while (ni--) { i = c - ni - 1;
                        elements[i] = [];
                        nj = d;
                        while (nj--) { j = d - nj - 1;
                            elements[i][j] = this.elements[(a+i-1)%rows][(b+j-1)%cols];
                        }
                    }
                    return sylvester_matrix.create(elements);
                },
                transpose: function() {
                    if (this.elements.length === 0) return sylvester_matrix.create([]);
                    var rows = this.elements.length, i, cols = this.elements[0].length, j;
                    var elements = [], i = cols;
                    while (i--) { j = rows;
                        elements[i] = [];
                        while (j--) {
                            elements[i][j] = this.elements[j][i];
                        }
                    }
                    return sylvester_matrix.create(elements);
                },
                isSquare: function() {
                    var cols = (this.elements.length === 0) ? 0 : this.elements[0].length;
                    return (this.elements.length === cols);
                },
                max: function() {
                    if (this.elements.length === 0) { return null; }
                    var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
                    while (i--) { j = nj;
                        while (j--) {
                            if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
                        }
                    }
                    return m;
                },
                indexOf: function(x) {
                    if (this.elements.length === 0) { return null; }
                    var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;
                    for (i = 0; i < ni; i++) {
                        for (j = 0; j < nj; j++) {
                            if (this.elements[i][j] === x) { return {i: i+1, j: j+1}; }
                        }
                    }
                    return null;
                },
                diagonal: function() {
                    if (!this.isSquare) { return null; }
                    var els = [], n = this.elements.length;
                    for (var i = 0; i < n; i++) {
                        els.push(this.elements[i][i]);
                    }
                    return sylvester_matrix.create(els);
                },
                toRightTriangular: function() {
                    if (this.elements.length === 0) return sylvester_matrix.create([]);
                    var M = this.dup(), els;
                    var n = this.elements.length, i, j, np = this.elements[0].length, p;
                    for (i = 0; i < n; i++) {
                        if (M.elements[i][i] === 0) {
                            for (j = i + 1; j < n; j++) {
                                if (M.elements[j][i] !== 0) {
                                    els = [];
                                    for (p = 0; p < np; p++) { 
                                        els.push(M.elements[i][p] + M.elements[j][p]); 
                                    }
                                    M.elements[i] = els;
                                    break;
                                }
                            }
                        }
                        if (M.elements[i][i] !== 0) {
                            for (j = i + 1; j < n; j++) {
                                var multiplier = M.elements[j][i] / M.elements[i][i];
                                els = [];
                                for (p = 0; p < np; p++) {
                                    // Elements with column numbers up to an including the number of the
                                    // row that we're subtracting can safely be set straight to zero,
                                    // since that's the point of this routine and it avoids having to
                                    // loop over and correct rounding errors later
                                    els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
                                }
                                M.elements[j] = els;
                            }
                        }
                    }
                    return M;
                },
                determinant: function() {
                    if (this.elements.length === 0) { return 1; }
                    if (!this.isSquare()) { return null; }
                    var M = this.toRightTriangular();
                    var det = M.elements[0][0], n = M.elements.length;
                    for (var i = 1; i < n; i++) {
                        det = det * M.elements[i][i];
                    }
                    return det;
                },
                isSingular: function() {
                    return (this.isSquare() && this.determinant() === 0);
                },
                trace: function() {
                    if (this.elements.length === 0) { return 0; }
                    if (!this.isSquare()) { return null; }
                    var tr = this.elements[0][0], n = this.elements.length;
                    for (var i = 1; i < n; i++) {
                        tr += this.elements[i][i];
                    }
                    return tr;
                },
                rank: function() {
                    if (this.elements.length === 0) { return 0; }
                    var M = this.toRightTriangular(), rank = 0;
                    var i = this.elements.length, nj = this.elements[0].length, j;
                    while (i--) { j = nj;
                        while (j--) {
                            if (Math.abs(M.elements[i][j]) > sylvester_matrix.precision) { rank++; break; }
                        }
                    }
                    return rank;
                },
                augment: function(matrix) {
                    if (this.elements.length === 0) { return this.dup(); }
                    var M = matrix.elements || matrix;
                    if (typeof(M[0][0]) === 'undefined') { M = sylvester_matrix.create(M).elements; }
                    var T = this.dup(), cols = T.elements[0].length;
                    var i = T.elements.length, nj = M[0].length, j;
                    if (i !== M.length) { return null; }
                    while (i--) { 
                        j = nj;
                        while (j--) {
                            T.elements[i][cols + j] = M[i][j];
                        }
                    }
                    return T;
                },
                inverse: function() {
                    if (this.elements.length === 0) { return null; }
                    if (!this.isSquare() || this.isSingular()) { return null; }
                    var n = this.elements.length, i= n, j;
                    var M = this.augment(sylvester_matrix.I(n)).toRightTriangular();
                    var np = M.elements[0].length, p, els, divisor;
                    var inverse_elements = [], new_element;
                    // Sylvester.Matrix is non-singular so there will be no zeros on the
                    // diagonal. Cycle through rows from last to first.
                    while (i--) {
                        // First, normalise diagonal elements to 1
                        els = [];
                        inverse_elements[i] = [];
                        divisor = M.elements[i][i];
                        for (p = 0; p < np; p++) {
                            new_element = M.elements[i][p] / divisor;
                            els.push(new_element);
                            // Shuffle off the current row of the right hand side into the results
                            // array as it will not be modified by later runs through this loop
                            if (p >= n) { inverse_elements[i].push(new_element); }
                        }
                        M.elements[i] = els;
                        // Then, subtract this row from those above it to give the identity matrix
                        // on the left hand side
                        j = i;
                        while (j--) {
                            els = [];
                            for (p = 0; p < np; p++) {
                                els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
                            }
                            M.elements[j] = els;
                        }
                    }
                    return sylvester_matrix.create(inverse_elements);
                },
                round: function() {
                    return this.map(function(x) { return Math.round(x); });
                },
                snapTo: function(x) {
                    return this.map(function(p) {
                        return (Math.abs(p - x) <= sylvester_matrix.precision) ? x : p;
                    });
                },
                setElements: function(els) {
                    var i, j, elements = els.elements || els;
                    if (elements[0] && typeof(elements[0][0]) !== 'undefined') {
                        i = elements.length;
                        this.elements = [];
                        while (i--) { j = elements[i].length;
                            this.elements[i] = [];
                            while (j--) {
                                this.elements[i][j] = elements[i][j];
                            }
                        }
                        return this;
                    }
                    var n = elements.length;
                    this.elements = [];
                    for (i = 0; i < n; i++) {
                        this.elements.push([elements[i]]);
                    }
                    return this;
                }
            };

            matrix.sylvester_matrix = sylvester_matrix;
        }
        init(matrix);

        return {
            inverse: function(els){
                var M = matrix.sylvester_matrix.create(els);
                return M.inverse().elements;
            }
        }
    })();

})(jfgrid);